@model List<Microsoft.AspNetCore.Identity.IdentityRole>
@{
    ViewData["Title"] = "Role Manager";
    ViewData["container"] = (ViewData["container"] ?? "container-fluid");
    ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-fluid");
    Layout = "~/Areas/Admin/Views/Shared/_CommonMasterLayout.cshtml"; // Adjust to your layout file
}
<h1>Role Manager</h1>

<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<form id="roleForm" method="post">
    <div class="input-group">
        <input id="roleName" name="roleName" class="form-control w-25">
        <span class="input-group-btn">
            <button type="button" id="addRoleBtn" class="btn btn-info">Add New Role</button>
        </span>
    </div>
</form>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Role</th>
        </tr>
    </thead>
    <tbody id="roleTableBody">
        @foreach (var role in Model)
        {
            <tr>
                <td>@role.Id</td>
                <td>@role.Name</td>
            </tr>
        }
    </tbody>
</table>

<script>
    $(document).ready(function () {
        $('#addRoleBtn').click(function () {
            var roleName = $('#roleName').val();
            if (!roleName) {
                alert('Role name cannot be empty');
                return;
            }

            // Add a new row to the table
            var newRoleRow = $('<tr>').append(
                $('<td>').text('New'), // Temporary ID, could be replaced with actual ID after server response
                $('<td>').text(roleName)
            );
            $('#roleTableBody').append(newRoleRow);

            // Clear the input field
            $('#roleName').val('');
        });
    });
</script>
