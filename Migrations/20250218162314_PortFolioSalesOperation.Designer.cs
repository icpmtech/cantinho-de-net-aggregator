// <auto-generated />
using System;
using MarketAnalyticHub.Models.SetupDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketAnalyticHub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250218162314_PortFolioSalesOperation")]
    partial class PortFolioSalesOperation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dividend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PortfolioItemId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioItemId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBillingAddress")
                        .HasColumnType("bit");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Configurations.News.NewsScrapingItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorSelector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateSelector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSelector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkSelector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateScraping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleSelector")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NewsScrapingItems");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.CreditRatingAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreditRatingAgencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "United States",
                            Description = "Moody's is a leading global provider of credit ratings, research, and risk analysis.",
                            Name = "Moody's",
                            Website = "https://www.moodys.com/"
                        },
                        new
                        {
                            Id = 2,
                            Country = "United States",
                            Description = "S&P Global Ratings is known for providing credit ratings, research, and insights essential to global markets.",
                            Name = "Standard & Poor's (S&P)",
                            Website = "https://www.standardandpoors.com/"
                        });
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.DividendIndex", b =>
                {
                    b.Property<int>("DividendsTrackerId")
                        .HasColumnType("int");

                    b.Property<int>("IndexDividendsTrackerId")
                        .HasColumnType("int");

                    b.HasKey("DividendsTrackerId", "IndexDividendsTrackerId");

                    b.HasIndex("IndexDividendsTrackerId");

                    b.ToTable("DividendIndices");

                    b.HasData(
                        new
                        {
                            DividendsTrackerId = 3,
                            IndexDividendsTrackerId = 1
                        },
                        new
                        {
                            DividendsTrackerId = 4,
                            IndexDividendsTrackerId = 2
                        },
                        new
                        {
                            DividendsTrackerId = 5,
                            IndexDividendsTrackerId = 2
                        },
                        new
                        {
                            DividendsTrackerId = 6,
                            IndexDividendsTrackerId = 3
                        },
                        new
                        {
                            DividendsTrackerId = 7,
                            IndexDividendsTrackerId = 3
                        });
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.DividendsTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExDateDividend")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PayDateDividend")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrevDividend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharePrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DividendsTrackers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Banco de Sabadell, S.A.",
                            Country = "Spain",
                            Exchange = "XVAL",
                            PrevDividend = "3¢",
                            Region = "Europe",
                            SharePrice = "€1.80",
                            Ticker = "SAB"
                        },
                        new
                        {
                            Id = 2,
                            Company = "Industria De Diseno Textil SA",
                            Country = "Spain",
                            Exchange = "XMAD",
                            PrevDividend = "19.6¢",
                            Region = "Europe",
                            SharePrice = "€49.40",
                            Ticker = "ITX"
                        },
                        new
                        {
                            Id = 3,
                            Company = "Telefonica S.A",
                            Country = "Spain",
                            Exchange = "XMAD",
                            PrevDividend = "15¢",
                            Region = "Europe",
                            SharePrice = "€4.06",
                            Ticker = "TEF"
                        },
                        new
                        {
                            Id = 4,
                            Company = "Apple Inc.",
                            Country = "United States",
                            Exchange = "NASDAQ",
                            PrevDividend = "20¢",
                            Region = "North America",
                            SharePrice = "$150.00",
                            Ticker = "AAPL"
                        },
                        new
                        {
                            Id = 5,
                            Company = "Microsoft Corp",
                            Country = "United States",
                            Exchange = "NASDAQ",
                            PrevDividend = "30¢",
                            Region = "North America",
                            SharePrice = "$280.00",
                            Ticker = "MSFT"
                        },
                        new
                        {
                            Id = 6,
                            Company = "Royal Dutch Shell",
                            Country = "United Kingdom",
                            Exchange = "LSE",
                            PrevDividend = "40p",
                            Region = "United Kingdom",
                            SharePrice = "£20.00",
                            Ticker = "RDSA"
                        },
                        new
                        {
                            Id = 7,
                            Company = "Unilever PLC",
                            Country = "United Kingdom",
                            Exchange = "LSE",
                            PrevDividend = "37p",
                            Region = "United Kingdom",
                            SharePrice = "£43.00",
                            Ticker = "ULVR"
                        });
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.IndexDividendsTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Indices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IndexDividendsTrackers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Indices = "[\"AEX 25\",\"BBC Global 30\",\"BEL 20\",\"CAC 40\",\"DAX 40\",\"Euronext 100\",\"Euro Stoxx 50\",\"FTSE Eurotop 100\",\"FTSE MIB\",\"IBEX 35\",\"OBX Norway 25\",\"OMX Copenhagen 20\",\"OMX Helsinki 25\",\"OMX Stockholm 30\",\"PSI 20\",\"S\\u0026P Global 100\",\"STOXX600\",\"TSIC Dutch15\",\"TSIC Euro30\"]",
                            Region = "Europe"
                        },
                        new
                        {
                            Id = 2,
                            Indices = "[\"S\\u0026P 500\",\"NASDAQ 100\",\"Dow Jones Industrial Average\",\"Russell 2000\"]",
                            Region = "North America"
                        },
                        new
                        {
                            Id = 3,
                            Indices = "[\"FTSE 100\",\"FTSE 250\",\"FTSE All-Share\",\"FTSE AIM 100\"]",
                            Region = "United Kingdom"
                        });
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.News.NewsItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustriesImpact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QualitativeEventId")
                        .HasColumnType("int");

                    b.Property<double?>("Sentiment")
                        .HasColumnType("float");

                    b.Property<string>("SentimentImpact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("QualitativeEventId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Portfolio.Entities.PortfolioItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SaleCommission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalePrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioItems");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Portfolio.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PortfolioItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SellDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioItemId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Portfolio.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.PortfolioAlertLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<decimal>("LossPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortfolioAlertLogs");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.PortfolioLossRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("LossThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PortfolioLossRules");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.PushSubscriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("P256DH")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PushSubscriptions");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.QualitativeEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("QualitativeEvents");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.RSSLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RSSLinks");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.SetupDb.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SymbolId")
                        .HasColumnType("int");

                    b.Property<string>("TickerSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.SetupDb.HtmlPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HtmlPages");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.SetupDb.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.StockEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Calendar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortfolioItemId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceChange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Sentiment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("SummaryAnalisys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioItemId");

                    b.ToTable("StockEvents");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.StockExchange", b =>
                {
                    b.Property<string>("StockExchangeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DST")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MarketCapUsdTrillion")
                        .HasColumnType("float");

                    b.Property<double?>("MonthlyTradeVolumeUsdBillion")
                        .HasColumnType("float");

                    b.Property<int?>("OpenHoursLocalId")
                        .HasColumnType("int");

                    b.Property<int?>("OpenHoursUTCId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UtcOffset")
                        .HasColumnType("float");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("StockExchangeName");

                    b.ToTable("StockExchanges");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.SymbolItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.UserCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TotalCredits")
                        .HasColumnType("int");

                    b.Property<int>("UsedCredits")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserCredits");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivationKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlanExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectsDone")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TasksDone")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Dividend", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.Portfolio.Entities.PortfolioItem", "PortfolioItem")
                        .WithMany("Dividends")
                        .HasForeignKey("PortfolioItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioItem");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Address", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.UserProfile", "UserProfile")
                        .WithMany("Addresses")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.DividendIndex", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.DividendsTracker", "DividendsTracker")
                        .WithMany("DividendIndices")
                        .HasForeignKey("DividendsTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketAnalyticHub.Models.IndexDividendsTracker", "IndexDividendsTracker")
                        .WithMany("DividendIndices")
                        .HasForeignKey("IndexDividendsTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DividendsTracker");

                    b.Navigation("IndexDividendsTracker");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.News.NewsItem", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.SetupDb.Company", null)
                        .WithMany("News")
                        .HasForeignKey("CompanyId");

                    b.HasOne("MarketAnalyticHub.Models.QualitativeEvent", null)
                        .WithMany("News")
                        .HasForeignKey("QualitativeEventId");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.PaymentMethod", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.UserProfile", "UserProfile")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Portfolio.Entities.PortfolioItem", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.SetupDb.Company", "Industry")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("MarketAnalyticHub.Models.Portfolio.Portfolio", "Portfolio")
                        .WithMany("Items")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Portfolio.Entities.Transaction", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.Portfolio.Entities.PortfolioItem", "PortfolioItem")
                        .WithMany()
                        .HasForeignKey("PortfolioItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioItem");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.PortfolioLossRule", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.UserProfile", "UserProfile")
                        .WithMany("PortfolioLossRules")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.QualitativeEvent", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.SetupDb.Company", null)
                        .WithMany("QualitativeEvents")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.SetupDb.Company", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.SymbolItem", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.SetupDb.Sector", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.SetupDb.Company", null)
                        .WithMany("Sectors")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.StockEvent", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.Portfolio.Entities.PortfolioItem", "PortfolioItem")
                        .WithMany("StockEvents")
                        .HasForeignKey("PortfolioItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioItem");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.StockExchange", b =>
                {
                    b.OwnsOne("MarketAnalyticHub.Models.OpenHours", "OpenHoursLocal", b1 =>
                        {
                            b1.Property<string>("StockExchangeName")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Close")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Lunch")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Open")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StockExchangeName");

                            b1.ToTable("StockExchanges");

                            b1.WithOwner()
                                .HasForeignKey("StockExchangeName");
                        });

                    b.OwnsOne("MarketAnalyticHub.Models.OpenHours", "OpenHoursUTC", b1 =>
                        {
                            b1.Property<string>("StockExchangeName")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Close")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Lunch")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Open")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StockExchangeName");

                            b1.ToTable("StockExchanges");

                            b1.WithOwner()
                                .HasForeignKey("StockExchangeName");
                        });

                    b.Navigation("OpenHoursLocal");

                    b.Navigation("OpenHoursUTC");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.UserCredit", b =>
                {
                    b.HasOne("MarketAnalyticHub.Models.UserProfile", "UserProfile")
                        .WithOne("UserCredit")
                        .HasForeignKey("MarketAnalyticHub.Models.UserCredit", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.DividendsTracker", b =>
                {
                    b.Navigation("DividendIndices");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.IndexDividendsTracker", b =>
                {
                    b.Navigation("DividendIndices");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Portfolio.Entities.PortfolioItem", b =>
                {
                    b.Navigation("Dividends");

                    b.Navigation("StockEvents");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.Portfolio.Portfolio", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.QualitativeEvent", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.SetupDb.Company", b =>
                {
                    b.Navigation("News");

                    b.Navigation("QualitativeEvents");

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("MarketAnalyticHub.Models.UserProfile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("PaymentMethods");

                    b.Navigation("PortfolioLossRules");

                    b.Navigation("UserCredit");
                });
#pragma warning restore 612, 618
        }
    }
}
