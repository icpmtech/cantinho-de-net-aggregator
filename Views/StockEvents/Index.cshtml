@model PaginatedList<MarketAnalyticHub.Models.StockEvent>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Portfolio Manager";
}
@section PageStyles{

   <style>

        .table-responsive {
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }

            .table th {
                background-color: #f2f2f2;
            }

        .details-row {
            display: none;
        }

        .details-content {
            padding: 10px;
            background-color: #f9f9f9;
            border-top: none;
        }

        .clickable-row:hover {
            cursor: pointer;
            background-color: #f1f1f1;
        }
    </style>

}
<div class="card mb-3">
    <div class="card-header">
        Filter Stock Events
    </div>
    <div class="card-body">
        <form asp-action="Index" method="get" class="row g-3">
            <div class="col-md-4">
                <label for="EventName" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="EventName" name="EventName" value="@ViewData["CurrentEventName"]">
            </div>
            <div class="col-md-4">
                <label for="Date" class="form-label">Date</label>
                <input type="date" class="form-control" id="Date" name="Date" value="@ViewData["CurrentDate"]">
            </div>
            <div class="col-md-4">
                <label for="Impact" class="form-label">Impact</label>
                <select id="Impact" name="Impact" class="form-select">
                    <option value="">All</option>
                    <option value="High" selected=@(ViewData["CurrentImpact"]?.ToString() == "High" ? "selected" : "")>High</option>
                    <option value="Medium" selected=@(ViewData["CurrentImpact"]?.ToString() == "Medium" ? "selected" : "")>Medium</option>
                    <option value="Low" selected=@(ViewData["CurrentImpact"]?.ToString() == "Low" ? "selected" : "")>Low</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="Sentiment" class="form-label">Sentiment</label>
                <select id="Sentiment" name="Sentiment" class="form-select">
                    <option value="">All</option>
                    <option value="Positive" selected=@(ViewData["CurrentSentiment"]?.ToString() == "Positive" ? "selected" : "")>Positive</option>
                    <option value="Neutral" selected=@(ViewData["CurrentSentiment"]?.ToString() == "Neutral" ? "selected" : "")>Neutral</option>
                    <option value="Negative" selected=@(ViewData["CurrentSentiment"]?.ToString() == "Negative" ? "selected" : "")>Negative</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="Source" class="form-label">Source</label>
                <input type="text" class="form-control" id="Source" name="Source" value="@ViewData["CurrentSource"]">
            </div>
            <div class="col-md-4">
                <label for="PriceRange" class="form-label">Price Range</label>
                <input type="text" class="form-control" id="PriceRange" name="PriceRange" value="@ViewData["CurrentPriceRange"]">
            </div>
            <div class="col-md-12 text-end">
                <button type="submit" class="btn btn-primary mt-3">
                    <i class="bx bx-filter"></i> Apply Filters
                </button>
            </div>
        </form>
    </div>
</div>
<div class="row mb-6 g-6">
    <div class="col-md-6">
        <div class="card h-100">
            <div class="card-body row widget-separator g-0">
                <div class="col-sm-5 border-shift border-end pe-sm-6">
                    <h3 class="text-primary d-flex align-items-center gap-2 mb-2">4.89<i class="bx bx-face bx-30px"></i></h3>
                    <p class="h6 mb-2">Total @Model.Count() events</p>
                    <p class="pe-2 mb-2">All events analysed by you</p>
                    <span class="badge bg-label-primary mb-4 mb-sm-0">+5 This week</span>
                    <hr class="d-sm-none">
                </div>

                <div class="col-sm-7 gap-2 text-nowrap d-flex flex-column justify-content-between ps-sm-6 pt-2 py-sm-2">
                     <div class="d-flex align-items-center gap-2">
                        <small><i class='bx bx-smile' style='color: green;'></i>Positive </small>
                        <div class="progress w-100 bg-label-primary" style="height:8px;">
                            <div class="progress-bar bg-primary" role="progressbar" style="width: 35%" aria-valuenow="@Model.Count(s=>s.Sentiment=="Positive")" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <small class="w-px-20 text-end">@Model.Count(s => s.Sentiment == "Positive")</small>
                    </div>
                    <div class="d-flex align-items-center gap-2">
                        <small>
                            <i class='bx bx-meh' style='color: gray;'></i>
                            Neutral 
                        </small>
                        <div class="progress w-100 bg-label-primary" style="height:8px;">
                            <div class="progress-bar bg-primary" role="progressbar" style="width: 18%" aria-valuenow="@Model.Count(s=>s.Sentiment=="Neutral")" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <small class="w-px-20 text-end">@Model.Count(s=>s.Sentiment=="Neutral")</small>
                    </div>
                    <div class="d-flex align-items-center gap-2">
                        <small>
                            <i class='bx bx-frown' style='color: red;'></i>
                            Negative 
                        </small>
                        <div class="progress w-100 bg-label-primary" style="height:8px;">
                            <div class="progress-bar bg-primary" role="progressbar" style="width: 10%" aria-valuenow="@Model.Count(s=>s.Sentiment=="Neutral")" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <small class="w-px-20 text-end">@Model.Count(s => s.Sentiment == "Negative")</small>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card h-100">
            <div class="card-body row">
                <div class="col-sm-5">
                    <div class="mb-12">
                        <h5 class="mb-2 text-nowrap">Events statistics</h5>
                        <p class="mb-0"> <span class="me-2">@Model.Count() New events</span> <span class="badge bg-label-success">+8.4%</span></p>
                    </div>

                    <div>
                        <h6 class="mb-2 fw-normal">
                            <span class="text-success me-1">87%</span>Positive events
                        </h6>
                        <small>Weekly Report</small>
                    </div>
                </div>
                <div class="col-sm-7 d-flex justify-content-sm-end align-items-end">
                    <div id="reviewsChart"></div>
                </div>

            </div>
        </div>
    </div>
</div>

<div class="mt-3 col-12">
    <h6 class="text-muted">My Events</h6>
    <div class="nav-align-top mb-4">
        <ul class="nav nav-pills mb-3 nav-fill" role="tablist">
            <li class="nav-item" role="presentation">
                <button type="button" class="nav-link @(ViewData["CurrentTab"].ToString() == "list" ? "active" : "")" role="tab" data-bs-toggle="tab" data-bs-target="#navs-pills-justified-list" aria-controls="navs-pills-justified-list" aria-selected="true">
                    <i class="tf-icons bx bx-wallet me-1"></i><span class="d-none d-sm-block"> List</span>
                    <span id="portfolios-numbers" class="badge rounded-pill badge-center h-px-20 w-px-20 bg-danger ms-1">@Model.Count()</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button type="button" class="nav-link @(ViewData["CurrentTab"].ToString() == "table" ? "active" : "")" role="tab" data-bs-toggle="tab" data-bs-target="#navs-pills-justified-table" aria-controls="navs-pills-justified-table" aria-selected="false">
                    <i class="tf-icons bx bx-cube-alt me-1"></i><span class="d-none d-sm-block"> Table</span>
                    <span id="portfolios-numbers" class="badge rounded-pill badge-center h-px-20 w-px-20 bg-danger ms-1">@Model.Count()</span>
                </button>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane fade @(ViewData["CurrentTab"].ToString() == "list" ? "show active" : "")" id="navs-pills-justified-list" role="tabpanel">
                @Html.Partial("_List", Model)
            </div>
            <div class="tab-pane fade @(ViewData["CurrentTab"].ToString() == "table" ? "show active" : "")" id="navs-pills-justified-table" role="tabpanel">
                @Html.Partial("_Table", Model)
            </div>
        </div>
    </div>
</div>

@section VendorScripts {
   
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
}



@section PageScripts {
  
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var pageSizeSelect = document.getElementById('pageSizeSelect');
            var currentTab = document.querySelector('.nav-link.active').getAttribute('data-bs-target').replace('#navs-pills-justified-', '');

            function updateUrlParam(param, value) {
                var url = new URL(window.location.href);
                url.searchParams.set(param, value);
                url.searchParams.set('pageNumber', 1); // Reset to first page
                url.searchParams.set('tab', currentTab); // Maintain the current tab
                window.location.href = url.toString();
            }

            pageSizeSelect.addEventListener('change', function () {
                updateUrlParam('pageSize', pageSizeSelect.value);
            });

            var tabs = document.querySelectorAll('[data-bs-toggle="tab"]');
            tabs.forEach(function (tab) {
                tab.addEventListener('click', function () {
                    var newTab = tab.getAttribute('data-bs-target').replace('#navs-pills-justified-', '');
                    var url = new URL(window.location.href);
                    url.searchParams.set('tab', newTab);
                    url.searchParams.set('pageNumber', 1); // Reset to first page
                    window.location.href = url.toString();
                });
            });
           

        });

               document.addEventListener('DOMContentLoaded', function () {
            // Select all td elements with the class 'clickable-cell'
            var cells = document.querySelectorAll('.clickable-cell');

            cells.forEach(function (cell) {
                cell.style.cursor = 'pointer'; // Optional: Change cursor to pointer for better UX

                cell.addEventListener('click', function (event) {
                    // Prevent the event from bubbling up to parent elements if necessary
                    event.stopPropagation();

                    var row = this.closest('tr'); // Find the parent row
                    var id = row.getAttribute('data-id'); // Get the data-id from the row
                    var detailsRow = document.getElementById('details-' + id);

                    if (detailsRow.style.display === 'none' || detailsRow.style.display === '') {
                        detailsRow.style.display = 'table-row';
                    } else {
                        detailsRow.style.display = 'none';
                    }
                });
            });
        });

        document.querySelectorAll('.toggle-details').forEach(function (button) {
            button.addEventListener('click', function () {
                const target = document.querySelector(button.getAttribute('data-bs-target'));
                const icon = button.querySelector('i');

                if (target.classList.contains('show')) {
                    target.classList.remove('show');
                    icon.classList.remove('bx-chevron-up');
                    icon.classList.add('bx-chevron-down');
                } else {
                    target.classList.add('show');
                    icon.classList.remove('bx-chevron-down');
                    icon.classList.add('bx-chevron-up');
                }

            });
        });


             // Definição de variáveis de cores
        const COLORS = {
          success: "#71dd37",
          successOpacity: "#71dd3729",
          info: "#03c3ec",
          infoOpacity: "#03c3ec29",
          warningOpacity: "#ffab0029",
          primaryLabelOpacity: "#696cff29",
          secondaryLabelOpacity: "#8592a329",
          darkLabelOpacity: "#181c211a",
          white: "#fff",
        };

        // Aguarda o carregamento completo do DOM antes de executar o script
        document.addEventListener('DOMContentLoaded', function () {
          // Seleciona o elemento do gráfico no DOM
          const reviewsChartElement = document.querySelector("#reviewsChart");

          // Verifica se o elemento existe antes de tentar renderizar o gráfico
          if (reviewsChartElement !== null) {
            // Configuração do gráfico ApexCharts
            const chartOptions = {
              chart: {
                height: 160,
                width: 190,
                type: "bar",
                toolbar: { show: false },
              },
              plotOptions: {
                bar: {
                  barHeight: "75%",
                  columnWidth: "40%",
                  startingShape: "rounded",
                  endingShape: "rounded",
                  borderRadius: 5,
                  distributed: true,
                },
              },
              grid: {
                show: false,
                padding: { top: -25, bottom: -12 },
              },
              colors: [
                COLORS.successOpacity,
                COLORS.successOpacity,
                COLORS.successOpacity,
                COLORS.successOpacity,
                COLORS.success,
                COLORS.successOpacity,
                COLORS.successOpacity,
              ],
              dataLabels: { enabled: false },
              series: [{ data: [20, 40, 60, 80, 100, 80, 60] }],
              legend: { show: false },
              xaxis: {
                categories: ["M", "T", "W", "T", "F", "S", "S"],
                axisBorder: { show: false },
                axisTicks: { show: false },
                labels: {
                  style: {
                    colors: [
                      COLORS.primaryLabelOpacity,
                      COLORS.secondaryLabelOpacity,
                      COLORS.successOpacity,
                      COLORS.infoOpacity,
                      COLORS.warningOpacity,
                      COLORS.dangerOpacity,
                      COLORS.darkLabelOpacity,
                    ],
                    fontSize: "13px",
                  },
                },
              },
              yaxis: { labels: { show: false } },
              annotations: {
                yaxis: [
                  {
                    y: 70, // Valor no eixo Y onde a linha será posicionada
                    borderColor: COLORS.info, // Cor da linha (info)
                    label: {
                      borderColor: COLORS.info,
                      style: {
                        color: COLORS.white,
                        background: COLORS.info,
                      },
                      text: 'Meta',
                    },
                  },
                ],
              },
              responsive: [
                // ... (mesmas configurações de responsividade)
              ],
            };

            // Inicializa o gráfico
            const reviewsChart = new ApexCharts(reviewsChartElement, chartOptions);
            reviewsChart.render();

            // Função para aplicar tema escuro ou claro
            function applyTheme(isDark) {
              if (isDark) {
                // Atualiza as cores do gráfico para o modo escuro
                chartOptions.colors = [
                  COLORS.success,
                  COLORS.success,
                  COLORS.success,
                  COLORS.success,
                  COLORS.success,
                  COLORS.success,
                  COLORS.success,
                ];

                // Atualiza as cores dos rótulos do eixo X para o modo escuro
                chartOptions.xaxis.labels.style.colors = [
                  "#ffffff", // primary
                  "#b2b2c4", // secondary
                  COLORS.success,
                  COLORS.info,
                  "#ffab00", // warning
                  "#ff3e1d", // danger
                  "#d5d5e2", // dark
                ];

                // Atualiza a anotação para o modo escuro
                chartOptions.annotations.yaxis[0].borderColor = COLORS.info;
                chartOptions.annotations.yaxis[0].label.style.background = COLORS.info;
              } else {
                // Atualiza as cores do gráfico para o modo claro
                chartOptions.colors = [
                  COLORS.successOpacity,
                  COLORS.successOpacity,
                  COLORS.successOpacity,
                  COLORS.successOpacity,
                  COLORS.success,
                  COLORS.successOpacity,
                  COLORS.successOpacity,
                ];

                // Atualiza as cores dos rótulos do eixo X para o modo claro
                chartOptions.xaxis.labels.style.colors = [
                  COLORS.primaryLabelOpacity,
                  COLORS.secondaryLabelOpacity,
                  COLORS.successOpacity,
                  COLORS.infoOpacity,
                  COLORS.warningOpacity,
                  COLORS.dangerOpacity,
                  COLORS.darkLabelOpacity,
                ];

                // Atualiza a anotação para o modo claro
                chartOptions.annotations.yaxis[0].borderColor = COLORS.info;
                chartOptions.annotations.yaxis[0].label.style.background = COLORS.info;
              }

              // Atualiza o gráfico com as novas opções
              reviewsChart.updateOptions(chartOptions);
            }

            // Detecta se o usuário prefere o tema escuro
            const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");

            // Aplica o tema inicial com base na preferência do usuário
            applyTheme(prefersDarkScheme.matches);

            // Adiciona um listener para detectar mudanças na preferência do usuário
            prefersDarkScheme.addEventListener("change", (e) => {
              applyTheme(e.matches);
            });
          }
        });





                </script>
}
