@model PaginatedList<MarketAnalyticHub.Models.StockEvent>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Portfolio Manager";
}
@section PageStyles{

   <style>

        .table-responsive {
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }

            .table th {
                background-color: #f2f2f2;
            }

        .details-row {
            display: none;
        }

        .details-content {
            padding: 10px;
            background-color: #f9f9f9;
            border-top: none;
        }

        .clickable-row:hover {
            cursor: pointer;
            background-color: #f1f1f1;
        }
    </style>

}
<h4 class="py-3 mb-4">
    <span class="text-muted fw-light">@Localizer["StockEvents Manager"] /</span> @Localizer["StockEvents"]
</h4>
<div class="card mb-3">
    <div class="card-header">
        Filter Stock Events
    </div>
    <div class="card-body">
        <form asp-action="Index" method="get" class="row g-3">
            <div class="col-md-4">
                <label for="EventName" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="EventName" name="EventName" value="@ViewData["CurrentEventName"]">
            </div>
            <div class="col-md-4">
                <label for="Date" class="form-label">Date</label>
                <input type="date" class="form-control" id="Date" name="Date" value="@ViewData["CurrentDate"]">
            </div>
            <div class="col-md-4">
                <label for="Impact" class="form-label">Impact</label>
                <select id="Impact" name="Impact" class="form-select">
                    <option value="">All</option>
                    <option value="High" selected=@(ViewData["CurrentImpact"]?.ToString() == "High" ? "selected" : "")>High</option>
                    <option value="Medium" selected=@(ViewData["CurrentImpact"]?.ToString() == "Medium" ? "selected" : "")>Medium</option>
                    <option value="Low" selected=@(ViewData["CurrentImpact"]?.ToString() == "Low" ? "selected" : "")>Low</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="Sentiment" class="form-label">Sentiment</label>
                <select id="Sentiment" name="Sentiment" class="form-select">
                    <option value="">All</option>
                    <option value="Positive" selected=@(ViewData["CurrentSentiment"]?.ToString() == "Positive" ? "selected" : "")>Positive</option>
                    <option value="Neutral" selected=@(ViewData["CurrentSentiment"]?.ToString() == "Neutral" ? "selected" : "")>Neutral</option>
                    <option value="Negative" selected=@(ViewData["CurrentSentiment"]?.ToString() == "Negative" ? "selected" : "")>Negative</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="Source" class="form-label">Source</label>
                <input type="text" class="form-control" id="Source" name="Source" value="@ViewData["CurrentSource"]">
            </div>
            <div class="col-md-4">
                <label for="PriceRange" class="form-label">Price Range</label>
                <input type="text" class="form-control" id="PriceRange" name="PriceRange" value="@ViewData["CurrentPriceRange"]">
            </div>
            <div class="col-md-12 text-end">
                <button type="submit" class="btn btn-primary mt-3">
                    <i class="bx bx-filter"></i> Apply Filters
                </button>
            </div>
        </form>
    </div>
</div>


<div class="col-12">
    <h6 class="text-muted">My Events</h6>
    <div class="nav-align-top mb-4">
        <ul class="nav nav-pills mb-3 nav-fill" role="tablist">
            <li class="nav-item" role="presentation">
                <button type="button" class="nav-link @(ViewData["CurrentTab"].ToString() == "list" ? "active" : "")" role="tab" data-bs-toggle="tab" data-bs-target="#navs-pills-justified-list" aria-controls="navs-pills-justified-list" aria-selected="true">
                    <i class="tf-icons bx bx-wallet me-1"></i><span class="d-none d-sm-block"> List</span>
                    <span id="portfolios-numbers" class="badge rounded-pill badge-center h-px-20 w-px-20 bg-danger ms-1">@Model.Count()</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button type="button" class="nav-link @(ViewData["CurrentTab"].ToString() == "table" ? "active" : "")" role="tab" data-bs-toggle="tab" data-bs-target="#navs-pills-justified-table" aria-controls="navs-pills-justified-table" aria-selected="false">
                    <i class="tf-icons bx bx-cube-alt me-1"></i><span class="d-none d-sm-block"> Table</span>
                    <span id="portfolios-numbers" class="badge rounded-pill badge-center h-px-20 w-px-20 bg-danger ms-1">@Model.Count()</span>
                </button>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane fade @(ViewData["CurrentTab"].ToString() == "list" ? "show active" : "")" id="navs-pills-justified-list" role="tabpanel">
                @Html.Partial("_List", Model)
            </div>
            <div class="tab-pane fade @(ViewData["CurrentTab"].ToString() == "table" ? "show active" : "")" id="navs-pills-justified-table" role="tabpanel">
                @Html.Partial("_Table", Model)
            </div>
        </div>
    </div>
</div>

@section VendorScripts {
   
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
}



@section PageScripts {
  
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var pageSizeSelect = document.getElementById('pageSizeSelect');
            var currentTab = document.querySelector('.nav-link.active').getAttribute('data-bs-target').replace('#navs-pills-justified-', '');

            function updateUrlParam(param, value) {
                var url = new URL(window.location.href);
                url.searchParams.set(param, value);
                url.searchParams.set('pageNumber', 1); // Reset to first page
                url.searchParams.set('tab', currentTab); // Maintain the current tab
                window.location.href = url.toString();
            }

            pageSizeSelect.addEventListener('change', function () {
                updateUrlParam('pageSize', pageSizeSelect.value);
            });

            var tabs = document.querySelectorAll('[data-bs-toggle="tab"]');
            tabs.forEach(function (tab) {
                tab.addEventListener('click', function () {
                    var newTab = tab.getAttribute('data-bs-target').replace('#navs-pills-justified-', '');
                    var url = new URL(window.location.href);
                    url.searchParams.set('tab', newTab);
                    url.searchParams.set('pageNumber', 1); // Reset to first page
                    window.location.href = url.toString();
                });
            });
           

        });
       
        document.addEventListener('DOMContentLoaded', function () {
            var rows = document.querySelectorAll('.clickable-row');
            rows.forEach(function (row) {
                row.addEventListener('click', function () {
                    var id = this.getAttribute('data-id');
                    var detailsRow = document.getElementById('details-' + id);
                    if (detailsRow.style.display === 'none' || detailsRow.style.display === '') {
                        detailsRow.style.display = 'table-row';
                    } else {
                        detailsRow.style.display = 'none';
                    }
                });
            });
           
        });
        document.querySelectorAll('.toggle-details').forEach(function (button) {
            button.addEventListener('click', function () {
                const target = document.querySelector(button.getAttribute('data-bs-target'));
                const icon = button.querySelector('i');

                if (target.classList.contains('show')) {
                    target.classList.remove('show');
                    icon.classList.remove('bx-chevron-up');
                    icon.classList.add('bx-chevron-down');
                } else {
                    target.classList.add('show');
                    icon.classList.remove('bx-chevron-down');
                    icon.classList.add('bx-chevron-up');
                }

            });
        });
    </script>
}
