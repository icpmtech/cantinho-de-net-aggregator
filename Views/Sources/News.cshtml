@model PaginatedList<MarketAnalyticHub.Models.News.NewsItem>

@{
    ViewData["Title"] = "News";
    ViewData["container"] = (ViewData["container"] ?? "container-fluid");
    ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-fluid");
}
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<h4 class="py-3 mb-4">
    <span class="text-muted fw-light">Sources /</span> News
</h4>

<div class="mb-4">
    <label for="categorySelect" class="form-label">Filter by Category</label>
    <select id="categorySelect" class="form-select" onchange="filterByCategory()">
        <option value="">All Categories</option>
        <option value="Tech">Tech</option>
        <option value="Economy">Economy</option>
        <option value="Energy and Environment">Energy and Environment</option>
    </select>
</div>

<!-- News Table -->
<div class="card">
    <h5 class="card-header">News</h5>
    <div class="table-responsive text-nowrap">
        <table class="table" id="newsTable">
            <thead>
                <tr>
                    <th>
                        Category
                        <a href="javascript:void(0);" onclick="sortByCategory('asc')">▲</a>
                        <a href="javascript:void(0);" onclick="sortByCategory('desc')">▼</a>
                    </th>
                    <th>Sentiment</th>
                    <th>Title</th>
                    <th>Short Description</th>
                    <th>Keywords</th>
                    <th>Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody class="table-border-bottom-0">
                @foreach (var news in Model)
                {
                    <tr id="row-@news.Id" onclick="toggleDetails(@news.Id)">
                        <td>
                            <i class="bx bx-news bx-sm text-primary me-3"></i>
                            <span class="fw-medium category-display">@news.Category</span>
                        </td>
                        <td id="newsSentiment-@news.Id">
                            <span class="stars">@news.Sentiment</span>
                            <span class="fw-bold sentiment-label" data-sentiment="@news.Sentiment"></span>
                        </td>
                        <td>
                            <span class="title-display text-wrap">@news.Title</span>
                        </td>
                        <td>
                            @if (news.Description != null && news.Description.Length > 100)
                            {
                                <span class="description-display text-wrap">@news.Description.Substring(0, 100)...</span>
                            }
                            else
                            {
                                <span class="description-display text-wrap">@news.Description</span>
                            }
                        </td>
                        <td>
                            <span class="keywords-display text-wrap">@(news.Keywords != null ? string.Join(", ", news.Keywords) : string.Empty)</span>
                        </td>
                        <td>
                            <span class="date-display">@news.Date</span>
                        </td>
                        <td>
                            <div class="dropdown">
                                <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>
                                <div class="dropdown-menu">
                                    <a class="dropdown-item edit-btn" href="javascript:void(0);" onclick="editRow(@news.Id)">
                                        <i class="bx bx-edit-alt me-1"></i> Edit
                                    </a>
                                    <a class="dropdown-item" href="javascript:void(0);" onclick="deleteNews(@news.Id)">
                                        <i class="bx bx-trash me-1"></i> Delete
                                    </a>
                                    <a class="dropdown-item" href="javascript:void(0);" onclick="openAssociateCompaniesModal(@news.Id)">
                                        <i class="bx bx-link me-1"></i> Associate Companies
                                    </a>
                                    <a class="dropdown-item" href="javascript:void(0);" onclick="analyzeSentiment(@news.Id)">
                                        <i class="bx bx-analyze me-1"></i> Analyze Sentiment
                                    </a>
                                    <a class="dropdown-item" href="javascript:void(0);" onclick="toggleDetails(@news.Id)">
                                        <i class="bx bx-analyze me-1"></i> View More
                                    </a>
                                    <a class="dropdown-item" href="javascript:void(0);" onclick="openAddStockEventModal(@news.Id)">
                                        <i class="bx bx-analyze me-1"></i> Add Stock Event
                                    </a>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <tr id="details-@news.Id" class="details-row" style="display: none;">
                        <td colspan="8">
                            <div class="details-content">
                                <p><strong>Description:</strong></p>
                                <div id="description-content-@news.Id" class="markdown-content">@news.Description</div>

                                <p><strong>Link:</strong> <a href="@news.Link" target="_blank">@news.Link</a></p>
                                <p><strong>Keywords:</strong> @(news.Keywords != null ? string.Join(", ", news.Keywords) : string.Empty)</p>

                                <div>
                                    <p><strong>Sentiment Impact:</strong></p>
                                    <div id="sentiment-impact-content-@news.Id" class="markdown-content">@news.SentimentImpact</div>
                                </div>

                                <div>
                                    <p><strong>Industries Impact:</strong></p>
                                    <div id="industries-impact-content-@news.Id" class="markdown-content">@news.IndustriesImpact</div>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            var renderMarkdown = function (elementId) {
                                var markdownContent = document.getElementById(elementId).textContent;
                                var htmlContent = marked(markdownContent);
                                document.getElementById(elementId).innerHTML = htmlContent;
                            };

                            var newsId = '@news.Id';
                            renderMarkdown('description-content-' + newsId);
                            renderMarkdown('sentiment-impact-content-' + newsId);
                            renderMarkdown('industries-impact-content-' + newsId);
                        });
                    </script>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="card mt-4">
    <h5 class="card-header">Pagination</h5>

    <!-- Pagination Controls -->
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("News", new { pageNumber = Model.PageIndex - 1, pageSize = ViewBag.PageSize, searchQuery = ViewBag.SearchQuery })">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                if (i == Model.PageIndex)
                {
                    <li class="page-item active" aria-current="page">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("News", new { pageNumber = i, pageSize = ViewBag.PageSize , searchQuery = ViewBag.SearchQuery})">@i</a>
                    </li>
                }
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("News", new { pageNumber = Model.PageIndex + 1, pageSize = ViewBag.PageSize, searchQuery = ViewBag.SearchQuery })">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Next</span>
                </li>
            }
            <li class="page-item">
                <div class="mb-4" style="margin-left: 1rem;">
                    <select id="pageSizeSelect" class="form-select" onchange="setPageSize()">
                        <option value="50">50</option>
                        <option value="100">100</option>
                        <option value="200">200</option>
                    </select>
                </div>
            </li>
        </ul>
    </nav>
</div>

<!-- Associate Companies Modal -->
<div class="modal fade" id="associateCompaniesModal" tabindex="-1" aria-labelledby="associateCompaniesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="associateCompaniesModalLabel">Associate Companies</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Table will be dynamically inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Sentiment Impact Modal -->
<div class="modal fade" id="sentimentImpactModal" tabindex="-1" aria-labelledby="sentimentImpactModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sentimentImpactModalLabel">Sentiment Impact on Portfolio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Sentiment impact details will be dynamically inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit News Modal -->
<div class="modal fade" id="editNewsModal" tabindex="-1" aria-labelledby="editNewsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editNewsModalLabel">Edit News</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editNewsId">
                <div class="mb-3">
                    <label for="editNewsCategory" class="form-label">Category</label>
                    <select id="editNewsCategory" class="form-select">
                        <option value="Economy">Economy</option>
                        <option value="Sports">Sports</option>
                        <option value="Energy and Environment">Energy and Environment</option>
                        <!-- Add other categories as needed -->
                    </select>
                </div>

                <div class="mb-3">
                    <label for="editNewsTitle" class="form-label">Title</label>
                    <input type="text" class="form-control" id="editNewsTitle" required>
                </div>
                <div class="mb-3">
                    <label for="editNewsDescription" class="form-label">Description</label>
                    <textarea class="form-control" id="editNewsDescription" required></textarea>
                </div>
                <div class="mb-3">
                    <label for="editNewsLink" class="form-label">Link</label>
                    <input type="url" class="form-control" id="editNewsLink" required>
                </div>
                <div class="mb-3">
                    <label for="editNewsDate" class="form-label">Date</label>
                    <input type="date" class="form-control" id="editNewsDate" required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveNews()">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Stock Event Modal -->
<div class="modal fade" id="addStockEventModal" tabindex="-1" aria-labelledby="addStockEventModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStockEventModalLabel">Add Stock Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="addEventNewsId">
                <div class="mb-3">
                    <label for="addEventSymbol" class="form-label">Symbol</label>
                    <input type="text" class="form-control" id="addEventSymbol" required>
                </div>
                <div class="mb-3">
                    <label for="addEventDate" class="form-label">Date</label>
                    <input type="date" class="form-control" id="addEventDate" required>
                </div>
                <div class="mb-3">
                    <label for="addEventPriceChange" class="form-label">Price Change (%)</label>
                    <input type="number" class="form-control" id="addEventPriceChange" required>
                </div>
                <div class="mb-3">
                    <label for="addEventSentiment" class="form-label">Sentiment</label>
                    <select id="addEventSentiment" class="form-select" required>
                        <option value="Positive">Positive</option>
                        <option value="Negative">Negative</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="addEventSource" class="form-label">Source</label>
                    <input type="url" class="form-control" id="addEventSource" required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveStockEvent()">Save Event</button>
            </div>
        </div>
    </div>
</div>

@section PageScripts {
    <script>
        function toggleDetails(newsId) {
            var detailsRow = document.getElementById(`details-${newsId}`);
            if (detailsRow.style.display === 'none') {
                detailsRow.style.display = 'table-row';
            } else {
                detailsRow.style.display = 'none';
            }
        }

        function analyzeSentiment(newsId) {
            fetch(`/api/analizer/analyze-sentimentToPortfolio?newsId=${newsId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    showSentimentImpact(data);
                })
                .catch(error => console.error('Error analyzing sentiment:', error));
        }

        function showSentimentImpact(data) {
            const modalBody = document.querySelector('#sentimentImpactModal .modal-body');
            modalBody.innerHTML = `
                        <p>Total Market Value Before Impact: ${data.totalMarketValueBeforeImpact}</p>
                        <p>Total Market Value After Impact: ${data.totalMarketValueAfterImpact}</p>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Symbol</th>
                                    <th>Adjusted Price</th>
                                    <th>Sentiment Impact</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.portfolioItems.map(item => `
                                    <tr>
                                        <td>${item.symbol}</td>
                                        <td>${item.adjustedPrice}</td>
                                        <td>${item.sentimentImpact}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    `;

            var sentimentImpactModal = new bootstrap.Modal(document.getElementById('sentimentImpactModal'));
            sentimentImpactModal.show();
        }

        // Function to convert sentiment to stars
        function getStars(sentiment) {
            const maxStars = 5;
            const rating = Math.round((sentiment + 1) / 2 * maxStars); // Convert sentiment range [-1, 1] to [0, 5]
            let stars = '';

            // Determine star color based on sentiment
            const starColor = sentiment >= 0 ? 'gold' : 'red';

            // Loop through to create star rating
            for (let i = 0; i < maxStars; i++) {
                stars += i < rating ? `<span style="color:${starColor};">★</span>` : '☆'; // Add filled star '★' or empty star '☆'
            }

            return stars;
        }

        // Function to get sentiment label
        function getSentimentLabel(sentiment) {
            return sentiment >= 0 ? 'Positive' : 'Negative';
        }

        // Function to get sentiment color
        function getSentimentColor(sentiment) {
            return sentiment >= 0 ? 'success' : 'danger';
        }

        // Handle DOMContentLoaded event to process sentiments
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.stars').forEach(function (element) {
                let sentimentText = element.innerText.trim().replace(',', '.'); // Replace comma with dot and trim any spaces
                const sentiment = parseFloat(sentimentText);
                if (!isNaN(sentiment)) {
                    element.innerHTML = getStars(sentiment); // Use innerHTML to insert HTML content
                } else {
                    console.error(`Invalid sentiment value: ${sentimentText}`);
                }
            });

            document.querySelectorAll('.sentiment-label').forEach(function (element) {
                const sentiment = parseFloat(element.getAttribute('data-sentiment'));
                if (!isNaN(sentiment)) {
                    element.classList.add(`text-${getSentimentColor(sentiment)}`);
                    element.innerText = getSentimentLabel(sentiment);
                } else {
                    console.error(`Invalid sentiment value: ${sentiment}`);
                }
            });
        });

        // Function to simulate filtering news by category
        function filterByCategory() {
            var selectedCategory = document.getElementById("categorySelect").value;
            var url = new URL(window.location.href);
            if (selectedCategory) {
                url.searchParams.set('category', selectedCategory);
            } else {
                url.searchParams.delete('category');
            }
            window.location.href = url.toString();
        }

        // Function to simulate sorting news by category
        function sortByCategory(order) {
            var url = new URL(window.location.href);
            url.searchParams.set('sortOrder', order);
            window.location.href = url.toString();
        }

        // Function to set page size and reload the page
        function setPageSize() {
            var pageSize = document.getElementById("pageSizeSelect").value;
            var url = new URL(window.location.href);
            url.searchParams.set('pageSize', pageSize);
            window.location.href = url.toString();
        }

        // Function to edit a news item
        function editRow(id) {
            fetch(`/news/get/${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('editNewsId').value = data.id;
                    document.getElementById('editNewsCategory').value = data.category;
                    document.getElementById('editNewsTitle').value = data.title;
                    document.getElementById('editNewsDescription').value = data.description;
                    document.getElementById('editNewsLink').value = data.link;
                    document.getElementById('editNewsDate').value = new Date(data.date).toISOString().substring(0, 10);

                    var editNewsModal = new bootstrap.Modal(document.getElementById('editNewsModal'));
                    editNewsModal.show();
                })
                .catch(error => console.error('Error fetching news item:', error));
        }

        // Function to save the news item
        function saveNews() {
            const id = document.getElementById('editNewsId').value;
            const category = document.getElementById('editNewsCategory').value;
            const title = document.getElementById('editNewsTitle').value;
            const description = document.getElementById('editNewsDescription').value;
            const link = document.getElementById('editNewsLink').value;
            const date = document.getElementById('editNewsDate').value;

            const updatedNews = {
                id,
                category,
                title,
                description,
                link,
                date
            };

            fetch(`/news/update/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedNews)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('News item updated successfully');
                        location.reload();
                    } else {
                        alert('Error updating news item: ' + data.message);
                    }
                })
                .catch(error => console.error('Error updating news item:', error));
        }

        function deleteNews(id) {
            if (confirm('Are you sure you want to delete this news item?')) {
                fetch(`/news/delete/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('News item deleted successfully');
                            location.reload();
                        } else {
                            alert('Error deleting news item: ' + data.message);
                        }
                    })
                    .catch(error => console.error('Error deleting news item:', error));
            }
        }

        function markdownTableToHtml(markdown) {
            const lines = markdown.trim().split('\n');
            const headers = lines[0].trim().split('|').map(header => header.trim()).filter(header => header);
            const dataLines = lines.slice(2);

            const table = document.createElement('table');
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');

            const headerRow = document.createElement('tr');
            headers.forEach(header => {
                const th = document.createElement('th');
                th.textContent = header;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            dataLines.forEach(line => {
                const row = document.createElement('tr');
                const cells = line.split('|').map(cell => cell.trim()).filter(cell => cell);
                cells.forEach(cell => {
                    const td = document.createElement('td');
                    td.textContent = cell;
                    row.appendChild(td);
                });
                tbody.appendChild(row);
            });

            table.appendChild(thead);
            table.appendChild(tbody);

            return table;
        }

        function openAssociateCompaniesModal(newsId) {
            fetch(`/api/analizer/get-associated-companies/${newsId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    const markdownTable = data.markdownTable;
                    const modalBody = document.querySelector('#associateCompaniesModal .modal-body');

                    const htmlTable = markdownTableToHtml(markdownTable);

                    modalBody.innerHTML = '';
                    modalBody.appendChild(htmlTable);

                    var associateCompaniesModal = new bootstrap.Modal(document.getElementById('associateCompaniesModal'));
                    associateCompaniesModal.show();
                })
                .catch(error => console.error('Error fetching associated companies:', error));
        }

        function openAddStockEventModal(newsId) {
            document.getElementById('addEventNewsId').value = newsId;
            var addStockEventModal = new bootstrap.Modal(document.getElementById('addStockEventModal'));
            addStockEventModal.show();
        }

        async function saveStockEvent() {
            const newsId = document.getElementById('addEventNewsId').value;
            const symbol = document.getElementById('addEventSymbol').value;
            const date = document.getElementById('addEventDate').value;
            const priceChange = document.getElementById('addEventPriceChange').value;
            const sentiment = document.getElementById('addEventSentiment').value;
            const source = document.getElementById('addEventSource').value;

            const newStockEvent = {
                newsId,
                symbol,
                date,
                priceChange,
                sentiment,
                source
            };

            try {
                const response = await fetch('/api/stockevents', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newStockEvent)
                });

                if (response.ok) {
                    alert('Stock event added successfully');
                    var addStockEventModal = bootstrap.Modal.getInstance(document.getElementById('addStockEventModal'));
                    addStockEventModal.hide();
                    location.reload();
                } else {
                    const errorData = await response.json();
                    alert('Error adding stock event: ' + errorData.message);
                }
            } catch (error) {
                console.error('Error adding stock event:', error);
            }
        }
    </script>
}

<style>
    .stars {
        font-size: 1.5rem;
    }

    .text-wrap {
        white-space: normal;
    }

    .details-row {
        background-color: #f9f9f9;
    }

    .details-content {
        padding: 10px;
    }
</style>
