@model PaginatedList<MarketAnalyticHub.Models.News.NewsItem>

@{
    ViewData["Title"] = "News";
    ViewData["container"] = (ViewData["container"] ?? "container-fluid");
    ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-fluid");
}
@section PageScripts {
    <script>
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        function applyFilters() {
            showLoading();
            var category = document.getElementById('categorySelect').value;
            var startDate = document.getElementById('startDate').value;
            var endDate = document.getElementById('endDate').value;
            var pageSize = document.getElementById('pageSizeSelect').value;

            var url = `@Url.Action("News", "Sources")?category=${category}&startDate=${startDate}&endDate=${endDate}&pageSize=${pageSize}`;
            window.location.href = url;
        }

        function toggleDetails(newsId) {
            var detailsRow = document.getElementById(`details-${newsId}`);
            if (detailsRow.style.display === 'none') {
                detailsRow.style.display = 'table-row';
            } else {
                detailsRow.style.display = 'none';
            }
        }

        function analyzeSentiment(newsId) {
            showLoading();
            fetch(`/api/analizer/analyze-sentimentToPortfolio?newsId=${newsId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    showSentimentImpact(data);
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error analyzing sentiment:', error);
                    hideLoading();
                });
        }

        function showSentimentImpact(data) {
            const modalBody = document.querySelector('#sentimentImpactModal .modal-body');
            modalBody.innerHTML = `
                                        <p>Total Market Value Before Impact: ${data.totalMarketValueBeforeImpact}</p>
                                        <p>Total Market Value After Impact: ${data.totalMarketValueAfterImpact}</p>
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>Symbol</th>
                                                    <th>Adjusted Price</th>
                                                    <th>Sentiment Impact</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                ${data.portfolioItems.map(item => `
                                                    <tr>
                                                        <td>${item.symbol}</td>
                                                        <td>${item.adjustedPrice}</td>
                                                        <td>${item.sentimentImpact}</td>
                                                    </tr>
                                                `).join('')}
                                            </tbody>
                                        </table>
                                    `;

            var sentimentImpactModal = new bootstrap.Modal(document.getElementById('sentimentImpactModal'), { backdrop: false });
            sentimentImpactModal.show();
        }

        // Function to convert sentiment to stars
        function getStars(sentiment) {
            const maxStars = 5;
            const rating = Math.round((sentiment + 1) / 2 * maxStars); // Convert sentiment range [-1, 1] to [0, 5]
            let stars = '';

            // Determine star color based on sentiment
            const starColor = sentiment >= 0 ? 'gold' : 'red';

            // Loop through to create star rating
            for (let i = 0; i < maxStars; i++) {
                stars += i < rating ? `<span style="color:${starColor};">★</span>` : '☆'; // Add filled star '★' or empty star '☆'
            }

            return stars;
        }

        // Function to get sentiment label
        function getSentimentLabel(sentiment) {
            return sentiment >= 0 ? 'Positive' : 'Negative';
        }

        // Function to get sentiment color
        function getSentimentColor(sentiment) {
            return sentiment >= 0 ? 'success' : 'danger';
        }

        // Handle DOMContentLoaded event to process sentiments
        document.addEventListener('DOMContentLoaded', function () {

            const urlParams = new URLSearchParams(window.location.search);
            document.getElementById('categorySelect').value = urlParams.get('category') || '';
            document.getElementById('startDate').value = urlParams.get('startDate') || '';
            document.getElementById('endDate').value = urlParams.get('endDate') || '';
            document.getElementById('pageSizeSelect').value = urlParams.get('pageSize') || '50';

            document.querySelectorAll('.stars').forEach(function (element) {
                let sentimentText = element.innerText.trim().replace(',', '.'); // Replace comma with dot and trim any spaces
                const sentiment = parseFloat(sentimentText);
                if (!isNaN(sentiment)) {
                    element.innerHTML = getStars(sentiment); // Use innerHTML to insert HTML content
                } else {
                    console.error(`Invalid sentiment value: ${sentimentText}`);
                }
            });

            document.querySelectorAll('.sentiment-label').forEach(function (element) {
                const sentiment = parseFloat(element.getAttribute('data-sentiment'));
                if (!isNaN(sentiment)) {
                    element.classList.add(`text-${getSentimentColor(sentiment)}`);
                    element.innerText = getSentimentLabel(sentiment);
                } else {
                    console.error(`Invalid sentiment value: ${sentiment}`);
                }
            });
        });

        function setPageSize() {
            showLoading();
            var pageSize = document.getElementById('pageSizeSelect').value;
            var category = document.getElementById('categorySelect').value;
            var startDate = document.getElementById('startDate').value;
            var endDate = document.getElementById('endDate').value;
            var url = `@Url.Action("News", "Sources")?pageSize=${pageSize}&category=${category}&startDate=${startDate}&endDate=${endDate}`;
            window.location.href = url;
        }

        function sortByCategory(order) {
            showLoading();
            var category = document.getElementById('categorySelect').value;
            var startDate = document.getElementById('startDate').value;
            var endDate = document.getElementById('endDate').value;
            var pageSize = document.getElementById('pageSizeSelect').value;
            var url = `@Url.Action("News", "Sources")?sortOrder=${order}&category=${category}&startDate=${startDate}&endDate=${endDate}&pageSize=${pageSize}`;
            window.location.href = url;
        }

        // Function to edit a news item
        function editRow(id) {
            showLoading();
            fetch(`/news/get/${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('editNewsId').value = data.id;
                    document.getElementById('editNewsCategory').value = data.category;
                    document.getElementById('editNewsTitle').value = data.title;
                    document.getElementById('editNewsDescription').value = data.description;
                    document.getElementById('editNewsLink').value = data.link;

                    // Format the date properly
                    const date = new Date(data.date);
                    const formattedDate = date.toISOString().split('T')[0];
                    document.getElementById('editNewsDate').value = formattedDate;

                    var editNewsModal = new bootstrap.Modal(document.getElementById('editNewsModal'));
                    editNewsModal.show();
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error fetching news item:', error);
                    hideLoading();
                });
        }

        // Function to save the news item
        function saveNews() {
            showLoading();
            const id = document.getElementById('editNewsId').value;
            const category = document.getElementById('editNewsCategory').value;
            const title = document.getElementById('editNewsTitle').value;
            const description = document.getElementById('editNewsDescription').value;
            const link = document.getElementById('editNewsLink').value;
            const date = document.getElementById('editNewsDate').value;

            const updatedNews = {
                id,
                category,
                title,
                description,
                link,
                date
            };

            fetch(`/news/update/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedNews)
            })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    if (data.success) {
                        alert('News item updated successfully');
                        location.reload();
                    } else {
                        alert('Error updating news item: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error updating news item:', error);
                    hideLoading();
                });
        }

        function deleteNews(id) {
            if (confirm('Are you sure you want to delete this news item?')) {
                showLoading();
                fetch(`/news/delete/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        hideLoading();
                        if (data.success) {
                            alert('News item deleted successfully');
                            location.reload();
                        } else {
                            alert('Error deleting news item: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting news item:', error);
                        hideLoading();
                    });
            }
        }

        function markdownTableToHtml(markdown) {
            const lines = markdown.trim().split('\n');
            const headers = lines[0].trim().split('|').map(header => header.trim()).filter(header => header);
            const dataLines = lines.slice(2);

            const table = document.createElement('table');
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');

            const headerRow = document.createElement('tr');
            headers.forEach(header => {
                const th = document.createElement('th');
                th.textContent = header;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            dataLines.forEach(line => {
                const row = document.createElement('tr');
                const cells = line.split('|').map(cell => cell.trim()).filter(cell => cell);
                cells.forEach(cell => {
                    const td = document.createElement('td');
                    td.textContent = cell;
                    row.appendChild(td);
                });
                tbody.appendChild(row);
            });

            table.appendChild(thead);
            table.appendChild(tbody);

            return table;
        }

        function openAssociateCompaniesModal(newsId) {
            showLoading();
            fetch(`/api/analizer/get-associated-companies/${newsId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
                .then(response => response.json())
                .then(data => {
                    const markdownTable = data.markdownTable;
                    const modalBody = document.querySelector('#associateCompaniesModal .modal-body');

                    const htmlTable = markdownTableToHtml(markdownTable);

                    modalBody.innerHTML = '';
                    modalBody.appendChild(htmlTable);

                    var associateCompaniesModal = new bootstrap.Modal(document.getElementById('associateCompaniesModal'));
                    associateCompaniesModal.show();
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error fetching associated companies:', error);
                    hideLoading();
                });
        }

        function openAddStockEventModal(newsId) {
            document.getElementById('addEventNewsId').value = newsId;
            var addStockEventModal = new bootstrap.Modal(document.getElementById('addStockEventModal'), { backdrop: false });
            addStockEventModal.show();
        }

        async function saveStockEvent() {
            showLoading();
            const newsId = document.getElementById('addEventNewsId').value;
            const symbol = document.getElementById('addEventSymbol').value;
            const date = document.getElementById('addEventDate').value;
            const priceChange = document.getElementById('addEventPriceChange').value;
            const sentiment = document.getElementById('addEventSentiment').value;
            const source = document.getElementById('addEventSource').value;

            const newStockEvent = {
                newsId,
                symbol,
                date,
                priceChange,
                sentiment,
                source
            };

            try {
                const response = await fetch('/api/stockevents', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newStockEvent)
                });

                if (response.ok) {
                    alert('Stock event added successfully');
                    var addStockEventModal = bootstrap.Modal.getInstance(document.getElementById('addStockEventModal'), { backdrop: false });
                    addStockEventModal.hide();
                    hideLoading();
                    location.reload();
                } else {
                    const errorData = await response.json();
                    hideLoading();
                    alert('Error adding stock event: ' + errorData.message);
                }
            } catch (error) {
                console.error('Error adding stock event:', error);
                hideLoading();
            }
        }
    </script>
}


@section PageStyles {
    <style>
        .stars {
            font-size: 1.5rem;
        }

        .text-wrap {
            white-space: normal;
        }

        .details-row {
            background-color: #f9f9f9;
        }

        .details-content {
            padding: 10px;
        }
    </style>
}
<h4 class="py-3 mb-4">
    <span class="text-muted fw-light">Sources /</span> News
</h4>
<div class="row card card-body mb-4">
    <div class="mb-4">
        <label for="filters" class="form-label">Filters</label>
        <div class="row g-3">
            <div class="col-md-3">
                <select id="categorySelect" class="form-select">
                    <option value="">All Categories</option>
                    <option value="Tech">Tech</option>
                    <option value="Economy">Economy</option>
                    <option value="Energy and Environment">Energy and Environment</option>
                </select>
            </div>
            <div class="col-md-6">
                <div class="input-group">
                    <input type="date" id="startDate" class="form-control">
                    <span class="input-group-text">to</span>
                    <input type="date" id="endDate" class="form-control">
                </div>
            </div>
            <div class="col-md-3">
                <button class="btn btn-primary w-100" onclick="applyFilters()">Apply Filters</button>
            </div>
        </div>
    </div>
</div>
<!-- Associate Companies Modal -->
<div class="modal" id="associateCompaniesModal" tabindex="-1" aria-labelledby="associateCompaniesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="associateCompaniesModalLabel">Associate Companies</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Table will be dynamically inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Sentiment Impact Modal -->
<div class="modal" id="sentimentImpactModal" tabindex="-1" aria-labelledby="sentimentImpactModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sentimentImpactModalLabel">Sentiment Impact on Portfolio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Sentiment impact details will be dynamically inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit News Modal -->
<div class="modal" id="editNewsModal" tabindex="-1" aria-labelledby="editNewsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editNewsModalLabel">Edit News</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editNewsId">
                <div class="mb-3">
                    <label for="editNewsCategory" class="form-label">Category</label>
                    <select id="editNewsCategory" class="form-select">
                        <option value="Economy">Economy</option>
                        <option value="Sports">Sports</option>
                        <option value="Energy and Environment">Energy and Environment</option>
                        <!-- Add other categories as needed -->
                    </select>
                </div>

                <div class="mb-3">
                    <label for="editNewsTitle" class="form-label">Title</label>
                    <input type="text" class="form-control" id="editNewsTitle" required>
                </div>
                <div class="mb-3">
                    <label for="editNewsDescription" class="form-label">Description</label>
                    <textarea class="form-control" id="editNewsDescription" required></textarea>
                </div>
                <div class="mb-3">
                    <label for="editNewsLink" class="form-label">Link</label>
                    <input type="url" class="form-control" id="editNewsLink" required>
                </div>
                <div class="mb-3">
                    <label for="editNewsDate" class="form-label">Date</label>
                    <input type="date" class="form-control" id="editNewsDate" required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveNews()">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Stock Event Modal -->
<div class="modal" id="addStockEventModal" tabindex="-1" aria-labelledby="addStockEventModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addStockEventModalLabel">Add Stock Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="addEventNewsId">
                <div class="mb-3">
                    <label for="addEventSymbol" class="form-label">Symbol</label>
                    <input type="text" class="form-control" id="addEventSymbol" required>
                </div>
                <div class="mb-3">
                    <label for="addEventDate" class="form-label">Date</label>
                    <input type="date" class="form-control" id="addEventDate" required>
                </div>
                <div class="mb-3">
                    <label for="addEventPriceChange" class="form-label">Price Change (%)</label>
                    <input type="number" class="form-control" id="addEventPriceChange" required>
                </div>
                <div class="mb-3">
                    <label for="addEventSentiment" class="form-label">Sentiment</label>
                    <select id="addEventSentiment" class="form-select" required>
                        <option value="Positive">Positive</option>
                        <option value="Negative">Negative</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="addEventSource" class="form-label">Source</label>
                    <input type="url" class="form-control" id="addEventSource" required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveStockEvent()">Save Event</button>
            </div>
        </div>
    </div>
</div>


<div class="col-12">
    <h6 class="text-muted">Research Sources</h6>
    <div class="nav-align-top mb-4">
        <ul class="nav nav-tabs nav-fill" role="tablist">
            <li class="nav-item">
                <button type="button" class="nav-link active" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-home" aria-controls="navs-justified-home" aria-selected="true">
                    <i class="tf-icons bx bx-news me-1"></i><span class="d-none d-sm-block"> News</span>
                    <span class="badge rounded-pill badge-center h-px-20 w-px-20 bg-label-danger ms-1">@Model.Count</span>
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-profile" aria-controls="navs-justified-profile" aria-selected="false">
                    <i class="tf-icons bx bx-home me-1"></i>
                    <span class="d-none d-sm-block"> Analytics</span>
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-messages" aria-controls="navs-justified-messages" aria-selected="false">
                    <i class="tf-icons bx bx-message-square me-1"></i>
                    <span class="d-none d-sm-block"> Ai-Pilot</span>
                </button>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane fade show active" id="navs-justified-home" role="tabpanel">

                @Html.Partial("_Table", Model)
            </div>
            <div class="tab-pane fade" id="navs-justified-profile" role="tabpanel">
                @Html.Partial("_Analytics", Model)
            </div>
            <div class="tab-pane fade" id="navs-justified-messages" role="tabpanel">
                <p>In Maintenance</p>
            </div>
        </div>
    </div>
</div>

