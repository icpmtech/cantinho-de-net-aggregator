<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ai-Pilot Search Page</title>
    <link href='https://cdn.jsdelivr.net/npm/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

    <style>
       

        .container {
          
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .search-box {
            position: relative;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

            .search-box input[type="text"] {
                width: 100%;
                padding: 10px 10px 10px 40px;
                border: 1px solid #ccc;
                border-radius: 4px;
                font-size: 16px;
            }

            .search-box i {
                position: absolute;
                left: 10px;
                font-size: 20px;
                color: #007bff;
            }

        .suggestions {
            position: absolute;
            top: 45px;
            width: 100%;
            border: 1px solid #ccc;
            border-top: none;
            background-color: #fff;
            z-index: 1000;
            display: none; /* Initially hidden */
        }

            .suggestions .suggestion-item {
                display: flex;
                align-items: center;
                padding: 10px;
                border-bottom: 1px solid #ccc;
                cursor: pointer;
            }

                .suggestions .suggestion-item img {
                    width: 40px;
                    height: 40px;
                    margin-right: 10px;
                    border-radius: 50%;
                }

                .suggestions .suggestion-item p {
                    margin: 0;
                    flex: 1;
                }

                .suggestions .suggestion-item i {
                    font-size: 20px;
                    color: #007bff;
                }

                .suggestions .suggestion-item:hover {
                    background-color: #f0f0f0;
                }

        .result-summary, .fundamental-analysis {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f9f9f9;
            display: none; /* Initially hidden */
        }
</style>
      
</head>
<body>

        <div class="text-center chat-assistant-logo" >
        <img class="rounded-circle" src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo" >
        <h3 > Ai-Pilot</h3 >
        <p > Your everyday AI analyzer companion</p >
        </div >

    <div class="container">

        <h2>Search for Analysis</h2>
        <div class="search-box">
            <i class='bx bx-search'></i>
            <input type="text" id="search-input" placeholder="Search Symbol..." oninput="search()">
            <div class="suggestions" id="suggestions"></div>
        </div>
        <div class="result-summary">
            <div class="card">
                <div class="card-header">
                    <img id="result-img" src="" alt="Company Logo">
                    <h3 id="result-title">Company Name</h3>
                </div>
                <div class="card-content" id="summary-content">
                    This is a summary of the search result...
                </div>
                <div id="sparkline" class="sparkline"></div>
            </div>
        </div>
        <div class="fundamental-analysis">
            <div class="card">
                <div class="card-header">
                    <img id="analysis-img" src="" alt="Company Logo">
                    <h3 id="analysis-title">Fundamental Analysis</h3>
                </div>
                <div class="card-content" id="analysis-content">
                    This is the fundamental analysis content...
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script>
        const OPENAI_API_KEY = '';
        const RAPIDAPI_HOST = 'apidojo-yahoo-finance-v1.p.rapidapi.com';
        const RAPIDAPI_KEY = 'your-rapidapi-key'; // Replace this with your RapidAPI key

        const mockResults = [
            { symbol: 'AAPL', name: 'Apple Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'MSFT', name: 'Microsoft Corporation', img: 'https://via.placeholder.com/40' },
            { symbol: 'GOOGL', name: 'Alphabet Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'AMZN', name: 'Amazon.com, Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'TSLA', name: 'Tesla, Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'FB', name: 'Meta Platforms, Inc.', img: 'https://via.placeholder.com/40' }
        ];

        function search() {
            const query = document.getElementById('search-input').value.toLowerCase();
            const suggestionsBox = document.getElementById('suggestions');
            suggestionsBox.innerHTML = ''; // Clear previous suggestions

            if (query) {
                const filteredResults = mockResults.filter(item => item.symbol.toLowerCase().includes(query) || item.name.toLowerCase().includes(query));

                if (filteredResults.length > 0) {
                    suggestionsBox.style.display = 'block';
                    filteredResults.forEach(result => {
                        const suggestionItem = document.createElement('div');
                        suggestionItem.classList.add('suggestion-item');

                        suggestionItem.innerHTML = `
                                    <img src="${result.img}" alt="${result.symbol}">
                                    <p>${result.symbol} - ${result.name}</p>
                                    <i class='bx bx-right-arrow-alt'></i>
                                `;

                        suggestionItem.onclick = () => selectSuggestion(result);
                        suggestionsBox.appendChild(suggestionItem);
                    });
                } else {
                    suggestionsBox.style.display = 'none';
                }
            } else {
                suggestionsBox.style.display = 'none';
            }
        }

        async function selectSuggestion(result) {
            document.getElementById('search-input').value = result.symbol;
            document.getElementById('suggestions').style.display = 'none';

            document.querySelector('.result-summary').style.display = 'block';
            document.querySelector('.fundamental-analysis').style.display = 'block';

            document.getElementById('result-img').src = result.img;
            document.getElementById('result-title').innerText = result.name;

            document.getElementById('analysis-img').src = result.img;
            document.getElementById('analysis-title').innerText = 'Fundamental Analysis';

            try {
                const summary = await fetchCompanySummary(result.name);
                const fundamentals = await fetchFundamentals(result.symbol);
                const sparklineData = await fetchSparklineData(result.symbol);

                document.getElementById('summary-content').innerText = summary || 'Summary not available.';
                document.getElementById('analysis-content').innerText = formatFundamentals(fundamentals);

                renderSparkline(sparklineData);
            } catch (error) {
                document.getElementById('summary-content').innerText = 'Error fetching summary.';
                document.getElementById('analysis-content').innerText = 'Error fetching analysis.';
            }
        }

        async function fetchCompanySummary(companyName) {
            const url = 'https://api.openai.com/v1/chat/completions';
            const apiKey = OPENAI_API_KEY;

            const data = {
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: `Give me a summary of the company ${companyName}.` }],
                temperature: 0.7
            };

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    const result = await response.json();
                    return result.choices[0].message.content.trim();
                } else {
                    console.error('Error fetching summary:', response.statusText);
                    return 'Summary not available.';
                }
            } catch (error) {
                console.error('Error fetching summary:', error);
                return 'Summary not available.';
            }
        }

        async function fetchFundamentals(symbol) {
            const url = `https://${RAPIDAPI_HOST}/stock/v2/get-summary?symbol=${symbol}&region=US`;
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'x-rapidapi-host': RAPIDAPI_HOST,
                    'x-rapidapi-key': RAPIDAPI_KEY
                }
            });

            if (response.ok) {
                const data = await response.json();
                return data;
            } else {
                console.error('Error fetching fundamentals:', response.statusText);
                return null;
            }
        }

        function formatFundamentals(fundamentals) {
            if (!fundamentals) return 'Fundamental data not available.';

            const marketCap = fundamentals.price.marketCap.fmt;
            const peRatio = fundamentals.summaryDetail.trailingPE ? fundamentals.summaryDetail.trailingPE.fmt : 'N/A';
            const dividendYield = fundamentals.summaryDetail.dividendYield ? fundamentals.summaryDetail.dividendYield.fmt : 'N/A';

            return `Market Cap: ${marketCap}\nP/E Ratio: ${peRatio}\nDividend Yield: ${dividendYield}`;
        }

        async function fetchSparklineData(symbol) {
            const url = `https://${RAPIDAPI_HOST}/stock/v2/get-chart?interval=1d&symbol=${symbol}&range=1mo&region=US`;
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'x-rapidapi-host': RAPIDAPI_HOST,
                    'x-rapidapi-key': RAPIDAPI_KEY
                }
            });

            if (response.ok) {
                const data = await response.json();
                const prices = data.chart.result[0].indicators.quote[0].close;
                return prices;
            } else {
                console.error('Error fetching sparkline data:', response.statusText);
                return [];
            }
        }

        function renderSparkline(data) {
            const options = {
                series: [{
                    name: 'Price',
                    data: data
                }],
                chart: {
                    type: 'line',
                    height: 50,
                    sparkline: {
                        enabled: true
                    }
                },
                stroke: {
                    curve: 'smooth',
                    width: 2
                },
                colors: ['#007bff'],
                tooltip: {
                    enabled: false
                }
            };

            const chart = new ApexCharts(document.querySelector("#sparkline"), options);
            chart.render();
        }
    </script>

</body>
</html>
