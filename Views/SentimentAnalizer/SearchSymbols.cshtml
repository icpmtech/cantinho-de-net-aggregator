<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ai-Pilot Search Page</title>
    <link href='https://cdn.jsdelivr.net/npm/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

    <style>
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .search-box {
            position: relative;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

            .search-box input[type="text"] {
                width: 100%;
                padding: 10px 10px 10px 40px;
                border: 1px solid #ccc;
                border-radius: 4px;
                font-size: 16px;
            }

            .search-box i {
                position: absolute;
                left: 10px;
                font-size: 20px;
                color: #007bff;
            }

        .suggestions {
            position: absolute;
            top: 45px;
            width: 100%;
            border: 1px solid #ccc;
            border-top: none;
            background-color: #fff;
            z-index: 1000;
            display: none;
        }

            .suggestions .suggestion-item {
                display: flex;
                align-items: center;
                padding: 10px;
                border-bottom: 1px solid #ccc;
                cursor: pointer;
            }

                .suggestions .suggestion-item img {
                    width: 40px;
                    height: 40px;
                    margin-right: 10px;
                    border-radius: 50%;
                }

                .suggestions .suggestion-item p {
                    margin: 0;
                    flex: 1;
                }

                .suggestions .suggestion-item i {
                    font-size: 20px;
                    color: #007bff;
                }

                .suggestions .suggestion-item:hover {
                    background-color: #f0f0f0;
                }

        .date-range {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .date-range input[type="date"] {
                padding: 5px;
                font-size: 16px;
            }

            .date-range button {
                padding: 6px 12px;
                font-size: 16px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

                .date-range button:hover {
                    background-color: #0056b3;
                }

        .result-summary,
        .fundamental-analysis {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f9f9f9;
            display: none;
        }

        .finance-card {
            background-color: #fff;
            padding: 20px;
        }

            .finance-card h2 {
                font-size: 1.5em;
                margin-bottom: 20px;
                color: #333;
                text-align: center;
            }

            .finance-card ul {
                list-style: none;
                padding: 0;
            }

                .finance-card ul li {
                    display: flex;
                    justify-content: space-between;
                    padding: 5px 0;
                    border-bottom: 1px solid #ddd;
                }

                    .finance-card ul li:last-child {
                        border-bottom: none;
                    }

                    .finance-card ul li span {
                        font-weight: bold;
                    }
    </style>

</head>

<body>

    <div class="text-center chat-assistant-logo">
        <img class="rounded-circle" src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo">
        <h3> Ai-Pilot</h3>
        <p> Your everyday AI analyzer companion</p>
    </div>

    <div class="container">
        <div class="search-box">
            <i class='bx bx-search'></i>
            <input type="text" id="search-input" placeholder="Search Symbol..." oninput="search()">
            <div class="suggestions" id="suggestions"></div>
        </div>

        <!-- Date Range Selection -->
        <div class="date-range">
            <label for="start-date">Start Date:</label>
            <input type="date" id="start-date">
            <label for="end-date">End Date:</label>
            <input type="date" id="end-date">
            <button onclick="updateChart()">Update Chart</button>
        </div>

        <div class="result-summary">
            <div class="card">
                <div class="card-header">
                    <img id="result-img" src="" alt="Company Logo">
                    <h3 id="result-title">Company Name</h3>
                </div>
                <div class="card-body" id="summary-content">
                    This is a summary of the search result...
                </div>
                <div id="sparkline" class="sparkline"></div>
            </div>
        </div>
        <div class="fundamental-analysis">
            <div class="card">
                <div class="card-header">
                    <img id="analysis-img" src="" alt="Company Logo">
                    <h3 id="analysis-title">Fundamental Analysis</h3>
                </div>
                <div class="card-body" id="analysis-content">
                    This is the fundamental analysis content...
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script>
        const mockResults = [
            { symbol: 'AAPL', shortname: 'Apple Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'MSFT', shortname: 'Microsoft Corporation', img: 'https://via.placeholder.com/40' },
            { symbol: 'GOOGL', shortname: 'Alphabet Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'AMZN', shortname: 'Amazon.com, Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'TSLA', shortname: 'Tesla, Inc.', img: 'https://via.placeholder.com/40' },
            { symbol: 'FB', shortname: 'Meta Platforms, Inc.', img: 'https://via.placeholder.com/40' }
        ];

        async function search() {
            const query = document.getElementById('search-input').value.toLowerCase();
            const suggestionsBox = document.getElementById('suggestions');
            suggestionsBox.innerHTML = ''; // Clear previous suggestions

            if (query) {
                try {
                    const url = `/api/yahoofinance/search/${query}`;
                    const response = await fetch(url);

                    if (response.ok) {
                        const data = await response.json();
                        if (data.length > 0) {
                            suggestionsBox.style.display = 'block';
                            data.forEach(result => {
                                const suggestionItem = document.createElement('div');
                                suggestionItem.classList.add('suggestion-item');

                                // Set placeholder image or use real image if available
                                const imageUrl = result.img ? result.img : 'https://via.placeholder.com/40';

                                suggestionItem.innerHTML = `
                          <img src="${imageUrl}" alt="${result.symbol}">
                          <p>${result.symbol} - ${result.shortname}</p>
                          <i class='bx bx-right-arrow-alt'></i>
                        `;

                                suggestionItem.onclick = () => selectSuggestion(result);
                                suggestionsBox.appendChild(suggestionItem);
                            });
                        } else {
                            suggestionsBox.style.display = 'none';
                        }
                    } else {
                        console.error('Error fetching symbols:', response.statusText);
                        suggestionsBox.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Error fetching symbols:', error);
                    suggestionsBox.style.display = 'none';
                }
            } else {
                suggestionsBox.style.display = 'none';
            }
        }

        async function selectSuggestion(result) {
            document.getElementById('search-input').value = result.symbol;
            document.getElementById('suggestions').style.display = 'none';

            document.querySelector('.result-summary').style.display = 'block';
            document.querySelector('.fundamental-analysis').style.display = 'block';

            document.getElementById('result-img').src = result.img ? result.img : 'https://via.placeholder.com/40';
            document.getElementById('result-title').innerText = result.shortname;

            document.getElementById('analysis-img').src = result.img ? result.img : 'https://via.placeholder.com/40';
            document.getElementById('analysis-title').innerText = 'Fundamental Analysis';

            try {
                const summary = await fetchCompanySummary(result.shortname);
                const fundamentals = await fetchFundamentals(result.symbol);

                // Default to fetch sparkline data without date range first
                const sparklineData = await fetchSparklineData(result.symbol);

                document.getElementById('summary-content').innerText = summary || 'Summary not available.';
                document.getElementById('analysis-content').innerHTML = formatFundamentals(fundamentals);

                renderSparkline(sparklineData);
            } catch (error) {
                document.getElementById('summary-content').innerText = 'Error fetching summary.';
                document.getElementById('analysis-content').innerText = 'Error fetching analysis.';
            }
        }

        async function updateChart() {
            const symbol = document.getElementById('search-input').value;
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;

            if (symbol && startDate && endDate) {
                try {
                    const sparklineData = await fetchSparklineData(symbol, startDate, endDate);
                    renderSparkline(sparklineData);
                } catch (error) {
                    console.error('Error updating chart:', error);
                }
            } else {
                alert("Please select a valid symbol and date range.");
            }
        }

        async function fetchCompanySummary(companyName) {
            const url = `/api/llm/search-company-summary/${companyName}`;

            try {
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    return result.description;
                } else {
                    console.error('Error fetching summary:', response.statusText);
                    return 'Summary not available.';
                }
            } catch (error) {
                console.error('Error fetching summary:', error);
                return 'Summary not available.';
            }
        }

        async function fetchSparklineData(symbol, startDate = null, endDate = null) {
            try {
                let url = `/api/yahoofinance/chart/${symbol}`;

                if (startDate && endDate) {
                    url += `?startDate=${startDate}&endDate=${endDate}`;
                }

                const response = await fetch(url);

                if (response.ok) {
                    const data = await response.json();
                    return data; // Adjust this based on what data is returned
                } else {
                    console.error('Error fetching sparkline data:', response.statusText);
                    return [];
                }
            } catch (error) {
                console.error('Error fetching sparkline data:', error);
                return [];
            }
        }

        async function fetchFundamentals(symbol) {
            try {
                const url = `/api/yahoofinance/price/${symbol}`;
                const response = await fetch(url);

                if (response.ok) {
                    const data = await response.json();
                    return data;
                } else {
                    console.error('Error fetching fundamentals:', response.statusText);
                    return null;
                }
            } catch (error) {
                console.error('Error fetching fundamentals:', error);
                return null;
            }
        }

        function formatFundamentals(_fundamentals) {
            if (!_fundamentals) return 'Fundamental data not available.';
            const fundamentals = _fundamentals[0];
            const marketCap = fundamentals.marketCap ? `$${(fundamentals.marketCap / 1e12).toFixed(2)}T` : 'N/A';
            const peRatio = fundamentals.trailingPE ? fundamentals.trailingPE.toFixed(2) : 'N/A';
            const forwardPE = fundamentals.forwardPE ? fundamentals.forwardPE.toFixed(2) : 'N/A';
            const priceToBook = fundamentals.priceToBook ? fundamentals.priceToBook.toFixed(2) : 'N/A';
            const dividendYield = fundamentals.dividendYield ? `${(fundamentals.dividendYield * 100).toFixed(2)}%` : 'N/A';
            const epsTrailingTwelveMonths = fundamentals.epsTrailingTwelveMonths ? fundamentals.epsTrailingTwelveMonths.toFixed(2) : 'N/A';
            const epsForward = fundamentals.epsForward ? fundamentals.epsForward.toFixed(2) : 'N/A';
            const epsCurrentYear = fundamentals.epsCurrentYear ? fundamentals.epsCurrentYear.toFixed(2) : 'N/A';
            const fiftyDayAverage = fundamentals.fiftyDayAverage ? `$${fundamentals.fiftyDayAverage.toFixed(2)}` : 'N/A';
            const twoHundredDayAverage = fundamentals.twoHundredDayAverage ? `$${fundamentals.twoHundredDayAverage.toFixed(2)}` : 'N/A';
            const fiftyTwoWeekLow = fundamentals.fiftyTwoWeekLow ? `$${fundamentals.fiftyTwoWeekLow.toFixed(2)}` : 'N/A';
            const fiftyTwoWeekHigh = fundamentals.fiftyTwoWeekHigh ? `$${fundamentals.fiftyTwoWeekHigh.toFixed(2)}` : 'N/A';
            const trailingAnnualDividendRate = fundamentals.trailingAnnualDividendRate ? `$${fundamentals.trailingAnnualDividendRate.toFixed(2)}` : 'N/A';
            const trailingAnnualDividendYield = fundamentals.trailingAnnualDividendYield ? `${(fundamentals.trailingAnnualDividendYield * 100).toFixed(2)}%` : 'N/A';
            const bookValue = fundamentals.bookValue ? `$${fundamentals.bookValue.toFixed(2)}` : 'N/A';

            return `
                <div class="finance-card">
                    <h2>Financial Overview</h2>
                    <ul>
                        <li><span>Market Cap:</span> ${marketCap}</li>
                        <li><span>P/E Ratio:</span> ${peRatio}</li>
                        <li><span>Forward P/E Ratio:</span> ${forwardPE}</li>
                        <li><span>Price to Book:</span> ${priceToBook}</li>
                        <li><span>Dividend Yield:</span> ${dividendYield}</li>
                        <li><span>EPS (TTM):</span> ${epsTrailingTwelveMonths}</li>
                        <li><span>EPS (Forward):</span> ${epsForward}</li>
                        <li><span>EPS (Current Year):</span> ${epsCurrentYear}</li>
                        <li><span>50-Day Average:</span> ${fiftyDayAverage}</li>
                        <li><span>200-Day Average:</span> ${twoHundredDayAverage}</li>
                        <li><span>52-Week Low:</span> ${fiftyTwoWeekLow}</li>
                        <li><span>52-Week High:</span> ${fiftyTwoWeekHigh}</li>
                        <li><span>Trailing Annual Dividend Rate:</span> ${trailingAnnualDividendRate}</li>
                        <li><span>Trailing Annual Dividend Yield:</span> ${trailingAnnualDividendYield}</li>
                        <li><span>Book Value:</span> ${bookValue}</li>
                    </ul>
                </div>`;
        }

        function renderSparkline(data) {
            const holcData = data.map(item => ({
                x: new Date(item.timestamp),
                y: [item.open, item.high, item.low, item.close]
            }));

            const options = {
                series: [{
                    name: 'HOLC',
                    data: holcData
                }],
                chart: {
                    type: 'candlestick',
                    height: 300,
                    sparkline: {
                        enabled: false
                    }
                },
                xaxis: {
                    type: 'datetime'
                },
                yaxis: {
                    tooltip: {
                        enabled: true
                    }
                },
                colors: ['#007bff'],
                tooltip: {
                    enabled: true,
                    theme: 'dark',
                    x: {
                        format: 'dd MMM yyyy HH:mm'
                    }
                },
                plotOptions: {
                    candlestick: {
                        colors: {
                            upward: '#00B746',
                            downward: '#EF403C'
                        }
                    }
                }
            };

            const chart = new ApexCharts(document.querySelector("#sparkline"), options);
            chart.render();
        }
    </script>

</body>

</html>
