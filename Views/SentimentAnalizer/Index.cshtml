@model List<MarketAnalyticHub.Models.Portfolio.Portfolio>
@{
    ViewData["Title"] = "Sentiment Analysis";
    ViewData["container"] = (ViewData["container"] ?? "container-fluid");
    ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-fluid");
}

<!-- Include ApexCharts and Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<style>
    .positive {
        color: #28a745;
    }

    .negative {
        color: #dc3545;
    }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.5em;
        color: #000;
        display: none; /* Hidden by default */
    }

    .chart-container,
    .table-container,
    .card {
        background: #ffffff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    .btn-toggle {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .collapse {
        display: none;
    }

        .collapse.show {
            display: block;
        }

    .card-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .card-text {
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
    }

    .btn-success, .btn-danger {
        display: block;
        width: 100%;
        text-align: left;
        padding: 10px;
        margin-bottom: 10px;
    }

    .table th,
    .table td {
        vertical-align: middle;
    }

    .table-responsive {
        margin-top: 20px;
    }

    #chart {
        margin-top: 20px;
    }
</style>

<h4 class="py-3 mb-4"><span class="text-muted fw-light">Sentiment Analysis /</span> Sentiment Analyzer</h4>
<div class="col-12">
    <!-- Modal for displaying full details -->
    <div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Event Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p id="detailsModalContent"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <h6 class="text-muted">Analizer</h6>
    <div class="nav-align-top mb-4">
        <ul class="nav nav-tabs nav-fill" role="tablist">
            <li class="nav-item">
                <button type="button" class="nav-link active" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-home" aria-controls="navs-justified-home" aria-selected="true">
                  <i class="tf-icons bx bx-chart me-1"></i>
                  <span class="d-none d-sm-block"> Chart</span>
                    <span class="badge rounded-pill badge-center h-px-20 w-px-20 bg-label-danger ms-1">@Model.Count</span>
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-profile" aria-controls="navs-justified-profile" aria-selected="false">
                  <i class="tf-icons bx bx-table me-1"></i>
                  <span class="d-none d-sm-block"> Table</span>
                    <span class="badge rounded-pill badge-center h-px-20 w-px-20 bg-label-danger ms-1">@Model.Count</span>
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-messages" aria-controls="navs-justified-messages" aria-selected="false">
                  <i class="tf-icons bx bx-news me-1"></i>
                  <span class="d-none d-sm-block"> List</span>
                    <span class="badge rounded-pill badge-center h-px-20 w-px-20 bg-label-danger ms-1">@Model.Count</span>
                  </button>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane fade show active" id="navs-justified-home" role="tabpanel">
                @Html.Partial("_Chart", Model)
            </div>
            <div class="tab-pane fade" id="navs-justified-profile" role="tabpanel">
                @Html.Partial("_Table", Model)
            </div>
            <div class="tab-pane fade" id="navs-justified-messages" role="tabpanel">
                @Html.Partial("_List", Model)
            </div>
        </div>
    </div>
</div>

<script>
    
    async function fetchStockData() {
        const response = await fetch('/api/SentimentAnalyzerApi/GetStockData');
        const stockData = await response.json();
        return stockData;
    }

    function createBubbleChart(stockData) {
        const { startDate, endDate } = getDateRange();

        // Show the loading spinner
        const loadingElement = document.getElementById('loading');
        loadingElement.style.display = 'block';

        const fetchPromises = stockData.map(stock => {
            const apiUrl = `/api/Portfolio/historical-data?symbol=${stock.symbol}&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`;

            return fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    const eventData = stock.stockEvents.map(event => ({
                        x: new Date(event.date),
                        y: event.price,
                        z: event.priceChange, // Bubble size, you can adjust this based on the importance of the event
                        label: stock.symbol
                    }));

                    return {
                        symbol: stock.symbol,
                        eventData: eventData
                    };
                })
                .catch(error => {
                    console.error(`Error fetching data for ${stock.symbol}:`, error);
                    return null;
                });
        });

        Promise.all(fetchPromises).then(results => {
            const series = results.filter(item => item !== null).map(item => ({
                name: item.symbol,
                type: 'bubble',
                data: item.eventData
            }));

            const options = {
                series: series,
                chart: {
                    type: 'bubble',
                    height: 500, // Increased height for better readability
                    toolbar: {
                        show: true
                    }
                },
                title: {
                    text: 'Stock Events Based in Price Change',
                    align: 'left'
                },
                xaxis: {
                    type: 'datetime',
                    labels: {
                        format: 'dd MMM yyyy'
                    }
                },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value.toFixed(2);
                        }
                    }
                },
                tooltip: {
                    enabled: true,
                    shared: true,
                    intersect: false,
                    x: {
                        format: 'dd MMM yyyy'
                    },
                    y: {
                        formatter: function (value) {
                            return value.toFixed(2);
                        }
                    },
                    custom: function ({ series, seriesIndex, dataPointIndex, w }) {
                        const data = w.globals.initialSeries[seriesIndex].data[dataPointIndex];
                        return `
                            <div class="apexcharts-tooltip-bubble">
                                <span><strong>${w.globals.seriesNames[seriesIndex]}</strong></span><br>
                                <span>Date: ${new Date(data.x).toLocaleDateString()}</span><br>
                                <span>Price: ${data.y}</span><br>
                            </div>
                        `;
                    }
                },
                dataLabels: {
                    enabled: true,
                    formatter: function (value, opts) {
                        const dataPoint = opts.w.config.series[opts.seriesIndex].data[opts.dataPointIndex];
                        return dataPoint?.label ? dataPoint.label : '';
                    },
                    style: {
                        colors: ['#000'],
                        fontSize: '14px',
                        fontWeight: 'bold'
                    },
                    background: {
                        enabled: false
                    }
                },
                markers: {
                    size: 20, // Adjust the size of the bubbles
                    shape: "circle",
                    strokeColors: '#fff',
                    strokeWidth: 2,
                    hover: {
                        size: 25
                    }
                },
                legend: {
                    position: 'top',
                    horizontalAlign: 'center',
                    floating: true,
                    offsetY: -10,
                    offsetX: -5
                }
            };

            const chartElement = document.querySelector('#chart');
            if (chartElement) {
                const chart = new ApexCharts(chartElement, options);
                chart.render().then(() => {
                    // Hide the loading spinner
                    loadingElement.style.display = 'none';
                });
            } else {
                console.error('Element with ID chart not found');
                // Hide the loading spinner if there's an error
                loadingElement.style.display = 'none';
            }
        });
    }

    // Helper function to get date range for the beginning of the year and the current date
    function getDateRange() {
        const currentDate = new Date();
        const endDate = currentDate; // Today

        // Calculate the start date (three months prior to today)
        const startDate = new Date(currentDate);
        startDate.setMonth(startDate.getMonth() - 3);
        return { startDate, endDate };
    }

    document.addEventListener('DOMContentLoaded', async () => {
        const stockData = await fetchStockData();
        createBubbleChart(stockData);
    });
</script>
