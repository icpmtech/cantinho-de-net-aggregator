@model List<MarketAnalyticHub.Models.Portfolio.Portfolio>
@{
    ViewData["Title"] = "Sentiment Analysis";
    ViewData["container"] = (ViewData["container"] ?? "container-fluid");
    ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-fluid");
}

<!-- Include ApexCharts and Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<style>
    .positive {
        color: #28a745;
    }

    .negative {
        color: #dc3545;
    }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.5em;
        color: #000;
        display: none; /* Hidden by default */
    }

    .chart-container,
    .table-container,
    .card {
        background: #ffffff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    .btn-toggle {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .collapse {
        display: none;
    }

        .collapse.show {
            display: block;
        }

    .card-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .card-text {
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
    }

    .btn-success, .btn-danger {
        display: block;
        width: 100%;
        text-align: left;
        padding: 10px;
        margin-bottom: 10px;
    }

    .table th,
    .table td {
        vertical-align: middle;
    }

    .table-responsive {
        margin-top: 20px;
    }

    #chart {
        margin-top: 20px;
    }
</style>

<h4 class="py-3 mb-4"><span class="text-muted fw-light">Sentiment Analysis /</span> Sentiment Analyzer</h4>

<div class="row mb-5">
    <div class="col-md-12">
        @foreach (var portfolio in Model)
        {
            var groupedStocks = portfolio.Items.GroupBy(s => s.Symbol);
            foreach (var stockGroup in groupedStocks)
            {
                var positiveEventCount = stockGroup.SelectMany(s => s.StockEvents).Count(e => e.Sentiment == "Positive");
                var negativeEventCount = stockGroup.SelectMany(s => s.StockEvents).Count(e => e.Sentiment == "Negative");
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-microchip"></i> @stockGroup.Key Analysis (Total: @stockGroup.SelectMany(s => s.StockEvents).Count()) | Positive: @positiveEventCount | Negative: @negativeEventCount
                        </h5>
                        <button class="btn btn-success btn-toggle" onclick="toggleCollapse('@stockGroup.Key-positive')">
                            <i class="fas fa-arrow-up"></i> Positive Analysis
                        </button>
                        <div id="@stockGroup.Key-positive" class="collapse">
                            @foreach (var stock in stockGroup)
                            {
                                @foreach (var stockEvent in stock.StockEvents.Where(e => e.Sentiment == "Positive"))
                                {
                                    <div class="card-text">
                                        <p class="card-text"><i class="fas fa-calendar-day"></i> <strong>Date:</strong> <span>@stockEvent.Date</span></p>
                                        <p class="card-text"><i class="fas fa-chart-line"></i> <strong>Price Change:</strong> <span class="positive">@stockEvent.PriceChange%</span></p>
                                        <p class="card-text"><i class="fas fa-calendar-check"></i> <strong>Events:</strong> <a href="@stockEvent.Source" class="text-success">Link</a></p>
                                        <p class="card-text"><i class="fas fa-smile"></i> <strong>Sentiment:</strong> <span class="positive">@stockEvent.Sentiment</span></p>
                                    </div>
                                }
                            }
                        </div>

                        <button class="btn btn-danger btn-toggle" onclick="toggleCollapse('@stockGroup.Key-negative')">
                            <i class="fas fa-arrow-down"></i> Negative Analysis
                        </button>
                        <div id="@stockGroup.Key-negative" class="collapse">
                            @foreach (var stock in stockGroup)
                            {
                                @foreach (var stockEvent in stock.StockEvents.Where(e => e.Sentiment == "Negative"))
                                {
                                    <div class="card-text">
                                        <p class="card-text"><i class="fas fa-calendar-day"></i> <strong>Date:</strong> <span>@stockEvent.Date</span></p>
                                        <p class="card-text"><i class="fas fa-chart-line"></i> <strong>Price Change:</strong> <span class="negative">@stockEvent.PriceChange%</span></p>
                                        <p class="card-text"><i class="fas fa-calendar-check"></i> <strong>Events:</strong> <a href="@stockEvent.Source" class="text-danger">Link</a></p>
                                        <p class="card-text"><i class="fas fa-frown"></i> <strong>Sentiment:</strong> <span class="negative">@stockEvent.Sentiment</span></p>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <div class="col-md-12 table-container">
        <div class="card">
            <h5 class="card-title">
                <button class="btn btn-link btn-block text-left" onclick="toggleCollapse('events-table')">
                    <i class="fas fa-table"></i> Events Analyzer
                </button>
            </h5>
            <div id="events-table" class="collapse show">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col"><i class="fas fa-calendar-day"></i> Date</th>
                                    <th scope="col"><i class="fas fa-info-circle"></i> Event Name</th>
                                    <th scope="col"><i class="fas fa-file-alt"></i> Details</th>
                                    <th scope="col"><i class="fas fa-chart-line"></i> Impact</th>
                                    <th scope="col"><i class="fas fa-smile"></i> Sentiment</th>
                                    <th scope="col"><i class="fas fa-link"></i> Source</th>
                                    <th scope="col"><i class="fas fa-ellipsis-v"></i> Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var portfolio in Model)
                                {
                                    foreach (var stock in portfolio.Items)
                                    {
                                        foreach (var stockEvent in stock.StockEvents)
                                        {
                                            <tr>
                                                <td>@stockEvent.Date</td>
                                                <td>@stockEvent.EventName</td>
                                                <td>@stockEvent.Details</td>
                                                <td class="@stockEvent.Impact.ToLower()">@stockEvent.Impact</td>
                                                <td class="@stockEvent.Sentiment.ToLower()">@stockEvent.Sentiment</td>
                                                <td><a href="@stockEvent.Source" class="@stockEvent.Sentiment.ToLower()">Link</a></td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <a class="btn btn-secondary" href="/StockEvents/Details/@stockEvent.Id"><i class="fas fa-eye"></i> View More</a>
                                                        <a class="btn btn-primary" href="/StockEvents/Edit/@stockEvent.Id"><i class="fas fa-edit"></i> Edit</a>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="loading" class="loading-spinner">Loading...</div>
    <div class="col-md-12 chart-container">
        <div id="chart"></div>
    </div>
</div>

<script>
    function toggleCollapse(id) {
        var element = document.getElementById(id);
        element.classList.toggle('show');
    }

    async function fetchStockData() {
        const response = await fetch('/api/SentimentAnalyzerApi/GetStockData');
        const stockData = await response.json();
        return stockData;
    }

    function createChart(stockData) {
        const { startDate, endDate } = getDateRange();

        // Show the loading spinner
        const loadingElement = document.getElementById('loading');
        loadingElement.style.display = 'block';

        const fetchPromises = stockData.map(stock => {
            const apiUrl = `/api/Portfolio/historical-data?symbol=${stock.symbol}&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`;

            return fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    const historicalData = data.map(item => ({
                        x: new Date(item.date),
                        y: item.close
                    }));

                    const eventData = stock.stockEvents.map(event => ({
                        x: new Date(event.date),
                        y: event.price,
                        label: event.eventName
                    }));

                    // Combine historicalData and eventData into a single dataset
                    const combinedData = [...historicalData, ...eventData].sort((a, b) => a.x - b.x);

                    return {
                        symbol: stock.symbol,
                        combinedData: combinedData
                    };
                })
                .catch(error => {
                    console.error(`Error fetching data for ${stock.symbol}:`, error);
                    return null;
                });
        });

        Promise.all(fetchPromises).then(results => {
            const series = results.filter(item => item !== null).map(item => ({
                name: item.symbol,
                data: item.combinedData
            }));

            const options = {
                series: series,
                chart: {
                    type: 'line',
                    height: 350
                },
                title: {
                    text: 'Stock Data',
                    align: 'left'
                },
                xaxis: {
                    type: 'datetime'
                },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return value.toFixed(2);
                        }
                    }
                },
                tooltip: {
                    enabled: true,
                    shared: true,
                    intersect: false,
                    x: {
                        format: 'dd MMM yyyy'
                    },
                    y: {
                        formatter: function (value) {
                            return value.toFixed(2);
                        }
                    }
                },
                dataLabels: {
                    enabled: true,
                    formatter: function (value, opts) {
                        const dataPoint = opts.w.config.series[opts.seriesIndex].data[opts.dataPointIndex];
                        return dataPoint?.label ? dataPoint.label : '';
                    }
                },
            
                markers: {
                    size: 6,
                    shape: "circle"
                }
            };

            const chartElement = document.querySelector('#chart');
            if (chartElement) {
                const chart = new ApexCharts(chartElement, options);
                chart.render().then(() => {
                    // Hide the loading spinner
                    loadingElement.style.display = 'none';
                });
            } else {
                console.error('Element with ID chart not found');
                // Hide the loading spinner if there's an error
                loadingElement.style.display = 'none';
            }
        });
    }

    // Helper function to get date range for the beginning of the year and the current date
    function getDateRange() {
        const currentYear = new Date().getFullYear();
        const startDate = new Date(currentYear, 0, 1); // January 1st of the current year
        const endDate = new Date(); // Today
        return { startDate, endDate };
    }

    document.addEventListener('DOMContentLoaded', async () => {
        const stockData = await fetchStockData();
        createChart(stockData);
    });
</script>
