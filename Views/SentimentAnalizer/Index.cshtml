@model List<MarketAnalyticHub.Models.Portfolio.Portfolio>
@{
    ViewData["Title"] = "Sentiment Analysis";
    ViewData["container"] = (ViewData["container"] ?? "container-fluid");
    ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-fluid");
}

<!-- Include ApexCharts and Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<style>
    .positive {
        color: #28a745;
    }

    .negative {
        color: #dc3545;
    }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.5em;
        color: #000;
        display: none; /* Hidden by default */
    }

    .chart-container,
    .table-container,
    .card {
        background: #ffffff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    .btn-toggle {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .collapse {
        display: none;
    }

        .collapse.show {
            display: block;
        }

    .card-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .card-text {
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
    }

    .btn-success, .btn-danger {
        display: block;
        width: 100%;
        text-align: left;
        padding: 10px;
        margin-bottom: 10px;
    }

    .table th,
    .table td {
        vertical-align: middle;
    }

    .table-responsive {
        margin-top: 20px;
    }

    #chart {
        margin-top: 20px;
    }
</style>

<h4 class="py-3 mb-4"><span class="text-muted fw-light">Sentiment Analysis /</span> Sentiment Analyzer</h4>

<div class="col-12">
    <!-- Modal for displaying full details -->
    <div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Event Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="eventForm">
                        <input type="hidden" id="eventId">
                        <input type="hidden" id="portfolioItemId">
                        <div class="form-group">
                            <label for="eventDate">Date</label>
                            <input type="date" class="form-control" id="eventDate" required>
                        </div>
                        <div class="form-group">
                            <label for="eventPrice">Price</label>
                            <input type="number" class="form-control" id="eventPrice" required>
                        </div>
                        <div class="form-group">
                            <label for="eventChange">Price Change</label>
                            <input type="number" class="form-control" id="eventChange" required>
                        </div>
                        <div class="form-group">
                            <label for="eventDescription">Event Description</label>
                            <input type="text" class="form-control" id="eventDescription" required>
                        </div>
                        <div class="form-group">
                            <label for="eventImpact">Impact</label>
                            <select class="form-control" id="eventImpact" required>
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="eventSentiment">Sentiment</label>
                            <select class="form-control" id="eventSentiment" required>
                                <option value="Positive">Positive</option>
                                <option value="Negative">Negative</option>
                                <option value="Neutral">Neutral</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <h6 class="text-muted">Analyzer</h6>
    <div class="nav-align-top mb-4">
        <ul class="nav nav-tabs nav-fill" role="tablist">
            <li class="nav-item">
                <button type="button" class="nav-link active" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-home" aria-controls="navs-justified-home" aria-selected="true">
                    <i class="tf-icons bx bx-chart me-1"></i>
                    <span class="d-none d-sm-block"> Chart</span>
                    <span class="badge rounded-pill badge-center h-px-20 w-px-20 bg-label-danger ms-1"></span>
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-profile" aria-controls="navs-justified-profile" aria-selected="false">
                    <i class="tf-icons bx bx-table me-1"></i>
                    <span class="d-none d-sm-block"> Table</span>
                    <span class="badge rounded-pill badge-center h-px-20 w-px-20 bg-label-danger ms-1"></span>
                </button>
            </li>
            <li class="nav-item">
                <button type="button" class="nav-link" role="tab" data-bs-toggle="tab" data-bs-target="#navs-justified-messages" aria-controls="navs-justified-messages" aria-selected="false">
                    <i class="tf-icons bx bx-news me-1"></i>
                    <span class="d-none d-sm-block"> List</span>
                    <span class="badge rounded-pill badge-center h-px-20 w-px-20 bg-label-danger ms-1"></span>
                </button>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane fade show active" id="navs-justified-home" role="tabpanel">

                <div class="spinner" id="loadingSpinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
                <div class="col-md-12 chart-container">
                    <div id="chart"></div>
                </div>

            </div>
            <div class="tab-pane fade" id="navs-justified-profile" role="tabpanel">
                @Html.Partial("_Table", Model)
            </div>
            <div class="tab-pane fade" id="navs-justified-messages" role="tabpanel">
                @Html.Partial("_List", Model)
            </div>
        </div>
    </div>
</div>

<script>
    let currentEventData = null;

    async function fetchStockData() {
        try {
            const response = await fetch('/api/SentimentAnalyzerApi/GetStockData');
            if (!response.ok) throw new Error('Network response was not ok');
            return await response.json();
        } catch (error) {
            console.error('Fetch error:', error);
            return [];
        }
    }

    function createBubbleChart(stockData) {
        const { startDate, endDate } = getDateRange();

        // Show the loading spinner
        const loadingElement = document.getElementById('loadingSpinner');
        loadingElement.style.display = 'block';

        const fetchPromises = stockData.map(stock => {
            const apiUrl = `/api/Portfolio/historical-data?symbol=${stock.symbol}&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`;

            return fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    const eventData = stock.stockEvents.map(event => ({
                        x: new Date(event.date),
                        y: event.price,
                        z: Math.abs(event.priceChange) * 10, // Adjust bubble size based on price change
                        description: event.eventName,
                        label: stock.symbol,
                        id: event.id,
                        portfolioItemId: event.portfolioItemId,
                        priceChange: event.priceChange,
                        impact: event.impact,
                        sentiment: event.sentiment
                    }));

                    return {
                        symbol: stock.symbol,
                        eventData: eventData,
                        historicalData: data.map(d => ({ x: new Date(d.date), y: d.close }))
                    };
                })
                .catch(error => {
                    console.error(`Error fetching data for ${stock.symbol}:`, error);
                    return null;
                });
        });

        Promise.all(fetchPromises).then(results => {
            const filteredResults = results.filter(item => item !== null && item.eventData.length > 0);

            filteredResults.forEach(stock => {
                createStockChart(stock.symbol, stock.eventData, stock.historicalData);
            });

            // Hide the loading spinner
            loadingElement.style.display = 'none';
        });
    }

    function createStockChart(symbol, eventData, historicalData) {
        const options = {
            series: [
                {
                    name: symbol,
                    type: 'bubble',
                    data: eventData
                },
                {
                    name: `${symbol} Historical`,
                    type: 'line',
                    data: historicalData
                }
            ],
            chart: {
                height: 500, // Increased height for better readability
                toolbar: {
                    show: true
                },
                events: {
                    dataPointSelection: function (event, chartContext, config) {
                        const dataPoint = config.w.config.series[config.seriesIndex].data[config.dataPointIndex];
                        if (dataPoint.description) {
                            currentEventData = dataPoint;
                            openModal(dataPoint);
                        }
                    }
                }
            },
            title: {
                text: `Stock Events for ${symbol}`,
                align: 'left'
            },
            xaxis: {
                type: 'datetime',
                labels: {
                    format: 'dd MMM yyyy'
                }
            },
            yaxis: {
                labels: {
                    formatter: function (value) {
                        return value.toFixed(2);
                    }
                }
            },
            tooltip: {
                enabled: true,
                shared: true,
                intersect: false,
                x: {
                    format: 'dd MMM yyyy'
                },
                y: {
                    formatter: function (value) {
                        return value.toFixed(2);
                    }
                },
                custom: function ({ series, seriesIndex, dataPointIndex, w }) {
                    const data = w.globals.initialSeries[seriesIndex].data[dataPointIndex];
                    return `
                            <div class="apexcharts-tooltip-bubble">
                                <span><strong>${w.globals.seriesNames[seriesIndex]}</strong></span><br>
                                <span>Date: ${new Date(data.x).toLocaleDateString()}</span><br>
                                <span>Price: ${data.y}</span><br>
                                ${data.description ? `<span>Event: ${data.description}</span><br>` : ''}
                                ${data.impact ? `<span>Impact: ${data.impact}</span><br>` : ''}
                                ${data.sentiment ? `<span>Sentiment: ${data.sentiment}</span><br>` : ''}
                            </div>
                        `;
                }
            },
            dataLabels: {
                enabled: true,
                formatter: function (value, opts) {
                    const dataPoint = opts.w.config.series[opts.seriesIndex].data[opts.dataPointIndex];
                    return dataPoint?.label ? dataPoint.label : '';
                },
                style: {
                    colors: ['#000'],
                    fontSize: '14px',
                    fontWeight: 'bold'
                },
                background: {
                    enabled: false
                }
            },
            markers: {
                size: 5, // Adjust the size of the bubbles
                shape: "circle",
                strokeColors: '#fff',
                strokeWidth: 2,
                hover: {
                    size: 3
                }
            },
            legend: {
                position: 'top',
                horizontalAlign: 'center',
                floating: true,
                offsetY: -10,
                offsetX: -5
            }
        };

        // Create a new chart container for each stock symbol
        const chartContainer = document.createElement('div');
        chartContainer.id = `chart-${symbol}`;
        chartContainer.style.marginBottom = '50px';
        document.querySelector('.chart-container').appendChild(chartContainer);

        const chart = new ApexCharts(chartContainer, options);
        chart.render();
    }

    // Helper function to get date range for the beginning of the year and the current date
    function getDateRange() {
        const currentDate = new Date();
        const endDate = currentDate; // Today

        // Calculate the start date (three months prior to today)
        const startDate = new Date(currentDate);
        startDate.setMonth(startDate.getMonth() - 3);
        return { startDate, endDate };
    }

    function openModal(eventData) {
        document.getElementById('eventId').value = eventData.id;
        document.getElementById('portfolioItemId').value = eventData.portfolioItemId;
        document.getElementById('eventDate').value = eventData.x.toISOString().split('T')[0];
        document.getElementById('eventPrice').value = eventData.y;
        document.getElementById('eventChange').value = eventData.priceChange;
        document.getElementById('eventDescription').value = eventData.description;
        document.getElementById('eventImpact').value = eventData.impact;
        document.getElementById('eventSentiment').value = eventData.sentiment;

        const modal = new bootstrap.Modal(document.getElementById('detailsModal'));
        modal.show();
    }

    document.getElementById('eventForm').addEventListener('submit', async function (event) {
        event.preventDefault();

        const eventId = document.getElementById('eventId').value;
        const portfolioItemId = document.getElementById('portfolioItemId').value;
        const eventDate = new Date(document.getElementById('eventDate').value);
        const eventPrice = parseFloat(document.getElementById('eventPrice').value);
        const eventChange = parseFloat(document.getElementById('eventChange').value);
        const eventDescription = document.getElementById('eventDescription').value;
        const eventImpact = document.getElementById('eventImpact').value;
        const eventSentiment = document.getElementById('eventSentiment').value;

        // Prepare the data to send to the API
        const updatedEvent = {
            id: eventId,
            details: 'NOT_CHANGE',
            url: 'NOT_CHANGE',
            title: eventDescription,
            eventName: eventDescription,
            start: eventDate.toISOString(),
            end: eventDate.toISOString(),
            allDay: true,
            calendar: "",
            location: "",
            guests: "",
            description: eventDescription,
            impact: eventImpact,
            sentiment: eventSentiment,
            source: 'NOT_CHANGE',
            price: eventPrice,
            priceChange: eventChange,
            portfolioItemId: portfolioItemId
        };

        try {
            const response = await fetch(`/api/events/${eventId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedEvent)
            });

            if (response.ok) {
                // Update the chart with the modified data
                const chart = ApexCharts.exec(`chart-${currentEventData.label}`, 'updateSeries', [{
                    name: currentEventData.label,
                    data: chart.w.config.series[0].data.map(d => d.id === currentEventData.id ? currentEventData : d)
                }], true);
                alert("Event updated successfully.");
            } else {
                alert("Failed to update event.");
            }
        } catch (error) {
            console.error("Error updating event:", error);
            alert("An error occurred while updating the event.");
        }

        const modal = bootstrap.Modal.getInstance(document.getElementById('detailsModal'));
        modal.hide();
    });

    document.addEventListener('DOMContentLoaded', async () => {
        const stockData = await fetchStockData();
        createBubbleChart(stockData);
    });
</script>
