<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@5.0.7/dist/browser/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <h1>Portfolio Analysis</h1>

    <div class="card">
        <h2>Generate Report</h2>
        <div class="card-body">
            <input type="text" id="prompt" placeholder="Enter a prompt">
            <button onclick="generateReport()">Generate Report</button>
            <pre id="report"></pre>
        </div>
    </div>

    <div>
        <h2>Real-Time Portfolio Metrics</h2>
        <canvas id="portfolioMetricsChart"></canvas>
    </div>

    <div>
        <h2>Real-Time Portfolio Insights</h2>
        <pre id="portfolio-insights"></pre>
    </div>

    <script>
        async function generateReport() {
            const prompt = document.getElementById('prompt').value;
            const response = await fetch('/api/llm/generate-report', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(prompt)
            });

            const report = await response.text();
            document.getElementById('report').innerText = report;
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/portfolioHub")
            .build();

        connection.on("ReceivePortfolioUpdatesMetrics", (data) => {
            const ctx = document.getElementById('portfolioMetricsChart').getContext('2d');
            const labels = data.buckets.map(b => b.key_as_string); // Assuming the aggregation returns buckets with date keys
            const values = data.buckets.map(b => b.total_sales.value); // Modify based on your aggregation structure

            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Portfolio Metrics',
                        data: values,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1,
                        fill: false
                    }]
                }
            });
        });

        connection.on("ReceivePortfolioUpdatesInsights", (insights) => {
            document.getElementById('portfolio-insights').innerText = insights;
        });

        connection.start().then(() => {
            console.log("SignalR Connected");
        }).catch(err => console.error(err));
    </script>
</body>
</html>
