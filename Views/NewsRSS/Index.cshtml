<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RSS News</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Add some basic styling */
        .card {
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 16px;
            margin: 16px;
        }

        .table-responsive {
            max-width: 100%;
            overflow-x: auto;
        }

        .table {
            width: 100%;
            margin-bottom: 1rem;
            color: #212529;
            table-layout: fixed;
        }

            .table th,
            .table td {
                padding: 0.75rem;
                vertical-align: top;
                border-top: 1px solid #dee2e6;
                word-wrap: break-word;
            }

            .table thead th {
                vertical-align: bottom;
                border-bottom: 2px solid #dee2e6;
            }

            .table tbody + tbody {
                border-top: 2px solid #dee2e6;
            }

        .dropdown-menu {
            display: none;
            position: absolute;
            background-color: #fff;
            border: 1px solid #ccc;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .15);
        }

        .dropdown:hover .dropdown-menu {
            display: block;
        }

        .pagination {
            display: flex;
            padding-left: 0;
            list-style: none;
            border-radius: 0.25rem;
        }

            .pagination li {
                display: block;
            }

                .pagination li a {
                    position: relative;
                    display: block;
                    padding: 0.5rem 0.75rem;
                    margin-left: -1px;
                    line-height: 1.25;
                    color: #007bff;
                    background-color: #fff;
                    border: 1px solid #dee2e6;
                }

                    .pagination li a:hover {
                        z-index: 2;
                        color: #0056b3;
                        text-decoration: none;
                        background-color: #e9ecef;
                        border-color: #dee2e6;
                    }

            .pagination .disabled a {
                color: #6c757d;
                pointer-events: none;
                cursor: auto;
                background-color: #fff;
                border-color: #dee2e6;
            }

            .pagination .active a {
                z-index: 1;
                color: #fff;
                background-color: #007bff;
                border-color: #007bff;
            }

        .filter-container,
        .search-container {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

            .filter-container select,
            .search-container input {
                width: 200px;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                margin-right: 10px;
                margin-bottom: 10px;
            }

            .filter-container button,
            .search-container button {
                padding: 10px 20px;
                border: none;
                border-radius: 4px;
                background-color: #007bff;
                color: #fff;
                cursor: pointer;
                margin-bottom: 10px;
            }

                .filter-container button:hover,
                .search-container button:hover {
                    background-color: #0056b3;
                }

        @@media (max-width: 768px) {
            .filter-container select,
            .search-container input {
                width: 100%;
                margin-right: 0;
            }

            .filter-container button,
            .search-container button {
                width: 100%;
            }

            .card {
                padding: 8px;
                margin: 8px;
            }

            .table thead {
                display: none;
            }

            .table tbody,
            .table tr,
            .table td {
                display: block;
                width: 100%;
            }

            .table tr {
                margin-bottom: 15px;
            }

            .table td {
                text-align: right;
                padding-left: 50%;
                position: relative;
            }

                .table td::before {
                    content: attr(data-label);
                    position: absolute;
                    left: 0;
                    width: 50%;
                    padding-left: 15px;
                    font-weight: bold;
                    text-align: left;
                }

            .pagination {
                flex-wrap: wrap;
            }

                .pagination li {
                    margin: 2px;
                }
        }

        @@media (min-width: 769px) and (max-width: 1024px) {
            .filter-container,
            .search-container {
                flex-direction: column;
                align-items: center;
            }

                .filter-container select,
                .search-container input,
                .filter-container button,
                .search-container button {
                    width: 50%;
                    margin-bottom: 10px;
                }
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0, 0, 0);
            background-color: rgba(0, 0, 0, 0.4);
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
    </style>
</head>

<body>
    <div class="card">
        <h5 class="card-header">Search RSS</h5>
        <div class="search-container">
            <input type="text" id="searchInput" placeholder="Search for news...">
            <button onclick="searchNews()">Search</button>
        </div>
        <div class="filter-container">
            <select id="categoryFilter" onchange="filterNews()">
                <option value="">All Categories</option>
                <!-- Dynamic categories will be added here -->
            </select>
            <select id="dateFilter" onchange="filterNews()">
                <option value="">All Dates</option>
                <option value="Today">Today</option>
                <option value="Last7Days">Last 7 Days</option>
                <option value="Last30Days">Last 30 Days</option>
            </select>
            <button onclick="sortNewsByDate()">Sort by Date</button>
        </div>
    </div>
    <div class="spinner" id="loadingSpinner" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <div class="card">
        <h5 class="card-header">RSS News</h5>
        <div class="table-responsive" id="newsTableContainer">
            <table class="table">
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Category</th>
                        <th>Title</th>
                        <th>Short Description</th>
                        <th>Link</th>
                        <th>Date</th>
                        <th>Actions</th>
                        <th>AI Analysis</th>
                    </tr>
                </thead>
                <tbody class="table-border-bottom-0" id="newsTableBody">
                    <!-- News items will be appended here by JavaScript -->
                </tbody>
            </table>
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center" id="paginationControls">
                <!-- Pagination items will be appended here by JavaScript -->
            </ul>
        </nav>
        <button class="btn btn-primary" onclick="fetchRssUrls()">Load RSS Feeds</button>
    </div>

    <!-- The Modal -->
    <div id="analysisModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Analyze News</h2>
            <div class="form-group">
                <p>Select a ticker symbol for analysis:</p>
                <div class="form-group">
                    <label class="control-label"><i class="bi bi-graph-up"></i> Symbol</label>
                    <select class="form-control" id="symbolSelect">
                        <!-- Symbols will be loaded here -->
                    </select>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" onclick="performAnalysis()">Analyze</button>
                    <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- The Modal for saving StockEvent -->
    <div id="saveStockEventModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeSaveStockEventModal()">&times;</span>
            <h2>Save as Stock Event</h2>
            <p>Select a ticker symbol and enter sentiment score:</p>
            <div class="form-group">
                <label class="control-label"><i class="bi bi-graph-up"></i> Symbol</label>
                <select class="form-control" id="saveSymbolSelect">
                    <!-- Symbols will be loaded here -->
                </select>
            </div>
            <div class="form-group">
                <label for="portfolioSelect">Portfolio</label>
                <select class="form-control" id="portfolioSelect">
                    <!-- Options will be populated here -->
                </select>
            </div>
            <div class="form-group">
                <label class="control-label"><i class="bi bi-graph-up"></i> Score</label>
                <input type="text" class="form-control" id="sentimentScoreInput" placeholder="Sentiment Score">
            </div>
            <div class="form-group">
                <label for="modalTitle">Title</label>
                <input type="text" class="form-control" id="modalTitle" readonly>
            </div>
            <div class="form-group">
                <label for="modalUrl">URL</label>
                <input type="text" class="form-control" id="modalUrl" readonly>
            </div>
            <div class="form-group">
                <label class="control-label"><i class="bi bi-graph-up"></i> Impact</label>
                <select id="modalImpact" class="form-control">
                    <option value="">-- Select Impact --</option>
                    <option value="High">High</option>
                    <option value="Medium">Medium</option>
                    <option value="Low">Low</option>
                </select>
            </div>
            <div class="form-group">
                <label class="control-label"><i class="bi bi-emoji-smile"></i> Sentiment</label>
                <select id="modalSentiment" class="form-control">
                    <option value="">-- Select Sentiment --</option>
                    <option value="Positive">Positive</option>
                    <option value="Negative">Negative</option>
                    <option value="Neutral">Neutral</option>
                </select>
            </div>
            <div class="form-group">
                <label for="modalDescription">Description</label>
                <textarea class="form-control" id="modalDescription" rows="3" readonly></textarea>
            </div>
            <div class="form-group">
                <label class="control-label"><i class="bi bi-currency-dollar"></i> Price</label>
                <input type="number" id="modalPrice" class="form-control">
            </div>
            <div class="form-group">
                <label class="control-label"><i class="bi bi-arrow-up-down"></i> Price Change</label>
                <input type="number" id="modalPriceChange" class="form-control">
            </div>
            <div class="form-group mb-1">
                <button class="btn btn-primary" onclick="performSaveStockEvent()">Save</button>
                <button class="btn btn-secondary" onclick="closeSaveStockEventModal()">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        let allNewsItems = [];
        let categories = new Set();
        let currentNewsForAnalysis = null;
        let currentNewsForStockEvent = null;

        function sanitize(input) {
            const temp = document.createElement('div');
            temp.textContent = input;
            return temp.innerHTML;
        }

        function showSpinner() {
            document.getElementById('loadingSpinner').style.display = 'block';
        }

        function hideSpinner() {
            document.getElementById('loadingSpinner').style.display = 'none';
        }

        async function fetchRssUrls() {
            showSpinner();
            try {
                const response = await fetch('/api/NewsRSSApi/GetRssUrls');
                if (response.ok) {
                    const urls = await response.json();
                    for (const [category, url] of Object.entries(urls)) {
                        await fetchRssFeed(category, url);
                    }
                } else {
                    console.error('Failed to fetch RSS URLs');
                }
            } finally {
                hideSpinner();
            }
        }

        async function fetchRssFeed(category, url) {
            const response = await fetch(`/api/NewsRSSApi/FetchRssFeed?category=${sanitize(category)}&url=${encodeURIComponent(url)}`);
            if (response.ok) {
                const newsItems = await response.json();
                allNewsItems = allNewsItems.concat(newsItems);
                categories.add(category);
                updateCategoriesDropdown();
                updateTable(allNewsItems);
            } else {
                console.error(`Failed to fetch RSS feed for category ${sanitize(category)}`);
            }
        }

        function updateCategoriesDropdown() {
            const categoryFilter = document.getElementById('categoryFilter');
            categoryFilter.innerHTML = '<option value="">All Categories</option>'; // Clear existing options
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = sanitize(category);
                option.textContent = sanitize(category);
                categoryFilter.appendChild(option);
            });
        }

        function updateTable(newsItems) {
            const tbody = document.getElementById('newsTableBody');
            tbody.innerHTML = ''; // Clear existing rows
            newsItems.forEach(news => {
                const row = document.createElement('tr');
                row.innerHTML = `
                                                                    <td data-label="Image">
                                                                        ${news.imageUrl ? `<img src="${sanitize(news.imageUrl)}" alt="Image" style="width: 100px; height: auto;" />` : `<i class="fas fa-newspaper" style="font-size: 100px; color: gray;"></i>`}
                                                                    </td>
                                                                    <td data-label="Category">${sanitize(news.category)}</td>
                                                                    <td data-label="Title">${sanitize(news.title ?? "No title")}</td>
                                                                    <td data-label="Short Description">${sanitize(news.description ?? "No description")}</td>
                                                                    <td data-label="Link"><a href="${sanitize(news.link)}" target="_blank">${sanitize(news.link ?? "No link")}</a></td>
                                                                    <td data-label="Date">${sanitize(news.date ?? "No date")}</td>
                                                                    <td data-label="Actions">
                                                                        <div>
                                                                            <a class="dropdown-item" href="javascript:void(0);" onclick="showSaveStockEventModal('${sanitize(news.title)}', '${sanitize(news.description)}', '${sanitize(news.link)}', '${sanitize(news.date)}')"><i class="fas fa-save"></i> Save as StockEvent</a>
                                                                        </div>
                                                                    </td>
                                                                    <td data-label="AI Analysis">
                                                                        <button onclick="showAnalysisModal('${sanitize(news.title)}', '${sanitize(news.description)}', '${sanitize(news.link)}')" class="btn p-0"><i class="fas fa-magic" style="font-size: 24px; color: #007bff;"></i></button>
                                                                    </td>
                                                                `;
                tbody.appendChild(row);
            });
        }

        async function fetchSymbols() {
            showSpinner();
            try {
                const response = await fetch('/api/symbolsAPI');
                if (response.ok) {
                    const symbols = await response.json();
                    const symbolSelect = document.getElementById('saveSymbolSelect');
                    const symbolSelectAIAnalysis = document.getElementById('symbolSelect');
                    symbolSelect.innerHTML = ''; // Clear existing options
                    symbolSelectAIAnalysis.innerHTML = ''; // Clear existing options for analysis
                    symbols.forEach(symbol => {
                        const option = document.createElement('option');
                        option.value = sanitize(symbol);
                        option.textContent = sanitize(symbol);
                        symbolSelect.appendChild(option);
                        symbolSelectAIAnalysis.appendChild(option.cloneNode(true));
                    });
                } else {
                    console.error('Failed to fetch symbols');
                }
            } finally {
                hideSpinner();
            }
        }

        async function fetchPortfolios() {
            showSpinner();
            try {
                const response = await fetch('/api/Portfolio');
                if (response.ok) {
                    const portfolios = await response.json();
                    const portfolioSelect = document.getElementById('portfolioSelect');
                    portfolioSelect.innerHTML = ''; // Clear existing options
                    portfolios.forEach(portfolio => {
                        const optGroup = document.createElement('optgroup');
                        optGroup.label = sanitize(portfolio.name);
                        portfolio.items.forEach(item => {
                            const option = document.createElement('option');
                            option.value = sanitize(item.id);
                            option.textContent = `${sanitize(item.symbol)} (${sanitize(item.operationType)})`;
                            optGroup.appendChild(option);
                        });
                        portfolioSelect.appendChild(optGroup);
                    });
                } else {
                    console.error('Failed to fetch portfolios');
                }
            } finally {
                hideSpinner();
            }
        }

        function showAnalysisModal(title, description, link) {
            currentNewsForAnalysis = { title: sanitize(title), description: sanitize(description), link: sanitize(link) };
            fetchSymbols();
            document.getElementById('analysisModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('analysisModal').style.display = 'none';
        }

        function showSaveStockEventModal(title, description, link, date) {
            currentNewsForStockEvent = { title: sanitize(title), description: sanitize(description), link: sanitize(link), date: sanitize(date) };

            document.getElementById('modalTitle').value = sanitize(title);
            document.getElementById('modalUrl').value = sanitize(link);
            document.getElementById('modalDescription').value = sanitize(description);
            fetchSymbols();
            fetchPortfolios();
            document.getElementById('saveStockEventModal').style.display = 'block';
        }

        function closeSaveStockEventModal() {
            document.getElementById('saveStockEventModal').style.display = 'none';
        }

        async function performAnalysis() {
            const tickerSymbol = sanitize(document.getElementById('symbolSelect').value);
            if (!tickerSymbol) return;

            showSpinner();
            try {
                const response = await fetch(`/api/SentimentAnalyzerApi/analise-score-impact?inputTextToAnalise=${encodeURIComponent(sanitize(currentNewsForAnalysis.title + currentNewsForAnalysis.description))}&symbol=${tickerSymbol}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(`Analysis result for ${tickerSymbol}: ${sanitize(result.analysis)}`);
                    closeModal();
                } else {
                    console.error('Failed to analyze news');
                }
            } finally {
                hideSpinner();
            }
        }

        async function performSaveStockEvent() {
            const tickerSymbol = sanitize(document.getElementById('saveSymbolSelect').value);
            const sentimentScore = sanitize(document.getElementById('sentimentScoreInput').value);
            const title = sanitize(document.getElementById('modalTitle').value);
            const link = sanitize(document.getElementById('modalUrl').value);
            const description = sanitize(document.getElementById('modalDescription').value);
            const impact = sanitize(document.getElementById('modalImpact').value);
            const sentiment = sanitize(document.getElementById('modalSentiment').value);
            let priceChange = sanitize(document.getElementById('modalPriceChange').value);
            let price = sanitize(document.getElementById('modalPrice').value);
            const selectedPortfolioId = sanitize(document.getElementById('portfolioSelect').value);

            // Ensure all required fields are filled
            if (!tickerSymbol || !sentimentScore || !title || !link || !description || !impact || !sentiment || !selectedPortfolioId) {
                alert('Please fill all the fields');
                return;
            }
            // Set price and priceChange to null if they are empty
            priceChange = priceChange ? parseFloat(priceChange) : null;
            price = price ? parseFloat(price) : null;
            const { date } = currentNewsForStockEvent;
            const newStockEvent = {
                eventName: title,
                title: title,
                url: link,
                details: description,
                description: description,
                author: link,
                start: new Date().toISOString(),
                end: new Date().toISOString(),
                date: new Date().toISOString(),
                allDay: true,
                impact: impact,
                sentiment: sentiment,
                source: link,
                price: price,
                priceChange: priceChange,
                portfolioItemId: selectedPortfolioId
            };

            showSpinner();
            try {
                const response = await fetch('/api/events', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newStockEvent)
                });

                if (response.ok) {
                    const result = await response.json();
                    alert("Saved.");
                    closeSaveStockEventModal();
                } else {
                    const errorResult = await response.json();
                    alert("Error.");
                }
            } finally {
                hideSpinner();
            }
        }

        function searchNews() {
            const searchInput = sanitize(document.getElementById('searchInput').value.toLowerCase());
            const filteredNews = allNewsItems.filter(news =>
                news.title?.toLowerCase().includes(searchInput) ||
                news.description?.toLowerCase().includes(searchInput) ||
                news.category?.toLowerCase().includes(searchInput)
            );
            updateTable(filteredNews);
        }

        function filterNews() {
            const categoryFilter = sanitize(document.getElementById('categoryFilter').value);
            const dateFilter = sanitize(document.getElementById('dateFilter').value);

            let filteredNews = allNewsItems;

            if (categoryFilter) {
                filteredNews = filteredNews.filter(news => news.category === categoryFilter);
            }

            if (dateFilter) {
                const now = new Date();
                filteredNews = filteredNews.filter(news => {
                    const newsDate = new Date(news.date);
                    switch (dateFilter) {
                        case 'Today':
                            return newsDate.toDateString() === now.toDateString();
                        case 'Last7Days':
                            const last7Days = new Date(now);
                            last7Days.setDate(now.getDate() - 7);
                            return newsDate >= last7Days && newsDate <= now;
                        case 'Last30Days':
                            const last30Days = new Date(now);
                            last30Days.setDate(now.getDate() - 30);
                            return newsDate >= last30Days && newsDate <= now;
                        default:
                            return true;
                    }
                });
            }

            updateTable(filteredNews);
        }

        function sortNewsByDate() {
            const sortedNews = [...allNewsItems].sort((a, b) => new Date(b.date) - new Date(a.date));
            updateTable(sortedNews);
        }

        async function loadPage(page) {
            const pageSize = 10; // Adjust as needed
            showSpinner();
            try {
                const response = await fetch(`/api/NewsRSSApi?page=${sanitize(page)}&pageSize=${sanitize(pageSize)}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                if (response.ok) {
                    const data = await response.json();
                    updateTable(data.NewsItems);
                    updatePagination(data.CurrentPage, data.PageSize, data.TotalItems);
                } else {
                    console.error('Failed to load data');
                }
            } finally {
                hideSpinner();
            }
        }

        function updatePagination(currentPage, pageSize, totalItems) {
            const totalPages = Math.ceil(totalItems / pageSize);
            const paginationControls = document.getElementById('paginationControls');
            paginationControls.innerHTML = `
                                                                <li class="page-item ${currentPage == 1 ? "disabled" : ""}">
                                                                    <a class="page-link" href="javascript:void(0);" onclick="loadPage(${sanitize(currentPage - 1)})" aria-label="Previous">
                                                                        <span aria-hidden="true">&laquo;</span>
                                                                    </a>
                                                                </li>
                                                            `;
            for (let i = 1; i <= totalPages; i++) {
                paginationControls.innerHTML += `
                                                                    <li class="page-item ${currentPage == i ? "active" : ""}">
                                                                        <a class="page-link" href="javascript:void(0);" onclick="loadPage(${sanitize(i)})">${sanitize(i)}</a>
                                                                    </li>
                                                                `;
            }
            paginationControls.innerHTML += `
                                                                <li class="page-item ${currentPage == totalPages ? "disabled" : ""}">
                                                                    <a class="page-link" href="javascript:void(0);" onclick="loadPage(${sanitize(currentPage + 1)})" aria-label="Next">
                                                                        <span aria-hidden="true">&raquo;</span>
                                                                    </a>
                                                                </li>
                                                            `;
        }

        async function editNews(id) {
            showSpinner();
            try {
                const response = await fetch('/api/NewsRSSApi/EditNews', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: sanitize(id)
                    })
                });
                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Edit failed');
                }
            } finally {
                hideSpinner();
            }
        }

        async function deleteNews(id) {
            showSpinner();
            try {
                const response = await fetch('/api/NewsRSSApi/DeleteNews', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: sanitize(id)
                    })
                });
                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Delete failed');
                }
            } finally {
                hideSpinner();
            }
        }

        async function runJob(id) {
            showSpinner();
            try {
                const response = await fetch('/api/NewsRSSApi/RunJob', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: sanitize(id)
                    })
                });
                if (response.ok) {
                    location.reload();
                } else {
                    console.error('Run job failed');
                }
            } finally {
                hideSpinner();
            }
        }
    </script>
</body>

</html>
