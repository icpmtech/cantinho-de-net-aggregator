@model PaginatedList<GroupedPortfolioItems>

<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-center my-3">
            <a class="btn btn-primary" asp-action="Create">
                <i class='bx bx-plus'></i> Create New
            </a>
            <div>
                <label for="pageSizeSelect" class="form-label">Page Size:</label>
                <select id="pageSizeSelect" class="form-select d-inline-block w-auto" onchange="location.href='@Url.Action("Index", new { pageNumber = Model.PageIndex, pageSize = ViewData["CurrentPageSize"], sortOrder = ViewData["CurrentSort"], tab = "list" })'">
                    <option value="10" selected=@(ViewData["CurrentPageSize"].ToString() == "10" ? "selected" : "")>10</option>
                    <option value="20" selected=@(ViewData["CurrentPageSize"].ToString() == "20" ? "selected" : "")>20</option>
                    <option value="50" selected=@(ViewData["CurrentPageSize"].ToString() == "50" ? "selected" : "")>50</option>
                    <option value="100" selected=@(ViewData["CurrentPageSize"].ToString() == "100" ? "selected" : "")>100</option>
                </select>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <div class="list-group">
                    @foreach (var group in Model)
                    {
                        <div class="list-group-item">
                            <h5 class="mb-1">
                                <a data-bs-toggle="collapse" href="#collapse-@group.Symbol" role="button" aria-expanded="false" aria-controls="collapse-@group.Symbol">
                                    @group.Symbol <span class="badge bg-secondary">@group.Items.Count</span>
                                </a>
                            </h5>
                            <div class="collapse" id="collapse-@group.Symbol">
                                @foreach (var item in @group.Items)
                                {
                                    <div class="mt-2">
                                        <div class="d-flex w-100 justify-content-between">
                                            <small>@item.PurchaseDate.ToShortDateString()</small>
                                        </div>
                                        <p class="mb-1">Quantity: @item.Quantity</p>
                                        <p class="mb-1">Purchase Price: @item.PurchasePrice</p>
                                        <p class="mb-1">Current Price: @item.CurrentPrice</p>
                                        <p class="mb-1">Commission: @item.Commission</p>
                                        <p class="mb-1">Industry: @(item.Industry != null ? item.Industry.Name : "N/A")</p>
                                        <p class="mb-1">Portfolio: @(item.Portfolio != null ? item.Portfolio.Name : "N/A")</p>
                                        <div id="chart-@item.Id" style="min-width: 150px; height: 200px;"></div>
                                        <div class="btn-group mt-2" role="group" aria-label="Basic example">
                                            <a class="btn btn-sm btn-warning" asp-action="Edit" asp-route-id="@item.Id">
                                                <i class='bx bx-edit'></i> Edit
                                            </a>
                                            <a class="btn btn-sm btn-info" asp-action="Details" asp-route-id="@item.Id">
                                                <i class='bx bx-detail'></i> Details
                                            </a>
                                            <a class="btn btn-sm btn-danger" asp-action="Delete" asp-route-id="@item.Id">
                                                <i class='bx bx-trash'></i> Delete
                                            </a>
                                        </div>
                                        <script>
                                            document.addEventListener('DOMContentLoaded', function () {
                                                fetch('/api/dashboards/chartdata/@item.Id')
                                                    .then(response => response.json())
                                                    .then(data => {
                                                        var d = document.querySelector("#chart-@item.Id");
                                                        var options = {
                                                            chart: {
                                                                height: 400,
                                                                type: 'line',
                                                                toolbar: { show: true }
                                                            },
                                                            series: [
                                                                {
                                                                    name: 'Open',
                                                                    data: data.opens,
                                                                    type: 'line',
                                                                },
                                                                {
                                                                    name: 'High',
                                                                    data: data.highs,
                                                                    type: 'line',
                                                                },
                                                                {
                                                                    name: 'Low',
                                                                    data: data.lows,
                                                                    type: 'line',
                                                                },
                                                                {
                                                                    name: 'Close',
                                                                    data: data.closes,
                                                                    type: 'line',
                                                                },
                                                                {
                                                                    name: 'Volume',
                                                                    type: 'column',
                                                                    data: data.volumes,
                                                                    yaxis: 1,
                                                                }
                                                            ],
                                                            xaxis: {
                                                                type: 'datetime',
                                                                categories: data.dates,
                                                                labels: {
                                                                    format: 'yyyy-MM-dd',
                                                                    rotate: -45,
                                                                    rotateAlways: true
                                                                },
                                                                title: {
                                                                    text: 'Date'
                                                                }
                                                            },
                                                            yaxis: [
                                                                {
                                                                    title: {
                                                                        text: 'Price'
                                                                    },
                                                                    labels: {
                                                                        formatter: function (value) {
                                                                            return  value.toFixed(2);
                                                                        }
                                                                    }
                                                                },
                                                                {
                                                                    opposite: true,
                                                                    title: {
                                                                        text: 'Volume'
                                                                    },
                                                                    labels: {
                                                                        formatter: function (value) {
                                                                            return value.toFixed(0);
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            tooltip: {
                                                                shared: true,
                                                                intersect: false,
                                                                x: {
                                                                    format: 'yyyy-MM-dd'
                                                                },
                                                                y: {
                                                                    formatter: function (value, { series, seriesIndex, dataPointIndex, w }) {
                                                                        if (seriesIndex === 4) {
                                                                            return value.toFixed(0); // Volume
                                                                        } else {
                                                                            return  value.toFixed(2); // Price
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            legend: {
                                                                position: 'top',
                                                                horizontalAlign: 'left'
                                                            }
                                                        };
                                                        if (d) {
                                                            new ApexCharts(d, options).render();
                                                        }
                                                    })
                                                    .catch(error => console.error('Error fetching chart data:', error));
                                            });
                                        </script>
                                    </div>
                                    <hr />
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="mt-3 d-flex justify-content-between">
            @if (Model.HasPreviousPage)
            {
                <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageSize="@ViewData["CurrentPageSize"]" asp-route-tab="list">Previous</a>
            }
            else
            {
                <span class="btn btn-secondary disabled">Previous</span>
            }

            <span>Page @Model.PageIndex of @Model.TotalPages</span>

            @if (Model.HasNextPage)
            {
                <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageSize="@ViewData["CurrentPageSize"]" asp-route-tab="list">Next</a>
            }
            else
            {
                <span class="btn btn-secondary disabled">Next</span>
            }
        </div>
    </div>
</div>
