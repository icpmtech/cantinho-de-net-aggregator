@model PaginatedList<GroupedPortfolioItems>

@{
    ViewData["Title"] = "Portfolio List";
}

<!-- Include TradingView Widget Library -->
<script src="https://s3.tradingview.com/tv.js"></script>

<div class="row">
    <div class="col-12">
        <!-- Header Section: Create New Button and Page Size Selector -->
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-center my-3">
            <a class="btn btn-primary mb-2 mb-md-0" asp-action="Create">
                <i class='bx bx-plus'></i> Create New
            </a>
            <div class="d-flex align-items-center">
                <label for="pageSizeSelect" class="form-label me-2 mb-0">Page Size:</label>
                <select id="pageSizeSelect" class="form-select d-inline-block w-auto" onchange="location.href='@Url.Action("Index", new { pageNumber = Model.PageIndex, pageSize = ViewData["CurrentPageSize"], sortOrder = ViewData["CurrentSort"], tab = "list" })'">
                    <option value="10" selected=@(ViewData["CurrentPageSize"].ToString() == "10")>10</option>
                    <option value="20" selected=@(ViewData["CurrentPageSize"].ToString() == "20")>20</option>
                    <option value="50" selected=@(ViewData["CurrentPageSize"].ToString() == "50")>50</option>
                    <option value="100" selected=@(ViewData["CurrentPageSize"].ToString() == "100")>100</option>
                </select>
            </div>
        </div>

        <!-- Portfolio Groups Loop -->
        @foreach (var group in Model)
        {
            <div class="card mb-3">
                <!-- Card Header: Portfolio Group Information -->
                <div class="card-header d-flex align-items-center">
                    <a class="d-flex align-items-center w-100" data-bs-toggle="collapse" href="#collapse-@group.Symbol" role="button" aria-expanded="false" aria-controls="collapse-@group.Symbol">
                        <img src="https://via.placeholder.com/30?text=@group.Symbol" alt="@group.Symbol" class="rounded-circle me-2" style="width: 30px; height: 30px;">
                        <span>@group.Symbol</span>
                        @{
                            var difference = group.CurrentMarketValue - group.TotalInvestment;
                            var isPositive = difference >= 0;
                            var differenceIcon = isPositive ? "bx bx-up-arrow-alt" : "bx bx-down-arrow-alt";
                            var differenceBadgeClass = isPositive ? "bg-success" : "bg-danger";
                        }
                        <div class="d-flex flex-column flex-sm-row align-items-start align-sm-center ms-auto mt-2 mt-sm-0">
                            <!-- N.Op. Badge -->
                            <span class="badge bg-primary mb-2 mb-sm-0 me-sm-2">
                                N.Op. @group.Items.Count
                            </span>

                            <!-- Inv. Badge -->
                            <span class="badge bg-info mb-2 mb-sm-0 me-sm-2">
                                Inv. @group.TotalInvestment
                            </span>

                            <!-- Container for Ma.V. and Diff. Badges -->
                            <div class="d-flex flex-column flex-sm-row align-items-start align-sm-center">
                                <!-- Ma.V. Badge -->
                                <span class="badge @differenceBadgeClass mb-2 mb-sm-0 me-sm-2 d-flex align-items-center">
                                    Ma.V. @group.CurrentMarketValue
                                </span>

                                <!-- Diff. Badge with Icon -->
                                <span class="badge @differenceBadgeClass d-flex align-items-center">
                                    Diff. @difference
                                    <i class="@differenceIcon ms-1"></i>
                                </span>
                            </div>
                        </div>

                    </a>
                </div>

                <!-- Collapsible Card Body: TradingView Line Chart and Portfolio Items -->
                <div class="collapse" id="collapse-@group.Symbol">
                    <div>
                        <!-- TradingView Line Chart Container -->
                        <div 
                            id="tv-widget-line-chart-@group.Items[0].Id" 
                            class="tradingview-widget-container"
                            data-symbol="@group.Symbol"
                            data-container-id="tv-widget-line-chart-@group.Items[0].Id"
                            style="height: 400px;">
                        </div>

                        <!-- Initialize TradingView Line Chart Widget -->
                        <script>
                            (function() {
                                // Initialize Line Chart Widget
                                new TradingView.widget({
                                    "width": "100%", // Responsive width
                                    "height": 400,
                                    "symbol": "@group.Symbol",
                                    "interval": "D",
                                    "timezone": "Etc/UTC",
                                    "theme": "light",
                                    "style": "1", // 1 for candles, 2 for bars, etc.
                                    "locale": "en",
                                    "toolbar_bg": "#f1f3f6",
                                    "enable_publishing": false,
                                    "allow_symbol_change": true,
                                    "container_id": "tv-widget-line-chart-@group.Items[0].Id"
                                });
                            })();
                        </script>

                        <!-- Portfolio Items Loop -->
                        @foreach (var item in group.Items)
                        {
                            <div class="mt-2">
                                <div class="card-body">
                                    <div class="d-flex w-100 justify-content-between">
                                        <small>@item.PurchaseDate.ToShortDateString()</small>
                                    </div>
                                    <p class="mb-1">Quantity: @item.Quantity</p>
                                    <p class="mb-1">Purchase Price: @item.PurchasePrice</p>
                                    <p class="mb-1">Current Price: @item.CurrentPrice</p>
                                    <p class="mb-1">Commission: @item.Commission</p>
                                    <p class="mb-1">Industry: @(item.Industry != null ? item.Industry.Name : "N/A")</p>
                                    <p class="mb-1">Portfolio: @(item.Portfolio != null ? item.Portfolio.Name : "N/A")</p>

                                    <div class="btn-group mt-2" role="group" aria-label="Basic example">
                                        <a class="btn btn-sm btn-warning" asp-action="Edit" asp-route-id="@item.Id">
                                            <i class='bx bx-edit'></i> Edit
                                        </a>
                                        <a class="btn btn-sm btn-info" asp-action="Details" asp-route-id="@item.Id">
                                            <i class='bx bx-detail'></i> Details
                                        </a>
                                        <a class="btn btn-sm btn-danger" asp-action="Delete" asp-route-id="@item.Id">
                                            <i class='bx bx-trash'></i> Delete
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Pagination Controls -->
        <div class="mt-3 d-flex justify-content-between">
            @if (Model.HasPreviousPage)
            {
                <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageSize="@ViewData["CurrentPageSize"]" asp-route-tab="list">Previous</a>
            }
            else
            {
                <span class="btn btn-secondary disabled">Previous</span>
            }

            <span>Page @Model.PageIndex of @Model.TotalPages</span>

            @if (Model.HasNextPage)
            {
                <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageSize="@ViewData["CurrentPageSize"]" asp-route-tab="list">Next</a>
            }
            else
            {
                <span class="btn btn-secondary disabled">Next</span>
            }
        </div>
    </div>
</div>

<!-- Toast Notification Styles -->
<style>
    /* Toast Container */
    #toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    /* Toast Styles */
    .toast {
        min-width: 200px;
        padding: 15px 20px;
        border-radius: 5px;
        color: #fff;
        opacity: 0.9;
        transition: opacity 0.5s, transform 0.5s;
        font-family: Arial, sans-serif;
    }

    .toast-info {
        background-color: #2196F3;
    }

    .toast-success {
        background-color: #4CAF50;
    }

    .toast-error {
        background-color: #f44336;
    }

    .toast-warning {
        background-color: #ff9800;
    }

    .fade-out {
        opacity: 0;
        transform: translateY(-20px);
    }
</style>

<!-- Toast Notification Script -->
<script>
   
    function showToast(message, type = 'info') {
        const toastContainer = document.getElementById('toast-container') || createToastContainer();

        const toast = document.createElement('div');
        toast.classList.add('toast', `toast-${type}`);
        toast.innerText = message;

        toastContainer.appendChild(toast);

        // Automatically remove the toast after 3 seconds
        setTimeout(() => {
            toast.classList.add('fade-out');
            toast.addEventListener('transitionend', () => {
                toast.remove();
            });
        }, 3000);
    }

   
    function createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toast-container';
        container.style.position = 'fixed';
        container.style.top = '20px';
        container.style.right = '20px';
        container.style.zIndex = '9999';
        container.style.display = 'flex';
        container.style.flexDirection = 'column';
        container.style.gap = '10px';
        document.body.appendChild(container);
        return container;
    }

  
    function updatePageSize(selectedPageSize) {
        const url = new URL(window.location.href);
        url.searchParams.set('pageSize', selectedPageSize);
        // Optionally, reset to first page when page size changes
        url.searchParams.set('pageNumber', 1);
        window.location.href = url.toString();
    }
</script>
