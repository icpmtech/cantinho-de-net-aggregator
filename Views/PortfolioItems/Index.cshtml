@model PaginatedList<MarketAnalyticHub.Models.Portfolio.PortfolioItem>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}

<h1 class="mt-4">Portfolio Items</h1>

<div class="container mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <a class="btn btn-primary" asp-action="Create">
                <i class='bx bx-plus'></i> Create New
            </a>
            <form class="form-inline my-2 my-lg-0">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
        <div class="card-body">
            <div class="list-group">
                @foreach (var item in Model)
                {
                    <div class="list-group-item">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">@Html.DisplayFor(modelItem => item.Symbol)</h5>
                            <small>@Html.DisplayFor(modelItem => item.PurchaseDate.ToShortDateString())</small>
                        </div>
                        <p class="mb-1">Quantity: @Html.DisplayFor(modelItem => item.Quantity)</p>
                        <p class="mb-1">Purchase Price: @Html.DisplayFor(modelItem => item.PurchasePrice)</p>
                        <p class="mb-1">Current Price: @Html.DisplayFor(modelItem => item.CurrentPrice)</p>
                        <p class="mb-1">Commission: @Html.DisplayFor(modelItem => item.Commission)</p>
                        <p class="mb-1">Industry: @Html.DisplayFor(modelItem => item.Industry.Name)</p>
                        <p class="mb-1">Portfolio: @Html.DisplayFor(modelItem => item.Portfolio.Name)</p>
                        <div id="chart-@item.Id" style="min-width: 150px; height: 200px;"></div>
                        <div class="btn-group mt-2" role="group" aria-label="Basic example">
                            <a class="btn btn-sm btn-warning" asp-action="Edit" asp-route-id="@item.Id">
                                <i class='bx bx-edit'></i> Edit
                            </a>
                            <a class="btn btn-sm btn-info" asp-action="Details" asp-route-id="@item.Id">
                                <i class='bx bx-detail'></i> Details
                            </a>
                            <a class="btn btn-sm btn-danger" asp-action="Delete" asp-route-id="@item.Id">
                                <i class='bx bx-trash'></i> Delete
                            </a>
                        </div>
                        <script>
                            document.addEventListener('DOMContentLoaded', function () {
                                fetch('/api/dashboards/chartdata/@item.Id')
                                    .then(response => response.json())
                                    .then(data => {
                                        var d = document.querySelector("#chart-@item.Id");
                                        var c = {
                                            chart: {
                                                height: 200,
                                                type: "line",
                                                toolbar: { show: false },
                                                dropShadow: {
                                                    enabled: true,
                                                    top: 10,
                                                    left: 5,
                                                    blur: 3,
                                                    color: "#FF4560",
                                                    opacity: 0.15
                                                },
                                                sparkline: { enabled: true }
                                            },
                                            markers: {
                                                size: 6,
                                                colors: "transparent",
                                                strokeColors: "transparent",
                                                strokeWidth: 4,
                                                discrete: [
                                                    {
                                                        fillColor: "#FFFFFF",
                                                        seriesIndex: 0,
                                                        dataPointIndex: 3,
                                                        strokeColor: "#FF4560",
                                                        strokeWidth: 4,
                                                        size: 6,
                                                        radius: 2
                                                    }
                                                ],
                                                hover: { size: 7 }
                                            },
                                            grid: { show: false, padding: { right: 8 } },
                                            colors: ["#FF4560"],
                                            dataLabels: { enabled: false },
                                            stroke: { width: 5, curve: "smooth" },
                                            series: [{
                                                name: 'Close Prices',
                                                data: data.closes
                                            }],
                                            xaxis: {
                                                type: 'datetime',
                                                categories: data.dates,
                                                labels: {
                                                    format: 'yyyy-MM-dd'
                                                }
                                            },
                                            yaxis: {
                                                title: {
                                                    text: 'Price'
                                                }
                                            },
                                            legend: {
                                                show: true,
                                                position: 'top',
                                                horizontalAlign: 'left'
                                            }
                                        };
                                        null !== d && new ApexCharts(d, c).render();
                                    })
                                    .catch(error => console.error('Error fetching chart data:', error));
                            });
                        </script>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="mt-3 d-flex justify-content-between">
    @if (Model.HasPreviousPage)
    {
        <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)">Previous</a>
    }
    else
    {
        <span class="btn btn-secondary disabled">Previous</span>
    }

    <span>Page @Model.PageIndex of @Model.TotalPages</span>

    @if (Model.HasNextPage)
    {
        <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)">Next</a>
    }
    else
    {
        <span class="btn btn-secondary disabled">Next</span>
    }
</div>

@section PageScripts {
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
}
