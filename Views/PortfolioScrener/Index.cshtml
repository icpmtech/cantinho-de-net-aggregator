@model MarketAnalyticHub.Models.ScreenerViewModel
@using System.Linq
@using Newtonsoft.Json

@{
    ViewBag.Title = "Portfolio Screener";
}

@functions {
    /// <summary>
    /// Sanitizes a string to be used safely in HTML IDs and JavaScript variable names.
    /// Replaces any non-alphanumeric character with an underscore.
    /// </summary>
    /// <param name="input">The input string to sanitize.</param>
    /// <returns>A sanitized string containing only letters, digits, and underscores.</returns>
    public string SanitizeString(string input)
    {
        if (string.IsNullOrEmpty(input))
            return "unknown";

        var sanitized = new System.Text.StringBuilder();
        foreach (var ch in input)
        {
            if (char.IsLetterOrDigit(ch) || ch == '_')
                sanitized.Append(ch);
            else
                sanitized.Append('_'); // Replace invalid characters with an underscore
        }
        return sanitized.ToString();
    }
}

<!-- Include Bootstrap 5 CSS and Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<!-- Custom CSS for Skeleton Loaders and Animations -->
<style>
    /* Skeleton Loader Styles */
    .skeleton {
        background-color: #e0e0e0;
        position: relative;
        overflow: hidden;
    }

        .skeleton::after {
            content: '';
            position: absolute;
            top: 0;
            left: -150px;
            height: 100%;
            width: 150px;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            animation: loading 1.5s infinite;
        }

    @@keyframes loading {
        0%

    {
        left: -150px;
    }

    50% {
        left: 100%;
    }

    100% {
        left: 100%;
    }

    }

    /* Smooth Transition for Loaded Content */
    .fade-in {
        animation: fadeIn 0.5s ease-in-out forwards;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    /* Modern Accordion Header */
    .accordion-button:not(.collapsed) {
        color: #fff;
        background-color: #0d6efd;
    }

    .accordion-button::after {
        transition: transform 0.2s ease-in-out;
    }

    .accordion-button:not(.collapsed)::after {
        transform: rotate(-180deg);
    }
</style>

<h1 class="mt-3 mb-4 text-center">üìà Stock Portfolio Screener</h1>

<div class="card shadow-sm">
    <div class="card-body">
        <form id="stockScreenerForm" method="get" action="@Url.Action("Index", "PortfolioScrener")">
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="stockSymbol" class="form-label">Stock Symbol</label>
                    <input type="text" class="form-control" id="stockSymbol" name="stockSymbol" placeholder="e.g., AAPL">
                </div>
                <div class="col-md-4">
                    <label for="companyName" class="form-label">Company Name</label>
                    <input type="text" class="form-control" id="companyName" name="companyName" placeholder="e.g., Apple Inc.">
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div id="results" class="mt-3">
    @if (Model.Stocks != null && Model.Stocks.Any())
    {
        <h2 class="mb-4">üîç Search Results</h2>
        <div class="accordion" id="stockAccordion">
            @foreach (var stock in Model.Stocks)
            {
                var sanitizedSymbol = SanitizeString(stock.Symbol);
                var seriesData = stock.ChartData?.Select(point => point.Close).ToList() ?? new List<decimal>();
                var categories = stock.ChartData?.Select(point => point.Date.ToString("MM/dd")).ToList() ?? new List<string>();

                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading@sanitizedSymbol">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@sanitizedSymbol" aria-expanded="false" aria-controls="collapse@sanitizedSymbol">
                            <i class="bi bi-bar-chart-line-fill me-2"></i> @stock.Symbol - @stock.CompanyName
                        </button>
                    </h2>
                    <div id="collapse-@sanitizedSymbol" class="accordion-collapse collapse" aria-labelledby="heading@sanitizedSymbol" data-bs-parent="#stockAccordion">
                        <div class="accordion-body mt-3">
                            <div class="row">
                                <!-- Company Details -->
                                <div class="col-md-6">
                                    <h5>üè¢ Company Details</h5>
                                    <p><strong>Sector:</strong> @stock.Sector</p>
                                    <p><strong>Industry:</strong> @stock.Industry</p>
                                    <p><strong>CEO:</strong> @stock.CEO</p>
                                    <p><strong>Description:</strong> @stock.Description</p>
                                </div>
                                <!-- Chart and Sentiment -->
                                <div class="col-md-6">
                                    <h5>üìä Stock Performance</h5>
                                    <!-- Skeleton Loader for Chart -->
                                    <div id="chart-@sanitizedSymbol" class="apex-chart skeleton"
                                         data-series='@Html.Raw(JsonConvert.SerializeObject(new[] { new { name = stock.Symbol + " Price", data = seriesData } }))'
                                         data-categories='@Html.Raw(JsonConvert.SerializeObject(categories))'
                                         style="height: 200px;">
                                    </div>
                                    <!-- Sentiment Score -->
                                    <p class="mt-3">
                                        <strong>Sentiment Score:</strong>
                                        <span class="@(stock.SentimentScore >= 0 ? "text-success" : "text-danger")">
                                            @stock.SentimentScore
                                        </span>
                                    </p>
                                </div>
                            </div>
                            <!-- News Section -->
                            <div class="mt-4">
                                <h5>üì∞ Recent News</h5>
                                @if (stock.News != null && stock.News.Any())
                                {
                                    <ul class="list-group">
                                        @foreach (var news in stock.News)
                                        {
                                            <li class="list-group-item">
                                                <a href="@news.Url" target="_blank">@news.Title</a>
                                                <br />
                                                <small class="text-muted">Source: @news.Source | Published: @news.PublishedDate.ToString("MMM dd, yyyy")</small>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <!-- Skeleton Loader for News -->
                                    <div class="skeleton" style="height: 50px;"></div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (Model.HasQuery && Model.Stocks != null && !Model.Stocks.Any())
    {
        <div class="alert alert-warning mt-4" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> No results found for the given criteria.
        </div>
    }
    else
    {
        <!-- Initial State: Optionally, show instructions or leave blank -->
    }
</div>


<!-- Include ApexCharts via CDN -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<!-- Optional: Include a Spinner Icon for AJAX Loading -->
<style>
    /* Spinner Overlay */
    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        display: none; /* Hidden by default */
    }
</style>

<div class="spinner-overlay" id="spinnerOverlay">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@section PageScripts {
    <script>
        $(document).ready(function(){
            $('#stockScreenerForm').on('submit', function(e){
                e.preventDefault();
                // Show Spinner Overlay
                $('#spinnerOverlay').show();

                $.ajax({
                    url: '@Url.Action("Index", "PortfolioScrener")',
                    type: 'GET',
                    data: $(this).serialize(),
                    success: function(data){
                        $('#results').html($(data).find('#results').html());
                        initializeCharts();
                        // Hide Spinner Overlay
                        $('#spinnerOverlay').hide();
                        // Reinitialize Bootstrap tooltips or other dynamic elements if necessary
                    },
                    error: function(){
                        alert('An error occurred while processing your request.');
                        // Hide Spinner Overlay
                        $('#spinnerOverlay').hide();
                    }
                });
            });

            // Initialize charts on page load if there are any
            if ($('.apex-chart').length > 0) {
                initializeCharts();
            }
        });

        function initializeCharts() {
            $('.apex-chart').each(function(){
                var chartDiv = $(this);
                var seriesData = chartDiv.attr('data-series');
                var categoriesData = chartDiv.attr('data-categories');

                // Remove skeleton class once data is available
                chartDiv.removeClass('skeleton');

                // Check if data-series and data-categories are defined and not empty
                if (!seriesData || seriesData.trim() === '') {
                    console.warn('Missing or empty data-series for chart:', chartDiv.attr('id'));
                    return; // Skip this chart
                }

                if (!categoriesData || categoriesData.trim() === '') {
                    console.warn('Missing or empty data-categories for chart:', chartDiv.attr('id'));
                    return; // Skip this chart
                }

                var series, categories;
                try {
                    series = JSON.parse(seriesData);
                    categories = JSON.parse(categoriesData);
                } catch (e) {
                    console.error('Invalid JSON in data attributes for chart:', chartDiv.attr('id'), e);
                    return; // Skip this chart
                }

                if (!series || !Array.isArray(series) || series.length === 0) {
                    console.warn('Invalid or empty series data for chart:', chartDiv.attr('id'));
                    return;
                }

                if (!categories || !Array.isArray(categories) || categories.length === 0) {
                    console.warn('Invalid or empty categories data for chart:', chartDiv.attr('id'));
                    return;
                }

                var options = {
                    chart: {
                        type: 'line',
                        height: 200,
                        toolbar: {
                            show: false
                        }
                    },
                    series: series,
                    xaxis: {
                        categories: categories,
                        title: {
                            text: 'Date'
                        },
                        labels: {
                            rotate: -45
                        }
                    },
                    yaxis: {
                        title: {
                            text: 'Price (USD)'
                        },
                        labels: {
                            formatter: function (val) {
                                return val.toFixed(2);
                            }
                        }
                    },
                    tooltip: {
                        y: {
                            formatter: function (val) {
                                return "$" + val.toFixed(2);
                            }
                        }
                    },
                    stroke: {
                        curve: 'smooth'
                    },
                    markers: {
                        size: 3
                    },
                    grid: {
                        borderColor: '#f1f1f1',
                    },
                    colors: ['#0d6efd'],
                    responsive: [{
                        breakpoint: 768,
                        options: {
                            chart: {
                                height: 150
                            },
                            xaxis: {
                                labels: {
                                    rotate: -90
                                }
                            }
                        }
                    }]
                };

                var chart = new ApexCharts(this, options);
                chart.render();
            });
        }
    </script>
}
