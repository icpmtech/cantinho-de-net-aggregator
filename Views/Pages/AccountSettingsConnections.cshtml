@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Account settings - Connections";
}

<!--
======================================
Account Settings / Connections (Sneat)
======================================
-->
<h4 class="py-3 mb-4">
    <span class="text-muted fw-light">Account Settings / </span> Connections
</h4>

<div class="row">
    <div class="col-md-12">
        <!-- Nav Pills -->
        <ul class="nav nav-pills flex-column flex-md-row mb-3">
            <li class="nav-item">
                <a class="nav-link" href="AccountSettings">
                    <i class="bx bx-user me-1"></i> Account
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/UserProfiles">
                    <i class="bx bx-detail me-1_5 bx-sm"></i> @Localizer["Billing &amp; Plans"]
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="AccountSettingsNotifications">
                    <i class="bx bx-bell me-1"></i> Notifications
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="javascript:void(0);">
                    <i class="bx bx-link-alt me-1"></i> Connections
                </a>
            </li>
        </ul>

        <!-- Two columns: Left = Connected Accounts, Right = Social Accounts -->
        <div class="row">
            <!-- Connected Accounts -->
            <div class="col-md-6 col-12 mb-md-0 mb-4">
                <div class="card">
                    <h5 class="card-header">Connected Accounts</h5>
                    <div class="card-body">
                        <p>Display content from your connected accounts on your site</p>

                        <!-- Google -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/google.png" alt="google" class="me-3" height="30">
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-9 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Google</h6>
                                    <small class="text-muted">Calendar and contacts</small>
                                </div>
                                <div class="col-3 text-end">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input float-end" type="checkbox" role="switch">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Slack -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/slack.png" alt="slack" class="me-3" height="30">
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-9 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Slack</h6>
                                    <small class="text-muted">Communication</small>
                                </div>
                                <div class="col-3 text-end">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input float-end" type="checkbox" role="switch" checked>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Github -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/github.png" alt="github" class="me-3" height="30">
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-9 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Github</h6>
                                    <small class="text-muted">Manage your Git repositories</small>
                                </div>
                                <div class="col-3 text-end">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input float-end" type="checkbox" role="switch">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Mailchimp -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/mailchimp.png" alt="mailchimp" class="me-3" height="30">
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-9 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Mailchimp</h6>
                                    <small class="text-muted">Email marketing service</small>
                                </div>
                                <div class="col-3 text-end">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input float-end" type="checkbox" role="switch" checked>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Asana -->
                        <div class="d-flex">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/asana.png" alt="asana" class="me-3" height="30">
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-9 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Asana</h6>
                                    <small class="text-muted">Communication</small>
                                </div>
                                <div class="col-3 text-end">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input float-end" type="checkbox" role="switch" checked>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- XTB - Trading Platform Connection -->
                        <hr class="my-3" />
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <!-- XTB icon or logo in /img/icons/brands/xtb.png -->
                                <img src="~/img/icons/brands/xtb.png" alt="xtb" class="me-3" height="30">
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-9 mb-sm-0 mb-2">
                                    <h6 class="mb-0">XTB</h6>
                                    <small class="text-muted">Trading platform connection</small>
                                </div>
                                <div class="col-3 text-end">
                                    <div class="form-check form-switch">
                                        <!-- Checking this switch calls openModal() -->
                                        <input class="form-check-input float-end" type="checkbox" role="switch"
                                               onchange="if (this.checked) { openModal(); }">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /Connections -->
                    </div>
                </div>
            </div>

            <!-- Social Accounts -->
            <div class="col-md-6 col-12">
                <div class="card">
                    <h5 class="card-header">Social Accounts</h5>
                    <div class="card-body">
                        <p>Display content from social accounts on your site</p>
                        <!-- Facebook -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/facebook.png" alt="facebook" class="me-3" height="30" />
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-8 col-sm-7 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Facebook</h6>
                                    <small class="text-muted">Not Connected</small>
                                </div>
                                <div class="col-4 col-sm-5 text-end">
                                    <button type="button" class="btn btn-icon btn-outline-secondary">
                                        <i class='bx bx-link-alt'></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- Twitter -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/twitter.png" alt="twitter" class="me-3" height="30" />
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-8 col-sm-7 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Twitter</h6>
                                    <a href='@TempData.Peek("twitterUrl")' target="_blank">&#64;@TempData.Peek("authorName")</a>
                                </div>
                                <div class="col-4 col-sm-5 text-end">
                                    <button type="button" class="btn btn-icon btn-outline-danger">
                                        <i class='bx bx-trash-alt'></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- Instagram -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/instagram.png" alt="instagram" class="me-3" height="30" />
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-8 col-sm-7 mb-sm-0 mb-2">
                                    <h6 class="mb-0">instagram</h6>
                                    <a href='@TempData.Peek("instagramUrl")' target="_blank">&#64;@TempData.Peek("authorName")</a>
                                </div>
                                <div class="col-4 col-sm-5 text-end">
                                    <button type="button" class="btn btn-icon btn-outline-danger">
                                        <i class='bx bx-trash-alt'></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- Dribbble -->
                        <div class="d-flex mb-3">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/dribbble.png" alt="dribbble" class="me-3" height="30" />
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-8 col-sm-7 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Dribbble</h6>
                                    <small class="text-muted">Not Connected</small>
                                </div>
                                <div class="col-4 col-sm-5 text-end">
                                    <button type="button" class="btn btn-icon btn-outline-secondary">
                                        <i class='bx bx-link-alt'></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- Behance -->
                        <div class="d-flex">
                            <div class="flex-shrink-0">
                                <img src="~/img/icons/brands/behance.png" alt="behance" class="me-3" height="30" />
                            </div>
                            <div class="flex-grow-1 row">
                                <div class="col-8 col-sm-7 mb-sm-0 mb-2">
                                    <h6 class="mb-0">Behance</h6>
                                    <small class="text-muted">Not Connected</small>
                                </div>
                                <div class="col-4 col-sm-5 text-end">
                                    <button type="button" class="btn btn-icon btn-outline-secondary">
                                        <i class='bx bx-link-alt'></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- /Social Accounts -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--
==========================================
XTB Trading Integration (Modal + Logic)
==========================================
-->
<div class="my-4"></div> <!-- Some extra spacing -->
<!-- Hidden fields for storing credentials -->
<input type="text" id="userId" style="display:none;" />
<input type="password" id="password" style="display:none;" />

<!-- XTB Account Summary & Trades (Optional Layout) -->
<div class="card" style="background-color:#1e1e1e; padding:1.5rem; margin-top:1rem; border-radius:8px;">
    <div id="loading" style="display:none; margin-bottom:1rem; color:#fff;">Loading...</div>

    <div id="accountCard" style="display:none; margin-bottom:1rem;">
        <h5 style="color:#ff4081;">XTB Account Summary</h5>
        <p><strong>Balance:</strong> <span id="balance">-</span> USD</p>
        <p><strong>Margin:</strong> <span id="margin">-</span></p>
        <p><strong>Free Margin:</strong> <span id="margin_free">-</span></p>
        <p><strong>Margin Level:</strong> <span id="margin_level">-</span>%</p>
        <p><strong>Equity:</strong> <span id="equity">-</span></p>
    </div>

    <button id="fetchTradesBtn" style="display:none; width:100%; margin-bottom:1rem;" class="btn btn-primary" onclick="fetchTrades()">Get Trades</button>

    <div id="tradesCard" style="display:none;">
        <h5 style="color:#ff4081;">XTB Trades</h5>
        <div id="tradesList"></div>
    </div>
</div>

<!-- XTB Login Modal -->
<div id="loginModal" class="modal" style="display:none;">
    <div class="modal-content" style="background-color:#1e1e1e; margin:10% auto; padding:20px; border-radius:8px; max-width:400px; text-align:center;">
        <span class="close" style="float:right; font-size:28px; cursor:pointer;" onclick="closeModal()">&times;</span>
        <img src="~/img/icons/brands/xtb.png" alt="XTB Logo" style="width:120px; margin-bottom:20px;" />
        <h4 style="margin-bottom:15px; color:#ff4081;">Connect to XTB</h4>
        <input type="text" id="modalUserId" placeholder="User ID" style="width:100%; padding:0.75rem; margin-bottom:0.5rem; background:#2c2c2c; border:1px solid #333; color:#fff; border-radius:6px;" />
        <input type="password" id="modalPassword" placeholder="Password" style="width:100%; padding:0.75rem; margin-bottom:0.5rem; background:#2c2c2c; border:1px solid #333; color:#fff; border-radius:6px;" />
        <button style="margin-top:1rem; width:100%;" class="btn btn-primary" onclick="modalConnect()">Login &amp; Fetch Data</button>
    </div>
</div>

<!-- Settings Drawer -->
<div id="settingsDrawer" style="position:fixed; top:50%; right:-320px; transform:translateY(-50%); background-color:#1e1e1e; padding:1.5rem; border-radius:8px 0 0 8px; width:300px; box-shadow:-8px 0 16px rgba(0,0,0,0.4); transition:right 0.3s ease; z-index:100;">
    <h5 style="color:#ff4081;">Settings</h5>

    <label for="savedUserId" style="margin-top:0.5rem;">Saved User ID:</label>
    <input type="text" id="savedUserId" readonly style="width:100%; background:#2c2c2c; border:1px solid #333; color:#fff; margin-bottom:0.5rem; border-radius:4px;" />

    <label for="savedPassword" style="margin-top:0.5rem;">Saved Password:</label>
    <input type="password" id="savedPassword" readonly style="width:100%; background:#2c2c2c; border:1px solid #333; color:#fff; margin-bottom:0.5rem; border-radius:4px;" />

    <button style="width:100%; margin-bottom:1rem;" class="btn btn-secondary" onclick="clearCredentials()">Clear Saved Credentials</button>

    <h5 style="color:#ff4081;">Log</h5>
    <div id="logDrawer" style="background:#2c2c2c; color:#fff; padding:1rem; max-height:150px; overflow-y:auto; border-radius:4px; font-size:0.85rem;"></div>

    <button style="width:100%; margin-top:1rem;" class="btn btn-secondary" onclick="toggleSettingsDrawer()">Close</button>
</div>

<!-- Settings Toggle Button -->
<button id="settingsToggleBtn" style="position:fixed; bottom:20px; right:20px; background-color:#ff4081; border:none; border-radius:50%; width:50px; height:50px; color:#fff; font-size:1.2rem; cursor:pointer; box-shadow:0 4px 8px rgba(0,0,0,0.3); transition:background-color 0.3s ease, transform 0.2s ease; z-index:101;" onclick="toggleSettingsDrawer()">&#9881;</button>

@section PageScripts {
    <script>
        let socket;
        const XTB_WS_URL = "wss://ws.xtb.com/demo"; // Real: "wss://ws.xtb.com/real"

        // Log a message to #logDrawer with a timestamp
        function log(message) {
            const logDiv = document.getElementById("logDrawer");
            const timestamp = new Date().toLocaleTimeString();
            logDiv.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            logDiv.scrollTop = logDiv.scrollHeight;
        }

        // Show/hide the loading indicator
        function showLoading(show) {
            document.getElementById("loading").style.display = show ? "block" : "none";
        }

        // Disable/enable hidden fields (no visible login form in this snippet)
        function disableForm(disable) {
            document.getElementById("userId").disabled = disable;
            document.getElementById("password").disabled = disable;
        }

        // Open the XTB login modal
        function openModal() {
            const modal = document.getElementById("loginModal");
            modal.style.display = "block";
            // Pre-fill from localStorage if available
            document.getElementById("modalUserId").value = localStorage.getItem('xtbUserId') || "";
            document.getElementById("modalPassword").value = localStorage.getItem('xtbPassword') || "";
        }

        // Close the XTB login modal
        function closeModal() {
            const modal = document.getElementById("loginModal");
            modal.style.display = "none";
        }

        // Called from modal's "Login & Fetch Data" button
        function modalConnect() {
            const userId = document.getElementById("modalUserId").value;
            const password = document.getElementById("modalPassword").value;

            if (!userId || !password) {
                alert("Please enter your User ID and Password.");
                return;
            }
            // Copy to hidden fields
            document.getElementById("userId").value = userId;
            document.getElementById("password").value = password;
            closeModal();
            connectToXTB();
        }

        // Connect to XTB WebSocket
        function connectToXTB() {
            const userId = document.getElementById("userId").value;
            const password = document.getElementById("password").value;

            if (!userId || !password) {
                alert("User ID and Password are required.");
                return;
            }

            // Store credentials
            localStorage.setItem('xtbUserId', userId);
            localStorage.setItem('xtbPassword', password);

            log("Attempting to connect to XTB WebSocket...");
            showLoading(true);
            disableForm(true);

            socket = new WebSocket(XTB_WS_URL);

            socket.onopen = function() {
                log("Connected to XTB WebSocket.");
                loginToXTB(userId, password);
            };

            socket.onmessage = function(event) {
                const response = JSON.parse(event.data);
                log("Received: " + JSON.stringify(response));

                // If login is successful, returnData should have margin/balance info
                 // If the response is a login confirmation
                  if (response.status && response.streamSessionId) {
                    log("Login successful! Fetching account data...");
                    fetchAccountSummary();
                  }
                  // If we receive account summary data
                  else if (response.returnData) {
                    updateAccountCard(response.returnData);
                    showLoading(false);
                  }
                else {
                    log("Unrecognized response: " + JSON.stringify(response));
                    alert("Unrecognized response: " + JSON.stringify(response));
                    disableForm(false);
                    showLoading(false);
                }
            };

            socket.onerror = function(error) {
                log("WebSocket error: " + error);
                alert("WebSocket error. See console for details.");
                disableForm(false);
                showLoading(false);
            };

            socket.onclose = function() {
                log("WebSocket connection closed.");
                disableForm(false);
                showLoading(false);
            };
        }

        // Send login command to XTB
        function loginToXTB(userId, password) {
            const loginCommand = {
                command: "login",
                arguments: { userId, password }
            };
            log("Sending login request...");
            socket.send(JSON.stringify(loginCommand));
        }

        // Update the account card with XTB login response data (balance, margin, etc.)
        function updateAccountCard(data) {
            document.getElementById("accountCard").style.display = "block";
            document.getElementById("balance").textContent      = data.balance       ? Number(data.balance).toFixed(2)       : "-";
            document.getElementById("margin").textContent       = data.margin        ? Number(data.margin).toFixed(2)        : "-";
            document.getElementById("margin_free").textContent  = data.margin_free   ? Number(data.margin_free).toFixed(2)   : "-";
            document.getElementById("margin_level").textContent = data.margin_level  ? Number(data.margin_level).toFixed(2)  : "-";
            document.getElementById("equity").textContent       = data.equity        ? Number(data.equity).toFixed(2)        : "-";
        }

        // Optional: fetchTrades if you want
        function fetchTrades() {
            if (!socket) return;
            const tradesCommand = { command: "getTrades" };
            log("Requesting trades data...");
            socket.send(JSON.stringify(tradesCommand));
        }

        // Optional: update trades card
        function updateTrades(/* trades */) {
            // ...
        }
             // Sends the request to fetch account margin summary.
        function fetchAccountSummary() {
          const marginCommand = {
            command: "getMarginLevel"
          };
          log("Requesting account margin data...");
          socket.send(JSON.stringify(marginCommand));
        }
        // Toggle settings drawer
        function toggleSettingsDrawer() {
            const drawer = document.getElementById("settingsDrawer");
            if (!drawer) return;
            if (drawer.style.right === "0px") {
                drawer.style.right = "-320px";
            } else {
                drawer.style.right = "0px";
                populateSettingsDrawer();
            }
        }

        // Populate settings drawer with stored credentials
        function populateSettingsDrawer() {
            document.getElementById("savedUserId").value = localStorage.getItem('xtbUserId') || '';
            document.getElementById("savedPassword").value = localStorage.getItem('xtbPassword') || '';
        }

        // Clear stored credentials
        function clearCredentials() {
            localStorage.removeItem('xtbUserId');
            localStorage.removeItem('xtbPassword');
            document.getElementById("savedUserId").value = '';
            document.getElementById("savedPassword").value = '';
            document.getElementById("userId").value = '';
            document.getElementById("password").value = '';
            alert("Credentials cleared.");
        }

        // Close modal if clicking outside .modal-content
        window.onclick = function(event) {
            const modal = document.getElementById("loginModal");
            if (event.target === modal) {
                closeModal();
            }
        };

        // On page load, auto-fill hidden fields if credentials exist
        window.onload = function() {
            const savedUserId = localStorage.getItem('xtbUserId');
            const savedPassword = localStorage.getItem('xtbPassword');
            if (savedUserId) {
                document.getElementById("userId").value = savedUserId;
            }
            if (savedPassword) {
                document.getElementById("password").value = savedPassword;
            }
        };
    </script>
}
