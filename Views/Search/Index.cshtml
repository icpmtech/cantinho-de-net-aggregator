@{
    ViewData["navbarWithOutSearch"] = true;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Interface</title>
    <link rel="stylesheet" href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .chat-container {
            display: flex;
            align-items: center;
            background-color: #fff;
            border-radius: 25px;
            box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);
            padding: 10px 15px;
            margin-bottom: 20px;
            width: 100%;
        }

            .chat-container .new-topic-button {
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: #1a73e8;
                color: #fff;
                border: none;
                border-radius: 20px;
                padding: 10px 20px;
                margin-right: 10px;
                font-weight: bold;
                cursor: pointer;
                font-size: 14px;
            }

                .chat-container .new-topic-button i {
                    margin-right: 5px;
                    font-size: 18px;
                }

            .chat-container .input-container {
                display: flex;
                align-items: center;
                flex-grow: 1;
                position: relative;
                border: 1px solid #dfe1e5;
                border-radius: 24px;
                padding: 10px 15px;
            }

            .chat-container input[type="text"] {
                border: none;
                outline: none;
                font-size: 16px;
                width: 100%;
                padding: 8px;
            }

                .chat-container input[type="text"]::placeholder {
                    color: #a0a0a0;
                }

            .chat-container .input-container .icon-group {
                display: flex;
                align-items: center;
                margin-left: 10px;
            }

                .chat-container .input-container .icon-group i {
                    font-size: 20px;
                    color: #5f6368;
                    cursor: pointer;
                    margin-left: 15px;
                }

                    .chat-container .input-container .icon-group i:hover {
                        color: #202124;
                    }

                .chat-container .input-container .icon-group .bx-send {
                    color: #1a73e8;
                }

                    .chat-container .input-container .icon-group .bx-send:hover {
                        color: #0c62d1;
                    }

        .response-container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);
            padding: 15px;
            width: 100%;
            margin-bottom: 20px;
            display: none;
        }

        .response-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

            .response-header img {
                width: 30px;
                height: 30px;
                margin-right: 10px;
            }

        .response-actions {
            display: flex;
            align-items: center;
            margin-left: auto;
        }

            .response-actions i {
                font-size: 18px;
                color: #5f6368;
                cursor: pointer;
                margin-left: 15px;
            }

                .response-actions i:hover {
                    color: #202124;
                }

        .suggestion-buttons {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 20px;
        }

            .suggestion-buttons button {
                background-color: #e8f0fe;
                border: none;
                color: #1a73e8;
                padding: 10px 20px;
                border-radius: 20px;
                margin: 5px;
                cursor: pointer;
                font-size: 14px;
            }

                .suggestion-buttons button:hover {
                    background-color: #d2e3fc;
                }

        /* Additional styles for pagination */
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

            .pagination button {
                background-color: #1a73e8;
                border: none;
                color: #fff;
                padding: 10px;
                border-radius: 5px;
                cursor: pointer;
                margin: 0 5px;
            }

                .pagination button:hover {
                    background-color: #0c62d1;
                }

            .pagination span {
                margin: 0 10px;
                font-size: 16px;
            }
    </style>
</head>

<body>
    <div class="chat-assistant-container">
        <div class="text-center chat-assistant-logo">
            <img class="rounded-circle" src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo">
            <h3>Ai-Pilot</h3>
            <p>Your everyday AI analyzer companion</p>
        </div>
        <div class="chat-container">
            <button id="actionButton" class="new-topic-button" onclick="startNewTopic()">
                <i class="bx bx-bell"></i><p id="textElement">New topic</p>
            </button>
            <div class="input-container">
                <div class="loading-spinner" id="loadingSpinner" style="display: none;">
                    <i class="bx bx-loader bx-spin"></i>
                </div>
                <input type="text" id="searchQuery" placeholder="Ask me anything..." autocomplete="off" />
                <div class="icon-group">
                    <i id="fileUploadInput" class="bx bx-image"></i>
                    <i id="voiceInput" class="bx bx-microphone"></i>
                    <i id="searchButton" class="bx bx-send"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="response-container" hidden id="responseContainer">
        <div class="response-header">
            <img src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo">
            <span>Alright, I’m ready! Thanks for the reset.</span>
            <div class="response-actions">
                <i class="bx bx-like"></i>
                <i class="bx bx-dislike"></i>
                <i class="bx bx-copy"></i>
                <i class="bx bx-download"></i>
            </div>
        </div>
    </div>

   

    <div id="suggestionContainer"></div>
    <div id="resultsContainer"></div>

    <script>
               // searchApp.js — OpenAI-powered voice search + normal search UI
        // --------------------------------------------------------------

        // ---------- DOM ELEMENTS ----------
        const searchQueryInput = document.getElementById('searchQuery');
        const searchButton      = document.getElementById('searchButton');
        const voiceInput        = document.getElementById('voiceInput');
        const fileUploadInput   = document.getElementById('fileUploadInput');
        const loadingSpinner    = document.getElementById('loadingSpinner');
        const responseContainer = document.getElementById('responseContainer');
        const actionButton      = document.getElementById('actionButton');
        const textElement       = document.getElementById('textElement');

        // ---------- INITIAL UI STATE ----------
        let debounceTimer;
        let mediaRecorder;        // MediaRecorder instance for audio capture
        let audioChunks = [];     // Captured audio buffers
        let isRecording = false;  // Toggle flag

        textElement.style.display = 'none';

        // ---------- HELPER: TOGGLE HOVER TEXT ----------
        function toggleTextVisibility () {
          textElement.style.display = textElement.style.display === 'none' ? 'block' : 'none';
        }
        actionButton.addEventListener('mouseover', toggleTextVisibility);
        actionButton.addEventListener('mouseout',  toggleTextVisibility);

        // ---------- VISIBILITY HELPERS ----------
        function showResponseHeaderOnly () { responseContainer.style.display = 'block'; }
        function showLoadingSpinner     () { loadingSpinner.style.display = 'block'; }
        function hideLoadingSpinner     () { loadingSpinner.style.display = 'none';  }

        // ---------- TOPIC RESET ----------
        function startNewTopic () {
          searchQueryInput.value = '';
          document.getElementById('resultsContainer').innerHTML = '';
          showResponseHeaderOnly();
          alert('New topic started.');
        }

        // ---------- SEARCH PIPELINE ----------
        function setQuery (query) {
          searchQueryInput.value = query;
          performSearch();
        }

        searchButton.addEventListener('click', () => {
          performSearch();
          showResponseHeaderOnly();
        });

        searchQueryInput.addEventListener('input', () => {
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(() => {
            performSearch();
            showResponseHeaderOnly();
          }, 300);
        });

        searchQueryInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            performSearch();
            showResponseHeaderOnly();
          }
        });

        // ---------- VOICE SEARCH ----------
        voiceInput.addEventListener('click', handleVoiceInput);

        async function handleVoiceInput () {
          try {
            if (!isRecording) {
              await startRecording();
            } else {
              await stopRecordingAndSearch();
            }
          } catch (err) {
            console.error(err);
            alert('Microphone error: ' + err.message);
          }
        }

        async function startRecording () {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });
          audioChunks  = [];

          mediaRecorder.ondataavailable = (e) => {
            if (e.data.size > 0) audioChunks.push(e.data);
          };

          mediaRecorder.start();
          isRecording = true;
          voiceInput.innerText = 'Stop';
        }

        async function stopRecordingAndSearch () {
          return new Promise((resolve) => {
            mediaRecorder.onstop = async () => {
              const blob      = new Blob(audioChunks, { type: 'audio/webm' });
              const formData  = new FormData();
              formData.append('file', blob, 'voice-query.webm');

              showLoadingSpinner();
              try {
                // Backend route should proxy to OpenAI Whisper
                const res   = await fetch('/api/openai/transcribe', { method: 'POST', body: formData });
                const json  = await res.json();
                const query = json.transcript?.trim();

                if (query) {
                  setQuery(query);
                } else {
                  alert('Could not transcribe audio.');
                }
              } catch (err) {
                console.error(err);
                alert('Transcription error: ' + err.message);
              } finally {
                hideLoadingSpinner();
                isRecording = false;
                voiceInput.innerText = '🎤';
                resolve();
              }
            };

            mediaRecorder.stop();
          });
        }

        // ---------- FILE UPLOAD (image search placeholder) ----------
        fileUploadInput.addEventListener('change', (e) => {
          const file = e.target.files[0];
          if (file) processImage(file);
        });

        function processImage (file) {
          const formData = new FormData();
          formData.append('file', file);

          fetch('/api/processImage', { method: 'POST', body: formData })
            .then((response) => response.json())
            .then((data)     => alert(`Image processed: ${data.result}`))
            .catch((error)   => console.error('Error:', error));
        }

        // ---------- CORE SEARCH FUNCTION ----------
        function performSearch (page = 1) {
          const query    = searchQueryInput.value;
          const pageSize = 10;

          if (!query) {
            document.getElementById('resultsContainer').innerHTML = '';
            return;
          }

          showLoadingSpinner();

          fetch(`/api/search/search?query=${encodeURIComponent(query)}&page=${page}&pageSize=${pageSize}`, {
            method:  'GET',
            headers: { 'Accept': 'application/json' }
          })
            .then((response) => response.json())
            .then((data)     => { displayResults(data); hideLoadingSpinner(); })
            .catch((error)   => { console.error('Error:', error); hideLoadingSpinner(); });
        }

        // ---------- RESULT RENDERING ----------
        function displayResults (data) {
          const resultsContainer    = document.getElementById('resultsContainer');
          const suggestionContainer = document.getElementById('suggestionContainer');

          resultsContainer.innerHTML    = '';
          suggestionContainer.innerHTML = '';

          if (data.suggestions) {
            suggestionContainer.innerHTML = `<p>Did you mean: <strong>${data.suggestions}</strong>?</p>`;
          }

          if (data.results && data.results.length > 0) {
            const resultList = document.createElement('div');

            data.results.forEach((result) => {
              const card = document.createElement('div');
              card.classList.add('result-card', 'card', 'mb-1', 'p-3');

              const title = document.createElement('h3');
              title.innerHTML = result.title;
              card.appendChild(title);

              // Highlighted snippet
              const bodyContent   = result.highlights?.title?.[0] || result.title || '';
              const truncatedBody = truncateText(bodyContent, 160);
              const body          = document.createElement('p');
              body.innerHTML      = truncatedBody;
              card.appendChild(body);

              // Tags
              const metaKeywords = Array.isArray(result.meta_keywords)
                ? result.meta_keywords.join(', ')
                : result.meta_keywords || 'Sem Tags';
              const tags = document.createElement('p');
              tags.innerHTML = `<strong>Tags:</strong> ${metaKeywords}`;
              card.appendChild(tags);

              // Link
              const link = document.createElement('a');
              link.href      = result.link || '#';
              link.innerText = 'Read more';
              link.target    = '_blank';
              card.appendChild(link);

              resultList.appendChild(card);
            });

            resultsContainer.appendChild(resultList);

            // ----- Pagination -----
            const paginationContainer = document.createElement('div');
            paginationContainer.classList.add('pagination');

            if (data.page > 1) {
              const prevButton = document.createElement('button');
              prevButton.innerText = 'Previous';
              prevButton.addEventListener('click', () => performSearch(data.page - 1));
              paginationContainer.appendChild(prevButton);
            }

            const pageInfo = document.createElement('span');
            pageInfo.innerText = `Page ${data.page} of ${data.totalPages}`;
            paginationContainer.appendChild(pageInfo);

            if (data.page < data.totalPages) {
              const nextButton = document.createElement('button');
              nextButton.innerText = 'Next';
              nextButton.addEventListener('click', () => performSearch(data.page + 1));
              paginationContainer.appendChild(nextButton);
            }

            resultsContainer.appendChild(paginationContainer);

          } else {
            resultsContainer.innerHTML = '<p>No results found.</p>';
          }
        }

        // ---------- UTILITIES ----------
        function truncateText (text = '', maxLength = 160) {
          return text.length > maxLength ? text.substring(0, maxLength) + '…' : text;
        }

    </script>
</body>

</html>
