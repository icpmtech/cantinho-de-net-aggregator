@{
    ViewData["navbarWithOutSearch"] = true;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Interface</title>
    <link rel="stylesheet" href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .chat-container {
            display: flex;
            align-items: center;
            background-color: #fff;
            border-radius: 25px;
            box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);
            padding: 10px 15px;
            margin-bottom: 20px;
            width: 100%;
        }

            .chat-container .new-topic-button {
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: #1a73e8;
                color: #fff;
                border: none;
                border-radius: 20px;
                padding: 10px 20px;
                margin-right: 10px;
                font-weight: bold;
                cursor: pointer;
                font-size: 14px;
            }

                .chat-container .new-topic-button i {
                    margin-right: 5px;
                    font-size: 18px;
                }

            .chat-container .input-container {
                display: flex;
                align-items: center;
                flex-grow: 1;
                position: relative;
                border: 1px solid #dfe1e5;
                border-radius: 24px;
                padding: 10px 15px;
            }

            .chat-container input[type="text"] {
                border: none;
                outline: none;
                font-size: 16px;
                width: 100%;
                padding: 8px;
            }

                .chat-container input[type="text"]::placeholder {
                    color: #a0a0a0;
                }

            .chat-container .input-container .icon-group {
                display: flex;
                align-items: center;
                margin-left: 10px;
            }

                .chat-container .input-container .icon-group i {
                    font-size: 20px;
                    color: #5f6368;
                    cursor: pointer;
                    margin-left: 15px;
                }

                    .chat-container .input-container .icon-group i:hover {
                        color: #202124;
                    }

                .chat-container .input-container .icon-group .bx-send {
                    color: #1a73e8;
                }

                    .chat-container .input-container .icon-group .bx-send:hover {
                        color: #0c62d1;
                    }

        .response-container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);
            padding: 15px;
            width: 100%;
            margin-bottom: 20px;
            display: none;
        }

        .response-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

            .response-header img {
                width: 30px;
                height: 30px;
                margin-right: 10px;
            }

        .response-actions {
            display: flex;
            align-items: center;
            margin-left: auto;
        }

            .response-actions i {
                font-size: 18px;
                color: #5f6368;
                cursor: pointer;
                margin-left: 15px;
            }

                .response-actions i:hover {
                    color: #202124;
                }

        .suggestion-buttons {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 20px;
        }

            .suggestion-buttons button {
                background-color: #e8f0fe;
                border: none;
                color: #1a73e8;
                padding: 10px 20px;
                border-radius: 20px;
                margin: 5px;
                cursor: pointer;
                font-size: 14px;
            }

                .suggestion-buttons button:hover {
                    background-color: #d2e3fc;
                }

        /* Additional styles for pagination */
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

            .pagination button {
                background-color: #1a73e8;
                border: none;
                color: #fff;
                padding: 10px;
                border-radius: 5px;
                cursor: pointer;
                margin: 0 5px;
            }

                .pagination button:hover {
                    background-color: #0c62d1;
                }

            .pagination span {
                margin: 0 10px;
                font-size: 16px;
            }
    </style>
</head>

<body>
    <div class="chat-assistant-container">
        <div class="text-center chat-assistant-logo">
            <img class="rounded-circle" src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo">
            <h3>Ai-Pilot</h3>
            <p>Your everyday AI analyzer companion</p>
        </div>
        <div class="chat-container">
            <button id="actionButton" class="new-topic-button" onclick="startNewTopic()">
                <i class="bx bx-bell"></i><p id="textElement">New topic</p>
            </button>
            <div class="input-container">
                <div class="loading-spinner" id="loadingSpinner" style="display: none;">
                    <i class="bx bx-loader bx-spin"></i>
                </div>
                <input type="text" id="searchQuery" placeholder="Ask me anything..." autocomplete="off" />
                <div class="icon-group">
                    <i id="fileUploadInput" class="bx bx-image"></i>
                    <i id="voiceInput" class="bx bx-microphone"></i>
                    <i id="searchButton" class="bx bx-send"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="response-container" id="responseContainer">
        <div class="response-header">
            <img src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo">
            <span>Alright, Iâ€™m ready! Thanks for the reset. What should we learn about?</span>
            <div class="response-actions">
                <i class="bx bx-like"></i>
                <i class="bx bx-dislike"></i>
                <i class="bx bx-copy"></i>
                <i class="bx bx-download"></i>
            </div>
        </div>
    </div>

    <div class="suggestion-buttons">
        <button onclick="setQuery('How does Ai-Pilot work?')">How does Ai-Pilot work?</button>
        <button onclick="setQuery('How do I bake a cake?')">How do I bake a cake?</button>
        <button onclick="setQuery('What\'s the weather?')">What's the weather?</button>
        <button onclick="setQuery('Teach me a new word')">Teach me a new word</button>
    </div>

    <div id="suggestionContainer"></div>
    <div id="resultsContainer"></div>

    <script>
        const searchQueryInput = document.getElementById('searchQuery');
        const searchButton = document.getElementById('searchButton');
        const voiceInput = document.getElementById('voiceInput');
        const fileUploadInput = document.getElementById('fileUploadInput');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const responseContainer = document.getElementById('responseContainer');
        let debounceTimer;

        const actionButton = document.getElementById('actionButton');
        const textElement = document.getElementById('textElement');

        textElement.style.display = 'none';

        function toggleTextVisibility() {
            textElement.style.display = textElement.style.display === 'none' ? 'block' : 'none';
        }

        actionButton.addEventListener('mouseover', toggleTextVisibility);
        actionButton.addEventListener('mouseout', toggleTextVisibility);

        function showResponseHeaderOnly() {
            responseContainer.style.display = 'block';
        }

        function startNewTopic() {
            searchQueryInput.value = '';
            document.getElementById('resultsContainer').innerHTML = '';
            showResponseHeaderOnly();
            alert('New topic started.');
        }

        function setQuery(query) {
            searchQueryInput.value = query;
            performSearch();
        }

        searchButton.addEventListener('click', () => {
            performSearch();
            showResponseHeaderOnly();
        });

        searchQueryInput.addEventListener('input', () => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                performSearch();
                showResponseHeaderOnly();
            }, 300);
        });

        searchQueryInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                performSearch();
                showResponseHeaderOnly();
            }
        });

        voiceInput.addEventListener('click', () => {
            alert('Voice search not yet implemented.');
        });

        fileUploadInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                processImage(file);
            }
        });

        function processImage(file) {
            const formData = new FormData();
            formData.append('file', file);

            fetch('/api/processImage', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    alert(`Image processed: ${data.result}`);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function performSearch(page = 1) {
            const query = searchQueryInput.value;
            const pageSize = 10;

            if (!query) {
                document.getElementById('resultsContainer').innerHTML = '';
                return;
            }

            showLoadingSpinner();

            fetch(`/api/search/search?query=${encodeURIComponent(query)}&page=${page}&pageSize=${pageSize}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    displayResults(data);
                    hideLoadingSpinner();
                })
                .catch(error => {
                    console.error('Error:', error);
                    hideLoadingSpinner();
                });
        }

        function showLoadingSpinner() {
            loadingSpinner.style.display = 'block';
        }

        function hideLoadingSpinner() {
            loadingSpinner.style.display = 'none';
        }

        function displayResults(data) {
            const resultsContainer = document.getElementById('resultsContainer');
            const suggestionContainer = document.getElementById('suggestionContainer');

            resultsContainer.innerHTML = '';
            suggestionContainer.innerHTML = '';

            if (data.suggestions) {
                suggestionContainer.innerHTML = `<p>Did you mean: <strong>${data.suggestions}</strong>?</p>`;
            }

            if (data.results && data.results.length > 0) {
                const resultList = document.createElement('div');

                data.results.forEach(result => {
                    const card = document.createElement('div');
                    card.classList.add('result-card', 'card', 'mb-1', 'p-3');

                    const title = document.createElement('h3');
                    title.innerHTML = result.title;

                    const bodyContent = result.highlights?.body?.[0] || result.body;
                    const truncatedBody = truncateText(bodyContent, 200);

                    const body = document.createElement('p');
                    body.innerHTML = truncatedBody;

                    const tags = document.createElement('p');
                    tags.innerHTML = `<strong>Tags:</strong> ${result.tags}`;

                    const link = document.createElement('a');
                    link.href = result.url;
                    link.innerText = 'Read more';

                    card.appendChild(title);
                    card.appendChild(body);
                    card.appendChild(tags);
                    card.appendChild(link);

                    resultList.appendChild(card);
                });

                resultsContainer.appendChild(resultList);

                // Pagination
                const paginationContainer = document.createElement('div');
                paginationContainer.classList.add('pagination');

                if (data.currentPage > 1) {
                    const prevButton = document.createElement('button');
                    prevButton.innerText = 'Previous';
                    prevButton.addEventListener('click', () => performSearch(data.currentPage - 1));
                    paginationContainer.appendChild(prevButton);
                }

                const pageInfo = document.createElement('span');
                pageInfo.innerText = `Page ${data.currentPage} of ${data.totalPages}`;
                paginationContainer.appendChild(pageInfo);

                if (data.currentPage < data.totalPages) {
                    const nextButton = document.createElement('button');
                    nextButton.innerText = 'Next';
                    nextButton.addEventListener('click', () => performSearch(data.currentPage + 1));
                    paginationContainer.appendChild(nextButton);
                }

                resultsContainer.appendChild(paginationContainer);
            } else {
                resultsContainer.innerHTML = '<p>No results found.</p>';
            }
        }

        function truncateText(text, maxLength) {
            if (!text) return '';
            return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
        }
    </script>
</body>

</html>
