@{
    ViewData["navbarWithOutSearch"] = true;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI-Pilot Chat Interface</title>
    <link rel="stylesheet" href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" />
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            color: #333;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0;
        }

        .chat-assistant-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
        }

        .chat-assistant-logo {
            text-align: center;
            margin-bottom: 20px;
        }

            .chat-assistant-logo img {
                width: 72px;
                height: 72px;
                margin-bottom: 10px;
            }

        .chat-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 15px 20px;
            width: 100%;
            margin-bottom: 20px;
            transition: transform 0.2s ease-in-out;
        }

            .chat-container:hover {
                transform: scale(1.02);
            }

            .chat-container .new-topic-button {
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: #1a73e8;
                color: #fff;
                border: none;
                border-radius: 20px;
                padding: 10px 20px;
                margin-right: 10px;
                font-weight: bold;
                cursor: pointer;
                font-size: 14px;
            }

                .chat-container .new-topic-button i {
                    margin-right: 5px;
                    font-size: 18px;
                }

            .chat-container .input-container {
                display: flex;
                align-items: center;
                flex-grow: 1;
                position: relative;
                border: 1px solid #dfe1e5;
                border-radius: 24px;
                padding: 10px 15px;
                background-color: #f8f9fa;
            }

            .chat-container input[type="text"] {
                border: none;
                outline: none;
                font-size: 16px;
                width: 100%;
                padding: 8px;
                background-color: transparent;
            }

                .chat-container input[type="text"]::placeholder {
                    color: #a0a0a0;
                }

            .chat-container .input-container .icon-group {
                display: flex;
                align-items: center;
                margin-left: 10px;
            }

                .chat-container .input-container .icon-group i {
                    font-size: 20px;
                    color: #5f6368;
                    cursor: pointer;
                    margin-left: 15px;
                    transition: color 0.2s;
                }

                    .chat-container .input-container .icon-group i:hover {
                        color: #202124;
                    }

                .chat-container .input-container .icon-group .bx-send {
                    color: #1a73e8;
                }

                    .chat-container .input-container .icon-group .bx-send:hover {
                        color: #0c62d1;
                    }

        .response-container {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 1px 6px rgba(32, 33, 36, 0.28);
            padding: 15px;
            width: 100%;
            margin-bottom: 20px;
            display: none;
        }

        .response-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

            .response-header img {
                width: 30px;
                height: 30px;
                margin-right: 10px;
            }

        .response-actions {
            display: flex;
            align-items: center;
            margin-left: auto;
        }

            .response-actions i {
                font-size: 18px;
                color: #5f6368;
                cursor: pointer;
                margin-left: 15px;
                transition: color 0.2s;
            }

                .response-actions i:hover {
                    color: #202124;
                }

        .suggestion-buttons {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 20px;
        }

            .suggestion-buttons button {
                background-color: #e3f2fd;
                border: 1px solid #90caf9;
                color: #1e88e5;
                padding: 10px 16px;
                border-radius: 25px;
                margin: 5px;
                cursor: pointer;
                font-size: 14px;
                transition: background-color 0.2s;
            }

                .suggestion-buttons button:hover {
                    background-color: #bbdefb;
                }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

            .pagination button {
                background-color: #1a73e8;
                border: none;
                color: #fff;
                padding: 10px;
                border-radius: 5px;
                cursor: pointer;
                margin: 0 5px;
                transition: background-color 0.2s;
            }

                .pagination button:hover {
                    background-color: #0c62d1;
                }

            .pagination span {
                margin: 0 10px;
                font-size: 16px;
            }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            display: none;
        }

            .loading-overlay.show {
                display: flex;
            }

            .loading-overlay .spinner {
                font-size: 48px;
                color: #1a73e8;
            }

        .chat-message {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 10px;
            background-color: #f1f1f1;
            max-width: 80%;
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            position: relative;
        }

            .chat-message.user {
                background-color: #d4edda;
                align-self: flex-end;
            }

            .chat-message.ai {
                background-color: #e2e3e5;
                align-self: flex-start;
            }

        .chat-history {
            display: flex;
            flex-direction: column;
            max-height: 400px;
            overflow-y: auto;
            width: 100%;
        }

        .save-message-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 5px;
            font-size: 12px;
        }

            .save-message-button:hover {
                background-color: #45a049;
            }

        .continue-generating-button {
            background-color: #ff9800;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            margin-top: 5px;
            align-self: flex-start;
        }

            .continue-generating-button:hover {
                background-color: #e68900;
            }

        .saved-messages-container {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 20px;
            width: 100%;
            margin-top: 20px;
        }

        .saved-messages-list {
            display: flex;
            flex-direction: column;
            max-height: 300px;
            overflow-y: auto;
        }

        .saved-message-item {
            background-color: #f1f1f1;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            position: relative;
        }

        .delete-message-button {
            background-color: #f44336;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            position: absolute;
            right: 10px;
            top: 10px;
            font-size: 12px;
        }

            .delete-message-button:hover {
                background-color: #d32f2f;
            }
    </style>
</head>

<body>
    <div class="chat-assistant-container">
        <div class="text-center chat-assistant-logo">
            <img class="rounded-circle" src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo">
            <h3>Ai-Pilot</h3>
            <p>Your everyday AI analyzer companion</p>
        </div>
        <div class="chat-container">
            <button id="actionButton" class="mb-1 new-topic-button" onclick="startNewTopic()">
                <i class="bx bx-bell"></i><p id="textElement">New topic</p>
            </button>
            <button id="loadSavedMessages" class="mb-1 new-topic-button" onclick="loadSavedMessages()">
                <i class="bx bx-folder-open"></i><p>Load Saved Messages</p>
            </button>
            <div class="input-container">
                <div class="loading-spinner" id="loadingSpinner" style="display: none;">
                    <i class="bx bx-loader bx-spin"></i>
                </div>
                <input type="text" id="searchQuery" placeholder="Ask me anything..." autocomplete="off" />
                <div class="icon-group">
                    <i id="fileUploadInput" class="bx bx-image"></i>
                    <i id="voiceInput" class="bx bx-microphone"></i>
                    <i id="searchButton" class="bx bx-send"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="response-container" id="responseContainer">
        <div class="response-header">
            <img src="~/icons/marketanalytic_hub_icon_72x72.png" alt="Assistant Logo">
            <span id="responseText">Alright, I’m ready! Thanks for the reset. What should we learn about?</span>
            <div class="response-actions">
                <i class="bx bx-like"></i>
                <i class="bx bx-dislike"></i>
                <i class="bx bx-copy"></i>
                <i class="bx bx-download"></i>
            </div>
        </div>
    </div>

    <div class="suggestion-buttons">
        <button onclick="setQuery('How does Ai-Pilot work?')">How does Ai-Pilot work?</button>
        <button onclick="setQuery('How do I bake a cake?')">How do I bake a cake?</button>
        <button onclick="setQuery('What\'s the weather?')">What's the weather?</button>
        <button onclick="setQuery('Teach me a new word')">Teach me a new word</button>
    </div>

    <div id="chatHistory" class="chat-history"></div>

    <div id="savedMessagesContainer" class="saved-messages-container" style="display: none;">
        <h3>Saved Messages</h3>
        <div id="savedMessagesList" class="saved-messages-list"></div>
    </div>

    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner">
            <i class="bx bx-loader bx-spin"></i>
        </div>
    </div>

    <script>
        const searchQueryInput = document.getElementById('searchQuery');
        const searchButton = document.getElementById('searchButton');
        const voiceInput = document.getElementById('voiceInput');
        const fileUploadInput = document.getElementById('fileUploadInput');
        const loadingOverlay = document.getElementById('loadingOverlay');
        const chatHistory = document.getElementById('chatHistory');
        const responseText = document.getElementById('responseText');
        let debounceTimer;

        const actionButton = document.getElementById('actionButton');
        const textElement = document.getElementById('textElement');

        textElement.style.display = 'none';

        function toggleTextVisibility() {
            textElement.style.display = textElement.style.display === 'none' ? 'block' : 'none';
        }

        actionButton.addEventListener('mouseover', toggleTextVisibility);
        actionButton.addEventListener('mouseout', toggleTextVisibility);

        function showResponseHeaderOnly() {
            responseContainer.style.display = 'block';
        }

        function startNewTopic() {
            searchQueryInput.value = '';
            chatHistory.innerHTML = '';
            showResponseHeaderOnly();
            alert('New topic started.');
        }

        function setQuery(query) {
            searchQueryInput.value = query;
            performSearch();
        }

        searchButton.addEventListener('click', () => {
            performSearch();
            showResponseHeaderOnly();
        });

        searchQueryInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                performSearch();
                showResponseHeaderOnly();
            }
        });

        voiceInput.addEventListener('click', () => {
            alert('Voice search not yet implemented.');
        });

        fileUploadInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                processImage(file);
            }
        });

        function processImage(file) {
            const formData = new FormData();
            formData.append('file', file);

            fetch('/api/processImage', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    alert(`Image processed: ${data.result}`);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        async function performSearch() {
            const query = searchQueryInput.value;

            if (!query) {
                return;
            }

            addMessageToChat(query, 'user');

            showLoadingOverlay();

            try {
                const response = await fetch(`/api/openai/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query })
                });

                const data = await response.json();
                addMessageToChat(data.response, 'ai');
            } catch (error) {
                console.error('Error:', error);
                addMessageToChat('Sorry, something went wrong. Please try again later.', 'ai');
            } finally {
                hideLoadingOverlay();
            }
        }

        async function continueGenerating(query) {
            showLoadingOverlay();

            try {
                const response = await fetch(`/api/openai/chat`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query })
                });

                const data = await response.json();
                addMessageToChat(data.response, 'ai');
            } catch (error) {
                console.error('Error:', error);
                addMessageToChat('Sorry, something went wrong. Please try again later.', 'ai');
            } finally {
                hideLoadingOverlay();
            }
        }

        function showLoadingOverlay() {
            loadingOverlay.classList.add('show');
        }

        function hideLoadingOverlay() {
            loadingOverlay.classList.remove('show');
        }

        function addMessageToChat(message, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('chat-message', sender);

            const messageText = document.createElement('p');
            messageText.textContent = message;

            const saveButton = document.createElement('button');
            saveButton.textContent = 'Save';
            saveButton.classList.add('save-message-button');
            saveButton.onclick = () => saveMessageAiPilot(message);

            messageElement.appendChild(messageText);
            messageElement.appendChild(saveButton);

            if (sender === 'ai') {
                const continueButton = document.createElement('button');
                continueButton.textContent = 'Continue Generating';
                continueButton.classList.add('continue-generating-button');
                continueButton.onclick = () => continueGenerating(message);

                messageElement.appendChild(continueButton);
            }

            chatHistory.appendChild(messageElement);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        async function saveMessageAiPilot(content) {
            const response = await fetch('/api/Chat/saveMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ content: content })
            });

            if (response.ok) {
                const data = await response.json();
                alert(`Message saved at: ${data.filePath}`);
            } else {
                alert('Failed to save the message.');
            }
        }

        async function loadSavedMessages() {
            try {
                const response = await fetch('/api/Chat/getSavedMessages');
                if (response.ok) {
                    const messages = await response.json();
                    displaySavedMessages(messages);
                } else {
                    alert('Failed to load saved messages.');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function deleteSavedMessage(fileName) {
            try {
                const response = await fetch('/api/Chat/deleteSavedMessage', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(fileName)
                });

                if (response.ok) {
                    alert('Message deleted successfully');
                    loadSavedMessages(); // Refresh the list after deletion
                } else {
                    alert('Failed to delete the message.');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function displaySavedMessages(messages) {
            const savedMessagesContainer = document.getElementById('savedMessagesContainer');
            const savedMessagesList = document.getElementById('savedMessagesList');
            savedMessagesList.innerHTML = '';

            if (messages.length === 0) {
                savedMessagesList.innerHTML = '<p>No saved messages found.</p>';
            } else {
                messages.forEach((message, index) => {
                    const messageItem = document.createElement('div');
                    messageItem.className = 'saved-message-item';
                    messageItem.textContent = message.content;

                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.classList.add('delete-message-button');
                    deleteButton.onclick = () => deleteSavedMessage(getFileNameFromMessage(message));

                    messageItem.appendChild(deleteButton);
                    savedMessagesList.appendChild(messageItem);
                });
            }

            savedMessagesContainer.style.display = 'block';
        }

        function getFileNameFromMessage(message) {
            return message.fileName;
        }
    </script>
</body>

</html>
