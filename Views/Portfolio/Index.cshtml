@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Portfolio Manager";
}

<h4 class="py-3 mb-4">
    <span class="text-muted fw-light">@Localizer["Portfolio Manager"] /</span> @Localizer["Portfolios"]
</h4>

<div class="row">
    <div class="col-lg-12 col-md-12 order-1">
        <div class="row">
            <div class="col-lg-6 col-md-12 col-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <div class="card-title d-flex align-items-start justify-content-between">
                            <div class="avatar flex-shrink-0">
                                <img src="~/img/icons/unicons/chart-success.png" alt="chart success" class="rounded">
                            </div>
                            <div class="dropdown">
                                <button class="btn p-0" type="button" id="cardOpt3" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>
                                <div class="dropdown-menu dropdown-menu-end" aria-labelledby="cardOpt3">
                                    <a class="dropdown-item" href="javascript:void(0);">View More</a>
                                    <a class="dropdown-item" href="javascript:void(0);">Delete</a>
                                </div>
                            </div>
                        </div>
                        <span class="fw-medium d-block mb-1">Profit</span>
                        <h3 id="profit" class="card-title mb-2">$12,628</h3>
                        <small class="text-success fw-medium"><i class='bx bx-up-arrow-alt'></i> +72.80%</small>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-12 col-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <div class="card-title d-flex align-items-start justify-content-between">
                            <div class="avatar flex-shrink-0">
                                <img src="~/img/icons/unicons/wallet-info.png" alt="Credit Card" class="rounded">
                            </div>
                            <div class="dropdown">
                                <button class="btn p-0" type="button" id="cardOpt6" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>
                                <div class="dropdown-menu dropdown-menu-end" aria-labelledby="cardOpt6">
                                    <a class="dropdown-item" href="javascript:void(0);">View More</a>
                                    <a class="dropdown-item" href="javascript:void(0);">Delete</a>
                                </div>
                            </div>
                        </div>
                        <span>Dividends</span>
                        <h3 id="dividends" class="card-title text-nowrap mb-1">$4,679</h3>
                        <small class="text-success fw-medium"><i class='bx bx-up-arrow-alt'></i> +28.42%</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-pills d-flex  justify-content-between flex-md-row mb-3">
            <li class="nav-item"><button class="btn btn-primary" onclick="showAddPortfolioModal()">Add a new Portfolio</button></li>
            <li class="nav-item"><button class="btn btn-success" onclick="exportPortfolios('xlsx')">Export Portfolios (Excel)</button></li>
            <li class="nav-item"><button class="btn btn-success" onclick="exportPortfolios('csv')">Export Portfolios (CSV)</button></li>
            <li class="nav-item">
                <input type="file" id="importFile" style="display: none;" accept=".xlsx,.csv" onchange="importPortfolios(event)">
                <button class="btn btn-secondary" onclick="document.getElementById('importFile').click()">Import Portfolios</button>
            </li>
            <li class="nav-item">
                <select id="chartTypeSelect" class="form-select" onchange="changeChartType(event)">
                    <option value="bar" selected>Bar</option>
                    <option value="line">Line</option>
                    <option value="candlestick">Candlestick</option>
                </select>
            </li>
        </ul>
        <div class="card mb-4">
            <div class="card-body">
                <!-- Loading Spinner -->
                <div id="loadingSpinner" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <!-- Portfolio List -->
                <div id="portfolioList" style="display: none;">
                    <!-- Portfolio list will be rendered here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Portfolio Modal -->
<div id="addPortfolioModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Portfolio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addPortfolioForm">
                    <div class="form-group">
                        <label for="portfolioName">Name</label>
                        <input type="text" class="form-control" id="portfolioName" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Portfolio Modal -->
<div id="editPortfolioModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Portfolio</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editPortfolioForm">
                    <input type="hidden" id="editPortfolioId">
                    <div class="form-group">
                        <label for="editPortfolioName">Name</label>
                        <input type="text" class="form-control" id="editPortfolioName" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add Portfolio Item Modal -->
<div id="addPortfolioItemModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Portfolio Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addPortfolioItemForm">
                    <input type="hidden" id="portfolioId" name="portfolioId">
                    <div class="form-group">
                        <label for="itemSymbol">Symbol</label>
                        <select class="form-control" id="itemSymbol" required>
                            <option value="" disabled selected>Select a symbol</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="itemQuantity">Quantity</label>
                        <input type="number" class="form-control" id="itemQuantity" required>
                    </div>
                    <div class="form-group">
                        <label for="itemPurchasePrice">Purchase Price</label>
                        <input type="number" class="form-control" id="itemPurchasePrice" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="itemPurchaseDate">Purchase Date</label>
                        <input type="date" class="form-control" id="itemPurchaseDate" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Portfolio Item Modal -->
<div id="editPortfolioItemModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Portfolio Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editPortfolioItemForm">
                    <input type="hidden" id="portfolioeditPortfolioItemId" name="portfolioeditPortfolioItemId">
                    <input type="hidden" id="editPortfolioItemId" name="editPortfolioItemId">
                    <div class="form-group">
                        <label for="editItemSymbol">Symbol</label>
                        <select class="form-control" id="editItemSymbol" required>
                            <option value="" disabled selected>Select a symbol</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editItemQuantity">Quantity</label>
                        <input type="number" class="form-control" id="editItemQuantity" required>
                    </div>
                    <div class="form-group">
                        <label for="editItemPurchasePrice">Purchase Price</label>
                        <input type="number" class="form-control" id="editItemPurchasePrice" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="editItemPurchaseDate">Purchase Date</label>
                        <input type="date" class="form-control" id="editItemPurchaseDate" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        loadPortfolios();
        loadSymbols();
    });
    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });
    }
    function changeChartType(event) {
        const chartType = event.target.value;
        const portfolios = JSON.parse(document.getElementById('portfolioList').dataset.portfolios);
        renderPortfolioList(portfolios, chartType);
    }
    async function loadPortfolios() {
        // Show the loading spinner
        document.getElementById('loadingSpinner').style.display = 'block';
        document.getElementById('portfolioList').style.display = 'none';

        const response = await fetch('/api/Portfolio', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const portfolios = await response.json();
            renderPortfolioList(portfolios);
        } else {
            alert('Failed to load portfolios');
        }

        // Hide the loading spinner and show the portfolio list
        document.getElementById('loadingSpinner').style.display = 'none';
        document.getElementById('portfolioList').style.display = 'block';
    }

    async function loadSymbols() {
        const response = await fetch('/api/Symbols', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const symbols = await response.json();
            const symbolSelect = document.getElementById('itemSymbol');
            const editSymbolSelect = document.getElementById('editItemSymbol');
            symbols.forEach(symbol => {
                const option = document.createElement('option');
                option.value = symbol;
                option.text = symbol;
                symbolSelect.appendChild(option);

                const editOption = document.createElement('option');
                editOption.value = symbol;
                editOption.text = symbol;
                editSymbolSelect.appendChild(editOption);
            });
        } else {
            alert('Failed to load symbols');
        }
    }

    function renderPortfolioList(portfolios, chartType = 'bar') {
        const portfolioList = document.getElementById('portfolioList');
        portfolioList.dataset.portfolios = JSON.stringify(portfolios); // Save portfolios data for re-rendering
        portfolioList.innerHTML = '';
        portfolios.forEach(portfolio => {
            const portfolioDiv = document.createElement('div');

            portfolioDiv.innerHTML = `
                        <h3 class="card-title">${portfolio.name}</h3>
                        <div class="row">
                            <div class="col-lg-12 col-md-12 order-1">
                                <div class="row">
                                    <div class="col-lg-6 col-md-12 col-6 mb-4">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="card-title d-flex align-items-start justify-content-between">
                                                    <div class="avatar flex-shrink-0">
                                                        <img src="/img/icons/unicons/chart-success.png" alt="chart success" class="rounded">
                                                    </div>
                                                    <div class="dropdown">
                                                        <button class="btn p-0" type="button" id="cardOpt3" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                            <i class="bx bx-dots-vertical-rounded"></i>
                                                        </button>
                                                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="cardOpt3">
                                                            <a class="dropdown-item" href="javascript:void(0);">View More</a>
                                                            <a class="dropdown-item" href="javascript:showAddPortfolioItemModal(${portfolio.id});">Add Operations</a>
                                                            <a class="dropdown-item" href="javascript:showEditPortfolioModal(${portfolio.id}, '${portfolio.name}');">Edit Portfolio</a>
                                                            <a class="dropdown-item" href="javascript:deletePortfolio(${portfolio.id});">Delete</a>
                                                        </div>
                                                    </div>
                                                </div>
                                                <span class="fw-medium d-block mb-1">Total Investment</span>
                                                <h3 class="card-title mb-2">€${portfolio.totalInvestment.toFixed(3)}</h3>
                                                <small class="text-success fw-medium"><i class='bx bx-up-arrow-alt'></i> +72.80%</small>
                                                <canvas id="chart-${portfolio.id}"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-12 col-6 mb-4">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="card-title d-flex align-items-start justify-content-between">
                                                    <div class="avatar flex-shrink-0">
                                                        <img src="/img/icons/unicons/wallet-info.png" alt="Credit Card" class="rounded">
                                                    </div>
                                                    <div class="dropdown">
                                                        <button class="btn p-0" type="button" id="cardOpt6" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                            <i class="bx bx-dots-vertical-rounded"></i>
                                                        </button>
                                                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="cardOpt6">
                                                            <a class="dropdown-item" href="javascript:void(0);">View More</a>
                                                            <a class="dropdown-item" href="javascript:void(0);">Delete</a>
                                                        </div>
                                                    </div>
                                                </div>
                                                <span>Current Market Value</span>
                                                <h3 class="card-title text-nowrap mb-1">€${portfolio.currentMarketValue.toFixed(3)}</h3>
                                                <small class="text-success fw-medium"><i class='bx bx-up-arrow-alt'></i> +28.42%</small>
                                                <ul class="list-group list-group-flush">
                                                    ${portfolio.items.map(item => `
                                                           <li class="list-group-item">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <p><strong>Symbol:</strong> ${item.symbol}</p>
                        <p><strong>Quantity:</strong> ${item.quantity}</p>
                        <p><strong>Current Price:</strong> ${item.currentPrice}</p>
                        <p><strong>Change:</strong> ${item.change}</p>
                        <p>
                            <strong>Percent Change:</strong>
                            <small class="${item.percentChange > 0 ? 'text-success' : 'text-danger'} fw-medium">
                                <i class='bx ${item.percentChange > 0 ? 'bx-up-arrow-alt' : 'bx-down-arrow-alt'}'></i> ${item.percentChange}%
                            </small>
                        </p>
                        <p><strong>High Price:</strong> ${item.highPrice}</p>
                        <p><strong>Low Price:</strong> ${item.lowPrice}</p>
                        <p><strong>Open Price:</strong> ${item.openPrice}</p>
                        <p><strong>Previous Close Price:</strong> ${item.previousClosePrice}</p>
                        <p><strong>Purchase Date:</strong> ${formatDate(item.purchaseDate)}</p>
                    </div>
                    <div class="d-flex flex-column justify-content-start">
                        <button class="btn btn-primary btn-sm mb-1" onclick="showEditPortfolioItemModal(${item.id})">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deletePortfolioItem(${item.id})">Delete</button>
                    </div>
                  <div class="mt-3">
                                                        <div id="candlestick-chart-${item.id}" class="img-fluid"></div>
                                                    </div>
                </div>
            </li>
                                                    `).join('')}
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
            portfolioList.appendChild(portfolioDiv);
            renderChart(portfolio, chartType);
            portfolio.items.forEach(item => renderCandlestickChart(item.id, item.symbol, chartType));
        });
    }
    async function renderCandlestickChart(itemId, symbol, chartType = 'candlestick') {
        const apiUrl = `/api/Portfolio/stock-candlestick-data?symbol=${symbol}`;

        const response = await fetch(apiUrl);
        if (response.ok) {
            const data = await response.json();
            let seriesData;

            if (chartType === 'candlestick') {
                seriesData = data.map(item => ({
                    x: new Date(item.date),
                    y: [item.open, item.high, item.low, item.close]
                }));
            } else {
                seriesData = data.map(item => ({
                    x: new Date(item.date),
                    y: item.close
                }));
            }

            let options = {
                series: [{
                    data: seriesData
                }],
                chart: {
                    type: chartType,
                    height: 350
                },
                title: {
                    text: symbol,
                    align: 'left'
                },
                xaxis: {
                    type: 'datetime'
                },
                yaxis: {
                    tooltip: {
                        enabled: true
                    }
                }
            };

            // Adjust options for bar and line charts
            if (chartType === 'bar') {
                options.plotOptions = {
                    bar: {
                        horizontal: false,
                    }
                };
                options.dataLabels = {
                    enabled: false
                };
            } else if (chartType === 'line') {
                options.stroke = {
                    curve: 'smooth'
                };
                options.dataLabels = {
                    enabled: false
                };
            }

            var chart = new ApexCharts(document.querySelector(`#candlestick-chart-${itemId}`), options);
            chart.render();
        } else {
            console.error('Error fetching data:', response.statusText);
        }
    }
    function renderChart(portfolio, chartType) {
        const ctx = document.getElementById(`chart-${portfolio.id}`).getContext('2d');

        if (chartType === 'candlestick') {
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: portfolio.items.map(item => item.symbol),
                    datasets: [{
                        label: 'Current Market Value',
                        data: portfolio.items.map(item => item.currentMarketValue),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }, {
                        label: 'Total Investment',
                        data: portfolio.items.map(item => item.totalInvestment),
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        } else {
            new Chart(ctx, {
                type: chartType,
                data: {
                    labels: portfolio.items.map(item => item.symbol),
                    datasets: [{
                        label: 'Current Market Value',
                        data: portfolio.items.map(item => item.currentMarketValue),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }, {
                        label: 'Total Investment',
                        data: portfolio.items.map(item => item.totalInvestment),
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
    }


    async function exportPortfolios(fileType) {
        const response = await fetch(`/api/Portfolio/Export?fileType=${fileType}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = fileType === 'xlsx' ? 'portfolios.xlsx' : 'portfolios.csv';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        } else {
            alert('Failed to export portfolios');
        }
    }

    async function importPortfolios(event) {
        const file = event.target.files[0];
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/api/Portfolio/Import', {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            loadPortfolios();
        } else {
            alert('Failed to import portfolios');
        }
    }
</script>
