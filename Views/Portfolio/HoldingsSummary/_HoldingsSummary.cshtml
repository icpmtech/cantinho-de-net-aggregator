@{
    Layout = null;
}
<div class="holdings-summary-container">
    <!-- Header Section -->
    <div class="header-section">
        <div class="main-value">
            <span id="mainValueDisplay">€0</span>
        </div>
        <div class="sub-label" id="marketValueDisplay">
            Market Value €0
        </div>
    </div>

    <!-- Secondary Info -->
    <div class="secondary-info">
        <div class="info-item">
            <div class="label">Day Change</div>
            <!-- Placeholder; update if you have a day-change calculation -->
            <div class="value positive" id="dayChangeDisplay">+€273.98 (+1.03%)</div>
        </div>
        <div class="info-item">
            <div class="label">Unrealized G/L</div>
            <!-- Updated from API's totalGainsLosses and portfolioPercentage -->
            <div class="value negative" id="unrealizedDisplay">-€0 (-0%)</div>
        </div>
        <div class="info-item">
            <div class="label">Realized G/L</div>
            <!-- Placeholder; replace if available -->
            <div class="value positive" id="realizedDisplay">+€2,998.85</div>
        </div>
    </div>

    <!-- Time-Range Toggle Row (static buttons for now) -->
    <div class="chart-toggles">
        <button class="toggle-btn active">1D</button>
        <button class="toggle-btn">1W</button>
        <button class="toggle-btn">1M</button>
        <button class="toggle-btn">1Y</button>
        <button class="toggle-btn">YTD</button>
        <button class="toggle-btn">All</button>
        <button class="toggle-btn">Custom</button>
        <span class="about-chart">About this chart</span>
    </div>

    <!-- Chart Section: Performance Line Chart -->
    <div class="chart-section">
        <canvas id="performanceChart"></canvas>
    </div>

    <!-- Chart Section: Stock HeatMap -->
    <!-- Note: amCharts uses a div container -->
    <div class="chart-section">
        <div id="heatmapChart" style="width:100%; height:350px;"></div>
    </div>
</div>

<!-- Styles -->
<style>
    .holdings-summary-container {
        background: #fff;
        border: 1px solid #e1e1e1;
        border-radius: 6px;
        padding: 20px;
        margin: 20px auto;
        font-family: Arial, sans-serif;
       
    }

    .header-section {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 10px;
    }

    .main-value {
        font-size: 2rem;
        font-weight: 700;
        color: #333;
    }

    .sub-label {
        font-size: 0.95rem;
        color: #666;
        margin-top: 4px;
    }

    .secondary-info {
        display: flex;
        gap: 40px;
        margin: 15px 0;
        flex-wrap: wrap;
    }

    .info-item {
        display: flex;
        flex-direction: column;
    }

        .info-item .label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 4px;
        }

        .info-item .value {
            font-size: 1.05rem;
            font-weight: 600;
        }

    .positive {
        color: #2ecc71;
    }

    .negative {
        color: #e74c3c;
    }

    .chart-toggles {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .toggle-btn {
        border: 1px solid #ccc;
        background-color: #fff;
        color: #333;
        padding: 6px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.85rem;
    }

        .toggle-btn.active,
        .toggle-btn:hover {
            background-color: #f0f0f0;
        }

    .about-chart {
        margin-left: auto;
        font-size: 0.8rem;
        color: #888;
        cursor: pointer;
    }

    .chart-section {
        position: relative;
        width: 100%;
        height: 350px;
        margin-bottom: 20px;
    }

    canvas {
        width: 100% !important;
        height: 100% !important;
    }
    @@media (max-width: 600px) {
        .secondary-info

    {
        gap: 20px;
    }

    .info-item {
        margin-bottom: 10px;
    }

    }
</style>

<!-- Include Chart.js for the performance chart -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Include amCharts 5 libraries for the heatmap -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

<!-- Integrated JavaScript -->
<script>
    document.addEventListener("DOMContentLoaded", async () => {
        try {
            // Fetch portfolio data from the API (adjust endpoint URL as needed)
            const response = await fetch("/api/Portfolio", {
                method: "GET",
                headers: { "Accept": "*/*" }
            });
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            const data = await response.json();
            const portfolio = data[0]; // Use the first portfolio

            // Update UI metrics
            updateUI(portfolio);

            // Create performance line chart (using Chart.js)
            createPerformanceChart(portfolio);

            // Create stock heatmap chart using amCharts
            createStockHeatmapChart(portfolio);
        } catch (error) {
            console.error("Error fetching portfolio data:", error);
        }
    });

    function updateUI(portfolio) {
        const mainValueEl   = document.getElementById("mainValueDisplay");
        const marketValueEl = document.getElementById("marketValueDisplay");
        const dayChangeEl   = document.getElementById("dayChangeDisplay");
        const unrealizedEl  = document.getElementById("unrealizedDisplay");
        const realizedEl    = document.getElementById("realizedDisplay");

        const formatCurrency = val => new Intl.NumberFormat("en-GB", {
            style: "currency",
            currency: "EUR"
        }).format(val);

        // Update Market Value
        mainValueEl.textContent = formatCurrency(portfolio.currentMarketValue);
        marketValueEl.textContent = `Market Value ${formatCurrency(portfolio.currentMarketValue)}`;

        // Day Change: Placeholder (update if your API provides a value)
        dayChangeEl.textContent = "+€273.98 (+1.03%)";
        dayChangeEl.classList.add("positive");

        // Unrealized G/L using totalGainsLosses and portfolioPercentage
        const unrealized = portfolio.totalGainsLosses;
        const sign = unrealized >= 0 ? "+" : "";
        unrealizedEl.textContent = `${sign}${formatCurrency(unrealized)} (${portfolio.portfolioPercentage.toFixed(2)}%)`;
        if (unrealized >= 0) {
            unrealizedEl.classList.add("positive");
            unrealizedEl.classList.remove("negative");
        } else {
            unrealizedEl.classList.add("negative");
            unrealizedEl.classList.remove("positive");
        }

        // Realized G/L: Placeholder
        realizedEl.textContent = "+€2,998.85";
        realizedEl.classList.add("positive");
    }

    function createPerformanceChart(portfolio) {
        const ctx = document.getElementById("performanceChart").getContext("2d");
        const labels = ["Weekly", "Monthly", "Yearly"];
        const dataPoints = [
            portfolio.weeklyPercentage,
            portfolio.monthlyPercentage,
            portfolio.yearlyPercentage
        ];

        new Chart(ctx, {
            type: "line",
            data: {
                labels: labels,
                datasets: [{
                    label: "Performance (%)",
                    data: dataPoints,
                    borderColor: "#8e44ad",
                    backgroundColor: "rgba(142, 68, 173, 0.1)",
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: "Weekly / Monthly / Yearly Performance" }
                },
                scales: {
                    y: {
                        ticks: { callback: value => value + "%" }
                    }
                }
            }
        });
    }

    function createStockHeatmapChart(portfolio) {
        // Process the groupedItems from the portfolio to create a matrix of data.
        const groups = portfolio.groupedItems || [];
        const totalCells = groups.length;
        // Define grid dimensions: adjust the number of columns as desired.
        const columns = 4;
        const rows = Math.ceil(totalCells / columns);
        const matrixData = groups.map((group, index) => {
            // Compute the average percent change for this symbol.
            const avgPercent = group.items.reduce((sum, item) => sum + item.percentChange, 0) / group.items.length;
            return {
                categoryX: (index % columns).toString(),
                categoryY: Math.floor(index / columns).toString(),
                value: avgPercent,
                symbol: group.symbol
            };
        });

        // Create amCharts 5 heatmap using an XY chart.
        // "heatmapChart" is the id of our div container.
        var root = am5.Root.new("heatmapChart");
        root.setThemes([am5themes_Animated.new(root)]);

        var chart = root.container.children.push(am5xy.XYChart.new(root, {
            panX: false,
            panY: false,
            wheelX: "panX",
            wheelY: "zoomX",
            layout: root.verticalLayout,
            paddingLeft: 20,
            paddingRight: 20,
            paddingTop: 20,
            paddingBottom: 20
        }));

        // Create X Axis (Category)
        var xAxis = chart.xAxes.push(am5xy.CategoryAxis.new(root, {
            categoryField: "categoryX",
            renderer: am5xy.AxisRendererX.new(root, { minGridDistance: 30 })
        }));
        // Create Y Axis (Category)
        var yAxis = chart.yAxes.push(am5xy.CategoryAxis.new(root, {
            categoryField: "categoryY",
            renderer: am5xy.AxisRendererY.new(root, { inversed: true, minGridDistance: 30 })
        }));

        // Prepare categories for X and Y axes.
        var xCategories = [];
        for (var i = 0; i < columns; i++) {
            xCategories.push({ categoryX: i.toString() });
        }
        xAxis.data.setAll(xCategories);

        var yCategories = [];
        for (var j = 0; j < rows; j++) {
            yCategories.push({ categoryY: j.toString() });
        }
        yAxis.data.setAll(yCategories);

        // Create the Column Series to represent the cells.
        var series = chart.series.push(am5xy.ColumnSeries.new(root, {
            xAxis: xAxis,
            yAxis: yAxis,
            valueField: "value",
            categoryXField: "categoryX",
            categoryYField: "categoryY",
            sequencedInterpolation: true,
            tooltip: am5.Tooltip.new(root, {
                labelText: "{symbol}: {value.formatNumber('0.00')}%"
            })
        }));

        series.columns.template.setAll({
            cornerRadiusTL: 5,
            cornerRadiusTR: 5,
            cornerRadiusBL: 5,
            cornerRadiusBR: 5,
            strokeOpacity: 0
        });

        // Set data for the series from our matrixData
        series.data.setAll(matrixData);

        // Use an adapter to set the fill color based on value.
        series.columns.template.adapters.add("fill", function(fill, target) {
            var dataItem = target.dataItem;
            if (dataItem) {
                var value = dataItem.get("value");
                // Define a maximum magnitude for scaling (here 10%)
                var max = 10;
                // Compute opacity from 0.3 (low) to 1 (high)
                var opacity = Math.min(1, Math.max(0.3, Math.abs(value) / max));
                // Return green for positive, red for negative.
                return value >= 0
                    ? am5.color(0x2ecc71).brighten(1 - opacity)
                    : am5.color(0xe74c3c).brighten(1 - opacity);
            }
            return fill;
        });

        series.appear(1000);
        chart.appear(1000, 100);
    }
</script>
