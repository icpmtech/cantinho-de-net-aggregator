@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Portfolio - Holdings";
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"]</title>

  <!-- Tabulator CSS -->
  <link rel="stylesheet" href="https://unpkg.com/tabulator-tables@5.3.4/dist/css/tabulator.min.css" />
  <!-- Tabulator JS -->
  <script src="https://unpkg.com/tabulator-tables@5.3.4/dist/js/tabulator.min.js"></script>
  <!-- Chart.js Library -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Roboto Font -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

  <style>
        /* Mobile Improvements */
        @@media only screen and (max-width: 600px) {
            /* Reduce overall padding/margins for a tighter layout */
            .container

        {
            padding: 10px;
            margin: 10px;
        }

        /* Adjust header and title sizes */
        .app-title {
            font-size: 1.5rem;
        }

        /* Increase button sizes and tap targets for easier touch interactions */
        .btn {
            padding: 10px 14px;
            font-size: 14px;
            margin: 5px 2px;
        }

        /* Make the finance cards take full width on mobile */
        .finance-card {
            flex: 1 1 100%;
        }

        /* Ensure modals and simulation drawers are sized appropriately */
        .modal-content {
            width: 95%;
            max-width: 95%;
        }

        #simulationDrawer {
            width: 90%;
            right: -90%;
        }

            #simulationDrawer.open {
                right: 0;
            }

        /* Allow horizontal scrolling on the Tabulator table if it overflows */
        #portfolioTable {
            overflow-x: auto;
        }

        /* Optional: Reduce font size on table cells for compact view */
        .tabulator-cell {
            font-size: 14px;
            padding: 4px;
        }

        }

    /* Global Styles */
    body {
      margin: 0;
      font-family: 'Roboto', "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f5;
      color: #202124;
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    body.dark-mode {
      background-color: #202124;
      color: #e8eaed;
    }
    .container {
      
      margin: 20px auto;
      padding: 0 20px;
    }

    /* Header */
    .main-header {
      background-color: #fff;
      border-bottom: 1px solid #dadce0;
      padding: 10px 0;
      box-shadow: 0 2px 4px rgba(60,64,67,0.1);
    }
    body.dark-mode .main-header {
      background-color: #303134;
      border-bottom: 1px solid #5f6368;
    }
    .app-title {
      font-size: 1.8rem;
      font-weight: 500;
      margin: 0;
      color: #202124;
    }
    body.dark-mode .app-title {
      color: #e8eaed;
    }

    /* Button Styles */
    .btn {
      display: inline-block;
      padding: 10px 16px;
      font-size: 15px;
      cursor: pointer;
      border: none;
      border-radius: 2px;
      background-color: #1a73e8;
      color: #fff;
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      margin: 5px 4px;
      text-decoration: none;
    }
    .btn:hover {
      background-color: #1669c1;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .btn-secondary {
      background-color: #34a853;
    }
    .btn-secondary:hover {
      background-color: #2d8c46;
    }
    .btn-danger {
      background-color: #d93025;
    }
    .btn-danger:hover {
      background-color: #b1271b;
    }
    .btn-sm {
      padding: 6px 10px;
      font-size: 13px;
    }

    /* Search Box */
    #search {
      width: 100%;
      padding: 10px 14px;
      font-size: 15px;
      border: 1px solid #dadce0;
      border-radius: 2px;
      margin: 20px 0;
      outline: none;
      transition: border-color 0.3s ease;
    }
    #search:focus {
      border-color: #1a73e8;
    }

    /* Tabulator Table Overrides */
    .tabulator {
      background-color: #fff !important;
      border: 1px solid #dadce0;
      box-shadow: 0 2px 4px rgba(60,64,67,0.1);
      border-radius: 4px;
      margin-bottom: 20px;
    }
    .tabulator-header {
      background-color: #f8f9fa !important;
      border-bottom: 1px solid #dadce0 !important;
      font-weight: 500;
    }
    .tabulator-header .tabulator-col {
      border-right: 1px solid #dadce0 !important;
      color: #202124;
    }
    .tabulator-header .tabulator-col:last-of-type {
      border-right: none !important;
    }
    .tabulator-row {
      border-bottom: 1px solid #e0e0e0;
    }
    .tabulator-row:hover {
      background-color: #f1f3f4;
    }

    /* Cards View */
    .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }
    .finance-card {
      flex: 1 1 calc(33.33% - 20px);
      background-color: #fff;
      border: 1px solid #dadce0;
      border-radius: 4px;
      padding: 16px;
      box-shadow: 0 2px 4px rgba(60,64,67,0.1);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .finance-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(60,64,67,0.15);
    }
    .finance-card h3 {
      font-size: 1.3rem;
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: #1a73e8;
    }
    .finance-card p {
      font-size: 14px;
      margin: 4px 0;
      color: #5f6368;
    }

    /* Loading Spinner & Status Message */
    #loading {
      display: none;
      text-align: center;
      margin: 20px 0;
    }
    .spinner {
      border: 4px solid rgba(0,0,0,0.2);
      width: 36px;
      height: 36px;
      border-radius: 50%;
      border-left-color: #1a73e8;
      animation: spin 1s linear infinite;
      margin: auto;
    }
        @@keyframes spin {
      to { transform: rotate(360deg); }
    }
    #loading p {
      font-size: 16px;
      margin-top: 10px;
      color: #202124;
    }

    /* Modal Styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      overflow: auto;
    }
    .modal-content {
      background-color: #fff;
      margin: 10% auto;
      padding: 20px;
      border-radius: 4px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 4px 8px rgba(60,64,67,0.15);
    }
    .modal-content h3 {
      margin-top: 0;
      font-size: 1.4rem;
      color: #202124;
    }
    .modal-content input,
    .modal-content select {
      width: 100%;
      padding: 10px;
      margin: 8px 0 16px;
      border: 1px solid #dadce0;
      border-radius: 2px;
      font-size: 15px;
    }
    .modal-content .modal-actions {
      text-align: right;
    }

    /* Simulation Drawer Styles */
    #simulationDrawer {
      position: fixed;
      top: 0;
      right: -300px;
      width: 300px;
      height: 100%;
      background: #fff;
      box-shadow: -2px 0 5px rgba(0,0,0,0.3);
      transition: right 0.3s ease, width 0.3s ease;
      padding: 20px;
      overflow-y: auto;
      z-index: 1100;
    }
    #simulationDrawer.open {
      right: 0;
    }
    #simulationDrawer.maximized {
      width: 90%;
      right: 0;
    }
    #drawerHeader {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
    #drawerHeader h4 {
      margin: 0;
      font-size: 1.2rem;
      color: #1a73e8;
    }
    #simulationInputs label {
      font-size: 0.95rem;
    }

    /* Status Message */
    #statusMessage {
      display: none;
      margin-top: 10px;
      font-size: 16px;
      text-align: center;
    }
  </style>
</head>
<body class="light-mode">
  <header class="main-header">
    <div class="container">
      <h1 class="app-title">Finance Portfolio Holdings</h1>
    </div>
  </header>
  <div class="card container">
    <!-- Top Controls -->
    <div style="margin: 20px 0;">
      <button class="btn" onclick="toggleTheme()">Toggle Theme</button>
      <button class="btn btn-secondary" onclick="groupByPortfolio()">Group by Portfolio</button>
      <button class="btn btn-secondary" onclick="groupBySymbol()">Group by Symbol</button>
      <button class="btn btn-secondary" onclick="clearGrouping()">Clear Grouping</button>
      <button class="btn btn-secondary" onclick="expandAllGroups()">Expand All Groups</button>
      <button class="btn btn-secondary" onclick="collapseAllGroups()">Collapse All Groups</button>
    </div>
    <!-- Bottom Buttons -->
    <div style="margin-bottom:20px;">
      <button class="btn" onclick="addRow()">Add Transaction</button>
      <button class="btn" onclick="saveToJson()">Save JSON</button>
      <button class="btn" onclick="loadFromJson()">Load JSON from File</button>
      <button class="btn btn-secondary" onclick="loadFromAPI()">Load from API</button>
      <button class="btn" id="toggleViewBtn" onclick="toggleView()">Switch to Cards View</button>
    </div>
    <!-- Search Box -->
    <input type="text" id="search" placeholder="🔍 Search asset..." onkeyup="filterTable()" />
    <!-- Loading Spinner & Message -->
    <div id="loading">
      <div class="spinner"></div>
      <p>Loading...</p>
    </div>
    <!-- Status Message -->
    <div id="statusMessage"></div>
    <!-- Tabulator Table View -->
    <div id="portfolioTable"></div>
    <!-- Cards View (hidden by default) -->
    <div id="cardsView" class="card-container" style="display:none;"></div>
  </div>

  <!-- Edit Modal -->
  <div id="editModal" class="modal">
    <div class="modal-content">
      <h3>Edit Transaction</h3>
      <label for="editSymbol">Asset</label>
      <input type="text" id="editSymbol" />
      <label for="editOperationType">Type</label>
      <select id="editOperationType">
        <option value="Buy">Buy</option>
        <option value="Sell">Sell</option>
        <option value="Close">Close</option>
      </select>
      <label for="editQuantity">Quantity</label>
      <input type="number" id="editQuantity" min="1" />
      <label for="editPurchasePrice">Price (€)</label>
      <input type="number" id="editPurchasePrice" min="0" step="0.01" />
      <label for="editCommission">Commission (€)</label>
      <input type="number" id="editCommission" min="0" step="0.01" />
      <!-- Button to open the Financial Calculator modal -->
      <button class="btn btn-secondary" type="button" onclick="openCalcFromEdit()">Open Financial Calculator</button>
      <div class="modal-actions">
        <button class="btn" onclick="saveModal()">Save</button>
        <button class="btn btn-danger" onclick="closeModal()">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Financial Calculator Modal -->
  <div id="calcModal" class="modal">
    <div class="modal-content">
      <h3>Financial Calculator</h3>
      <!-- Display base data -->
      <p id="calcBaseData"></p>
      <label for="calcType">Calculation Type</label>
      <select id="calcType" onchange="updateCalcModalFields()">
        <option value="roi">ROI</option>
        <option value="profit">Profit</option>
        <option value="breakEven">Break-Even</option>
        <option value="annualizedROI">Annualized ROI</option>
        <option value="markup">Markup (%)</option>
        <option value="profitMargin">Profit Margin (%)</option>
      </select>
      <!-- Selling Price Input -->
      <div id="sellingPriceContainer">
        <label for="calcSellingPrice">Selling Price (€)</label>
        <input type="number" id="calcSellingPrice" min="0" step="0.01" />
      </div>
      <!-- Holding Period Input for Annualized ROI -->
      <div id="holdingPeriodContainer" style="display:none;">
        <label for="calcHoldingPeriod">Holding Period (years)</label>
        <input type="number" id="calcHoldingPeriod" min="0" step="0.1" />
      </div>
      <button class="btn" onclick="calculate()">Calculate</button>
      <p id="calcResult"></p>
      <!-- Button to open the Simulation Drawer -->
      <button class="btn btn-secondary" style="margin-top:10px;" onclick="toggleDrawer()">Open Simulation Drawer</button>
      <div class="modal-actions">
        <button class="btn btn-danger" onclick="closeCalcModal()">Close</button>
      </div>
    </div>
  </div>

  <!-- Simulation Drawer (Advanced Simulation Calculator) -->
  <div id="simulationDrawer">
    <div id="drawerHeader">
      <h4>Advanced Simulation Options</h4>
      <div>
        <button class="btn btn-sm" onclick="toggleDrawerSize()" id="drawerSizeBtn">Maximize</button>
        <button class="btn btn-sm btn-danger" onclick="toggleDrawer()">Close Drawer</button>
      </div>
    </div>
    <div id="drawerContent">
      <h4>Simulation Calculator</h4>
      <label for="simMinPrice">Minimum Selling Price (€)</label>
      <input type="number" id="simMinPrice" min="0" step="0.01" />
      <label for="simMaxPrice">Maximum Selling Price (€)</label>
      <input type="number" id="simMaxPrice" min="0" step="0.01" />
      <label for="simStep">Increment (€)</label>
      <input type="number" id="simStep" min="0" step="0.01" />
      <button class="btn btn-secondary" onclick="simulate()">Simulate</button>
      <!-- Simulation Chart: compares constant buy price vs simulated selling prices and their difference -->
      <div style="margin-top:15px;">
        <canvas id="drawerChart" width="280" height="200"></canvas>
      </div>
      <button class="btn btn-secondary" style="margin-top:10px;" onclick="takeSnapshot()">Take Snapshot</button>
    </div>
  </div>

  <script>
    // Global variables for current calculator base data and charts.
    var currentCalcData = null;
    var calcChart = null;
    var drawerChart = null;

    // Load API data on page load and update chart when selling price changes.
    window.addEventListener("DOMContentLoaded", () => {
      loadFromAPI();
      document.getElementById("calcSellingPrice").addEventListener("input", updateCalcChart);
    });

    /*******************************************************
     * STATUS MESSAGE FUNCTIONALITY
     *******************************************************/
    function showStatus(message, type) {
      const statusDiv = document.getElementById("statusMessage");
      statusDiv.style.display = "block";
      if (type === "pending") {
        statusDiv.style.color = "#1a73e8";
      } else if (type === "success") {
        statusDiv.style.color = "#34a853";
      } else if (type === "error") {
        statusDiv.style.color = "#d93025";
      } else {
        statusDiv.style.color = "#202124";
      }
      statusDiv.textContent = message;
      if (type !== "pending") {
        setTimeout(() => { statusDiv.style.display = "none"; }, 3000);
      }
    }

    /*******************************************************
     * THEME TOGGLE
     *******************************************************/
    function toggleTheme() {
      let body = document.body;
      if (body.classList.contains("light-mode")) {
        body.classList.remove("light-mode");
        body.classList.add("dark-mode");
      } else {
        body.classList.remove("dark-mode");
        body.classList.add("light-mode");
      }
    }

    /*******************************************************
     * TABULATOR INIT WITH GROUP HEADER (Including inline Break-Even calculation)
     *******************************************************/
    let table = new Tabulator("#portfolioTable", {
      layout: "fitDataFill",
      responsiveLayout: "collapse",
      height: "auto",
      groupHeader: function(value, count, data, group){
        // Aggregate break-even for the group:
        let totalQty = 0, totalCost = 0;
        data.forEach(row => {
          let q = parseFloat(row.quantity) || 0;
          let p = parseFloat(row.purchasePrice) || 0;
          let comm = parseFloat(row.commission) || 0;
          totalQty += q;
          totalCost += (p * q) + comm;
        });
        let groupBreakEven = totalQty > 0 ? (totalCost / totalQty).toFixed(2) : "N/A";
        return `<span>${value} (${count} items) - Break-Even: €${groupBreakEven}</span>
                <button class="btn btn-sm" onclick="openGroupCalcModal('${value}')">Calc Group</button>`;
      },
      columns: [
        { title: "ID", field: "id", visible: false },
        { title: "Portfolio", field: "portfolioName", visible: false },
        { title: "Asset", field: "symbol", editor: "input", headerFilter: "input" },
        {
          title: "Type",
          field: "operationType",
          editor: "select",
          editorParams: { values: ["Buy", "Sell", "Close"] }
        },
        {
          title: "Quantity",
          field: "quantity",
          editor: "number",
          validator: "min:1",
          cellEdited: updateTotal
        },
        {
          title: "Price (€)",
          field: "purchasePrice",
          editor: "number",
          validator: "min:0",
          cellEdited: updateTotal
        },
        {
          title: "Commission (€)",
          field: "commission",
          editor: "number",
          validator: "min:0",
          cellEdited: updateTotal
        },
        {
          title: "Total Value (€)",
          field: "totalValue",
          formatter: "money",
          editor: false,
          bottomCalc: "sum",
          bottomCalcFormatter: "money",
          bottomCalcFormatterParams: { precision: 2 }
        },
        {
          title: "Average Value (€)",
          field: "averageValue",
          formatter: "money",
          editor: false
        },
        {
          title: "Break-Even (€)",
          formatter: function(cell, formatterParams) {
            let data = cell.getRow().getData();
            let q = parseFloat(data.quantity) || 0;
            let p = parseFloat(data.purchasePrice) || 0;
            let comm = parseFloat(data.commission) || 0;
            let be = q > 0 ? ((p * q) + comm) / q : 0;
            return be.toFixed(2);
          },
          bottomCalc: function(values, data, calcParams) {
            let totalQty = 0, totalCost = 0;
            data.forEach(row => {
              let q = parseFloat(row.quantity) || 0;
              let p = parseFloat(row.purchasePrice) || 0;
              let comm = parseFloat(row.commission) || 0;
              totalQty += q;
              totalCost += (p * q) + comm;
            });
            return totalQty > 0 ? (totalCost / totalQty).toFixed(2) : "N/A";
          },
          bottomCalcFormatter: "plaintext"
        },
        {
          title: "Actions",
          formatter: function(cell, formatterParams) {
            return `<button class="btn btn-sm" data-action="edit">Edit</button>
                    <button class="btn btn-secondary btn-sm" data-action="calc">Calc</button>
                    <button class="btn btn-danger btn-sm" data-action="delete">Delete</button>`;
          },
          width: 150,
          align: "center",
          cellClick: function(e, cell) {
            let target = e.target;
            let row = cell.getRow();
            if (target.getAttribute("data-action") === "edit") {
              openEditModal(row);
            } else if (target.getAttribute("data-action") === "calc") {
              openRowCalcModal(row);
            } else if (target.getAttribute("data-action") === "delete") {
              let rowData = row.getData();
              if (rowData.id) {
                if (confirm("Are you sure you want to delete this item?")) {
                  fetch("/api/PortfolioItem/" + rowData.id, { method: "DELETE" })
                    .then(response => {
                      if (response.ok) {
                        row.delete();
                        showStatus("Item deleted successfully", "success");
                      } else {
                        showStatus("Failed to delete item", "error");
                        alert("Failed to delete item.");
                      }
                    })
                    .catch(error => {
                      console.error("Error deleting row:", error);
                      showStatus("Error deleting item", "error");
                    });
                }
              } else {
                row.delete();
              }
            }
          }
        }
      ]
    });

    /*******************************************************
     * ROW OPERATIONS & CRUD API
     *******************************************************/
    function addRow() {
      table.addRow({
        symbol: "",
        operationType: "Buy",
        quantity: 1,
        purchasePrice: 0,
        commission: 0,
        totalValue: 0,
        averageValue: 0,
        portfolioName: ""
      });
    }

    function recalcRow(row) {
      let data = row.getData();
      let q = parseFloat(data.quantity) || 0;
      let p = parseFloat(data.purchasePrice) || 0;
      let comm = parseFloat(data.commission) || 0;
      let total = 0;
      switch(data.operationType) {
        case "Buy":
          total = (p * q) + comm;
          break;
        case "Sell":
          total = (p * q) - comm;
          break;
        case "Close":
          total = 0;
          break;
        default:
          total = 0;
      }
      let avg = q > 0 ? (total / q).toFixed(2) : "0.00";
      row.update({
        totalValue: total.toFixed(2),
        averageValue: avg
      });
    }

    function updateTotal(cell) {
      let row = cell.getRow();
      recalcRow(row);
      saveRow(row);
    }

    function saveRow(row) {
      let data = row.getData();
      showStatus("Saving...", "pending");
      if(data.id) {
        fetch("/api/PortfolioItem/" + data.id, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data)
        })
        .then(response => {
          if(response.ok) {
            showStatus("Save successful", "success");
          } else {
            showStatus("Failed to update row: " + response.statusText, "error");
            console.error("Failed to update row:", response.statusText);
          }
        })
        .catch(error => {
          showStatus("Error updating row", "error");
          console.error("Error updating row:", error);
        });
      } else {
        fetch("/api/PortfolioItem", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
          row.update({ id: result.id });
          showStatus("Save successful", "success");
        })
        .catch(error => {
          showStatus("Error creating row", "error");
          console.error("Error creating row:", error);
        });
      }
    }

    /*******************************************************
     * SEARCH / FILTER
     *******************************************************/
    function filterTable() {
      let value = document.getElementById("search").value.toLowerCase();
      table.setFilter("symbol", "like", value);
    }

    /*******************************************************
     * FILE IMPORT/EXPORT
     *******************************************************/
    function saveToJson() {
      let data = table.getData();
      let jsonData = JSON.stringify(data, null, 4);
      let blob = new Blob([jsonData], { type: "application/json" });
      let a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = "portfolio.json";
      a.click();
    }

    function loadFromJson() {
      let input = document.createElement("input");
      input.type = "file";
      input.accept = "application/json";
      input.onchange = function(event) {
        let file = event.target.files[0];
        let reader = new FileReader();
        reader.onload = function() {
          let data = JSON.parse(reader.result);
          table.setData(data);
        };
        reader.readAsText(file);
      };
      input.click();
    }

    /*******************************************************
     * LOAD FROM API (Read All Portfolios, Group Items)
     *******************************************************/
    function loadFromAPI() {
      document.getElementById("loading").style.display = "block";
      fetch("/api/Portfolio", { method: "GET", headers: { "Accept": "*/*" } })
      .then(response => {
        if(!response.ok) throw new Error("Error loading API data: " + response.statusText);
        return response.json();
      })
      .then(data => {
        document.getElementById("loading").style.display = "none";
        if(data && data.length > 0) {
          let items = [];
          data.forEach(portfolio => {
            let portfolioName = portfolio.name || ("Portfolio " + portfolio.id);
            if(portfolio.items) {
              portfolio.items.forEach(item => {
                item.portfolioName = portfolioName;
                items.push(calculateRowValues(item));
              });
            }
          });
          if(items.length > 0) {
            table.setGroupBy("portfolioName");
            table.setData(items);
          } else {
            alert("No items found in any portfolio.");
          }
        } else {
          alert("No portfolio found.");
        }
      })
      .catch(error => {
        console.error(error);
        document.getElementById("loading").style.display = "none";
        alert("Error loading API data.");
      });
    }

    function calculateRowValues(item) {
      let { quantity, purchasePrice, commission, operationType } = item;
      let q = parseFloat(quantity) || 0;
      let p = parseFloat(purchasePrice) || 0;
      let comm = parseFloat(commission) || 0;
      let total = 0;
      switch(operationType) {
        case "Buy":
          total = (p * q) + comm;
          break;
        case "Sell":
          total = (p * q) - comm;
          break;
        case "Close":
          total = 0;
          break;
        default:
          total = 0;
      }
      let avg = q > 0 ? (total / q).toFixed(2) : "0.00";
      return { ...item, totalValue: total.toFixed(2), averageValue: avg };
    }

    /*******************************************************
     * MODAL FOR EDITING
     *******************************************************/
    let currentEditRow = null;
    function openEditModal(row) {
      currentEditRow = row;
      let data = row.getData();
      document.getElementById("editSymbol").value = data.symbol || "";
      document.getElementById("editOperationType").value = data.operationType || "Buy";
      document.getElementById("editQuantity").value = data.quantity || 1;
      document.getElementById("editPurchasePrice").value = data.purchasePrice || 0;
      document.getElementById("editCommission").value = data.commission || 0;
      document.getElementById("editModal").style.display = "block";
    }

    function closeModal() {
      document.getElementById("editModal").style.display = "none";
      currentEditRow = null;
    }

    function saveModal() {
      if(!currentEditRow) return;
      let newData = {
        symbol: document.getElementById("editSymbol").value,
        operationType: document.getElementById("editOperationType").value,
        quantity: parseFloat(document.getElementById("editQuantity").value) || 0,
        purchasePrice: parseFloat(document.getElementById("editPurchasePrice").value) || 0,
        commission: parseFloat(document.getElementById("editCommission").value) || 0
      };
      currentEditRow.update(newData);
      recalcRow(currentEditRow);
      saveRow(currentEditRow);
      closeModal();
    }

    /*******************************************************
     * GROUPING / UNGROUPING
     *******************************************************/
    function groupByPortfolio() {
      table.setGroupBy("portfolioName");
    }
    function groupBySymbol() {
      table.setGroupBy("symbol");
    }
    function clearGrouping() {
      table.setGroupBy(false);
    }

    /*******************************************************
     * EXPAND / COLLAPSE GROUPS
     *******************************************************/
    function expandAllGroups() {
      let groups = table.getGroups();
      groups.forEach(group => {
        let el = group.getElement();
        if(!el.classList.contains("tabulator-group-expanded")) {
          el.click();
        }
      });
      showStatus("All groups expanded", "info");
    }
    function collapseAllGroups() {
      let groups = table.getGroups();
      groups.forEach(group => {
        let el = group.getElement();
        if(el.classList.contains("tabulator-group-expanded")) {
          el.click();
        }
      });
      showStatus("All groups collapsed", "info");
    }

    /*******************************************************
     * TOGGLE TABLE <-> CARDS VIEW
     *******************************************************/
    function toggleView() {
      let tableDiv = document.getElementById("portfolioTable");
      let cardsDiv = document.getElementById("cardsView");
      let toggleBtn = document.getElementById("toggleViewBtn");
      if(tableDiv.style.display !== "none") {
        tableDiv.style.display = "none";
        cardsDiv.style.display = "flex";
        toggleBtn.textContent = "Switch to Table View";
        renderCards();
      } else {
        tableDiv.style.display = "block";
        cardsDiv.style.display = "none";
        toggleBtn.textContent = "Switch to Cards View";
      }
    }

    function renderCards() {
      let cardsDiv = document.getElementById("cardsView");
      cardsDiv.innerHTML = "";
      let data = table.getData();
      document.getElementById("loading").style.display = "block";
      setTimeout(() => {
        document.getElementById("loading").style.display = "none";
        data.forEach(item => {
          let card = document.createElement("div");
          card.className = "finance-card";
          card.innerHTML = `
            <h3>${item.symbol || "Asset"}</h3>
            <p>Portfolio: ${item.portfolioName || ""}</p>
            <p>Type: ${item.operationType}</p>
            <p>Quantity: ${item.quantity}</p>
            <p>Price (€): ${item.purchasePrice}</p>
            <p>Commission (€): ${item.commission}</p>
            <p>Total Value (€): ${item.totalValue}</p>
            <p>Average Value (€): ${item.averageValue}</p>
            <p>Break-Even (€): ${ (item.quantity > 0 ? (((item.purchasePrice * item.quantity) + item.commission) / item.quantity).toFixed(2) : "N/A") }</p>
          `;
          cardsDiv.appendChild(card);
        });
      }, 500);
    }

    /*******************************************************
     * FINANCIAL CALCULATOR MODAL FUNCTIONS & CHART
     *******************************************************/
    function openCalcModal() {
      document.getElementById("calcModal").style.display = "block";
      updateCalcModalFields();
      if(currentCalcData) {
        document.getElementById("calcBaseData").textContent =
          "Data: Purchase Price: €" + currentCalcData.purchasePrice.toFixed(2) +
          ", Quantity: " + currentCalcData.quantity +
          ", Commission: €" + currentCalcData.commission.toFixed(2);
      } else {
        document.getElementById("calcBaseData").textContent = "";
      }
      updateCalcChart();
    }

    function openCalcFromEdit() {
      currentCalcData = {
        purchasePrice: parseFloat(document.getElementById("editPurchasePrice").value) || 0,
        quantity: parseFloat(document.getElementById("editQuantity").value) || 0,
        commission: parseFloat(document.getElementById("editCommission").value) || 0
      };
      openCalcModal();
    }

    function openRowCalcModal(row) {
      let data = row.getData();
      currentCalcData = {
        purchasePrice: parseFloat(data.purchasePrice) || 0,
        quantity: parseFloat(data.quantity) || 0,
        commission: parseFloat(data.commission) || 0
      };
      openCalcModal();
    }

    function openGroupCalcModal(groupKey) {
      let allData = table.getData();
      let groupRows = allData.filter(function(row) {
         return row.portfolioName === groupKey || row.symbol === groupKey;
      });
      let totalQty = 0, totalCost = 0, totalComm = 0;
      groupRows.forEach(function(row) {
          let q = parseFloat(row.quantity) || 0;
          let p = parseFloat(row.purchasePrice) || 0;
          let comm = parseFloat(row.commission) || 0;
          totalQty += q;
          totalCost += (p * q);
          totalComm += comm;
      });
      let aggPurchase = totalQty > 0 ? totalCost / totalQty : 0;
      currentCalcData = {
         purchasePrice: aggPurchase,
         quantity: totalQty,
         commission: totalComm
      };
      openCalcModal();
    }

    function closeCalcModal() {
      document.getElementById("calcModal").style.display = "none";
      document.getElementById("calcResult").textContent = "";
      document.getElementById("calcSellingPrice").value = "";
      document.getElementById("calcHoldingPeriod").value = "";
      if(calcChart){ calcChart.destroy(); calcChart = null; }
      currentCalcData = null;
    }

    function updateCalcModalFields() {
      let calcType = document.getElementById("calcType").value;
      let sellingContainer = document.getElementById("sellingPriceContainer");
      let holdingContainer = document.getElementById("holdingPeriodContainer");
      if(calcType === "breakEven") {
        sellingContainer.style.display = "none";
        holdingContainer.style.display = "none";
      } else if(calcType === "annualizedROI") {
        sellingContainer.style.display = "block";
        holdingContainer.style.display = "block";
      } else {
        sellingContainer.style.display = "block";
        holdingContainer.style.display = "none";
      }
      document.getElementById("calcResult").textContent = "";
      document.getElementById("calcSellingPrice").value = "";
      document.getElementById("calcHoldingPeriod").value = "";
      updateCalcChart();
    }

    function updateCalcChart() {
      let purchasePrice = currentCalcData ? currentCalcData.purchasePrice : 0;
      let qty = currentCalcData ? currentCalcData.quantity : 0;
      let commission = currentCalcData ? currentCalcData.commission : 0;
      let breakEven = qty > 0 ? ((purchasePrice * qty) + commission) / qty : 0;
      let labels = ["Purchase Price", "Break-Even"];
      let dataPoints = [purchasePrice, breakEven];
      if(window.getComputedStyle(document.getElementById("sellingPriceContainer")).display !== "none") {
        let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
        labels.push("Selling Price");
        dataPoints.push(sellingPrice);
      }
      if(calcChart) {
         calcChart.data.labels = labels;
         calcChart.data.datasets[0].data = dataPoints;
         calcChart.update();
      } else {
         let ctx = document.getElementById("calcChart").getContext('2d');
         calcChart = new Chart(ctx, {
           type: 'bar',
           data: {
             labels: labels,
             datasets: [{
               label: 'Values (€)',
               data: dataPoints,
               backgroundColor: [
                 'rgba(26,115,232,0.7)',
                 'rgba(52,168,83,0.7)',
                 'rgba(220,50,45,0.7)'
               ]
             }]
           },
           options: { scales: { y: { beginAtZero: true } } }
         });
      }
    }

    /*******************************************************
     * SIMULATION FUNCTIONALITY IN THE DRAWER
     *******************************************************/
    // This simulation compares the constant buy price versus a range of simulated sales prices and shows the difference.
    function simulate() {
      let simMin = parseFloat(document.getElementById("simMinPrice").value);
      let simMax = parseFloat(document.getElementById("simMaxPrice").value);
      let simStep = parseFloat(document.getElementById("simStep").value);
      if(isNaN(simMin) || isNaN(simMax) || isNaN(simStep) || simMin >= simMax || simStep <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid simulation values.";
        return;
      }
      let labels = [];
      let salesPrices = [];
      let buyPrices = [];
      let differences = [];
      let purchasePrice = currentCalcData ? currentCalcData.purchasePrice : 0;
      for(let sp = simMin; sp <= simMax; sp += simStep) {
         labels.push(sp.toFixed(2));
         salesPrices.push(sp);
         buyPrices.push(purchasePrice);
         differences.push(sp - purchasePrice);
      }
      if(drawerChart){ drawerChart.destroy(); drawerChart = null; }
      let ctx = document.getElementById("drawerChart").getContext('2d');
      drawerChart = new Chart(ctx, {
         type: 'line',
         data: {
           labels: labels,
           datasets: [
             {
               label: "Buy Price",
               data: buyPrices,
               borderColor: 'rgba(26,115,232,1)',
               backgroundColor: 'rgba(26,115,232,0.2)',
               fill: false,
               tension: 0.1
             },
             {
               label: "Sales Price",
               data: salesPrices,
               borderColor: 'rgba(220,50,45,1)',
               backgroundColor: 'rgba(220,50,45,0.2)',
               fill: false,
               tension: 0.1
             },
             {
               label: "Difference (Sales - Buy)",
               data: differences,
               borderColor: 'rgba(52,168,83,1)',
               backgroundColor: 'rgba(52,168,83,0.2)',
               fill: false,
               tension: 0.1
             }
           ]
         },
         options: { scales: { y: { beginAtZero: true } } }
      });
    }

    function computeMetric(sellingPrice, calcType) {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      if(calcType === "roi") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let profit = totalRevenue - totalCost;
         return (profit / totalCost) * 100;
      } else if(calcType === "profit") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         return totalRevenue - totalCost;
      } else if(calcType === "annualizedROI") {
         let holdingPeriod = parseFloat(document.getElementById("calcHoldingPeriod").value) || 1;
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0 || holdingPeriod <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let overallROI = (totalRevenue - totalCost) / totalCost;
         return (Math.pow((1 + overallROI), (1 / holdingPeriod)) - 1) * 100;
      } else if(calcType === "markup") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let effectiveCost = purchasePrice + (commission / quantity);
         return ((sellingPrice - effectiveCost) / effectiveCost) * 100;
      } else if(calcType === "profitMargin") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let profit = totalRevenue - totalCost;
         return (profit / totalRevenue) * 100;
      } else if(calcType === "breakEven") {
         if(purchasePrice <= 0 || quantity <= 0) return 0;
         return ((purchasePrice * quantity) + commission) / quantity;
      }
      return 0;
    }

    function calculate() {
      let calcType = document.getElementById("calcType").value;
      if(calcType === "roi") { 
        calculateROI(); 
      } else if(calcType === "profit") { 
        calculateProfit(); 
      } else if(calcType === "breakEven") { 
        calculateBreakEven(); 
      } else if(calcType === "annualizedROI") { 
        calculateAnnualizedROI(); 
      } else if(calcType === "markup") {
        calculateMarkup();
      } else if(calcType === "profitMargin") {
        calculateProfitMargin();
      }
      updateCalcChart();
    }

    function calculateROI() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let profit = totalRevenue - totalCost;
      let roi = (profit / totalCost) * 100;
      document.getElementById("calcResult").textContent = "ROI: " + roi.toFixed(2) + "%";
    }

    function calculateProfit() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let profit = totalRevenue - totalCost;
      document.getElementById("calcResult").textContent = "Profit: €" + profit.toFixed(2);
    }

    function calculateBreakEven() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      if(purchasePrice <= 0 || quantity <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price and Quantity.";
        return;
      }
      let breakEven = ((purchasePrice * quantity) + commission) / quantity;
      document.getElementById("calcResult").textContent = "Break-Even: €" + breakEven.toFixed(2);
    }

    function calculateAnnualizedROI() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      let holdingPeriod = parseFloat(document.getElementById("calcHoldingPeriod").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0 || holdingPeriod <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, Selling Price, and Holding Period.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let overallROI = (totalRevenue - totalCost) / totalCost;
      let annualizedROI = (Math.pow((1 + overallROI), (1 / holdingPeriod)) - 1) * 100;
      document.getElementById("calcResult").textContent = "Annualized ROI: " + annualizedROI.toFixed(2) + "%";
    }

    function calculateMarkup() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let effectiveCost = purchasePrice + (commission / quantity);
      let markup = ((sellingPrice - effectiveCost) / effectiveCost) * 100;
      document.getElementById("calcResult").textContent = "Markup: " + markup.toFixed(2) + "%";
    }

    function calculateProfitMargin() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let profit = totalRevenue - totalCost;
      let profitMargin = (profit / totalRevenue) * 100;
      document.getElementById("calcResult").textContent = "Profit Margin: " + profitMargin.toFixed(2) + "%";
    }

    /*******************************************************
     * DRAWER FUNCTIONALITY FOR ADVANCED SIMULATIONS
     *******************************************************/
    function toggleDrawer() {
      const drawer = document.getElementById("simulationDrawer");
      drawer.classList.toggle("open");
    }

    function toggleDrawerSize() {
      var drawer = document.getElementById("simulationDrawer");
      var btn = document.getElementById("drawerSizeBtn");
      if(drawer.classList.contains("maximized")) {
         drawer.classList.remove("maximized");
         btn.textContent = "Maximize";
      } else {
         drawer.classList.add("maximized");
         btn.textContent = "Minimize";
      }
    }

    function takeSnapshot() {
      if(drawerChart) {
        const imageURL = drawerChart.toBase64Image();
        const newWindow = window.open();
        newWindow.document.write('<img src="' + imageURL + '" alt="Simulation Snapshot"/>');
      } else {
        alert("No simulation chart available to capture.");
      }
    }

    /*******************************************************
     * SIMULATION FUNCTIONALITY IN THE DRAWER
     * (Chart compares constant Buy Price vs simulated Sales Price and Difference)
     *******************************************************/
    function simulate() {
      let simMin = parseFloat(document.getElementById("simMinPrice").value);
      let simMax = parseFloat(document.getElementById("simMaxPrice").value);
      let simStep = parseFloat(document.getElementById("simStep").value);
      if(isNaN(simMin) || isNaN(simMax) || isNaN(simStep) || simMin >= simMax || simStep <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid simulation values.";
        return;
      }
      let labels = [];
      let salesPrices = [];
      let buyPrices = [];
      let differences = [];
      let purchasePrice = currentCalcData ? currentCalcData.purchasePrice : 0;
      for(let sp = simMin; sp <= simMax; sp += simStep) {
         labels.push(sp.toFixed(2));
         salesPrices.push(sp);
         buyPrices.push(purchasePrice);
         differences.push(sp - purchasePrice);
      }
      if(drawerChart){ drawerChart.destroy(); drawerChart = null; }
      let ctx = document.getElementById("drawerChart").getContext('2d');
      drawerChart = new Chart(ctx, {
         type: 'line',
         data: {
           labels: labels,
           datasets: [
             {
               label: "Buy Price",
               data: buyPrices,
               borderColor: 'rgba(26,115,232,1)',
               backgroundColor: 'rgba(26,115,232,0.2)',
               fill: false,
               tension: 0.1
             },
             {
               label: "Sales Price",
               data: salesPrices,
               borderColor: 'rgba(220,50,45,1)',
               backgroundColor: 'rgba(220,50,45,0.2)',
               fill: false,
               tension: 0.1
             },
             {
               label: "Difference (Sales - Buy)",
               data: differences,
               borderColor: 'rgba(52,168,83,1)',
               backgroundColor: 'rgba(52,168,83,0.2)',
               fill: false,
               tension: 0.1
             }
           ]
         },
         options: { scales: { y: { beginAtZero: true } } }
      });
    }

    function computeMetric(sellingPrice, calcType) {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      if(calcType === "roi") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let profit = totalRevenue - totalCost;
         return (profit / totalCost) * 100;
      } else if(calcType === "profit") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         return totalRevenue - totalCost;
      } else if(calcType === "annualizedROI") {
         let holdingPeriod = parseFloat(document.getElementById("calcHoldingPeriod").value) || 1;
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0 || holdingPeriod <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let overallROI = (totalRevenue - totalCost) / totalCost;
         return (Math.pow((1 + overallROI), (1 / holdingPeriod)) - 1) * 100;
      } else if(calcType === "markup") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let effectiveCost = purchasePrice + (commission / quantity);
         return ((sellingPrice - effectiveCost) / effectiveCost) * 100;
      } else if(calcType === "profitMargin") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let profit = totalRevenue - totalCost;
         return (profit / totalRevenue) * 100;
      } else if(calcType === "breakEven") {
         if(purchasePrice <= 0 || quantity <= 0) return 0;
         return ((purchasePrice * quantity) + commission) / quantity;
      }
      return 0;
    }

    function calculate() {
      let calcType = document.getElementById("calcType").value;
      if(calcType === "roi") { 
        calculateROI(); 
      } else if(calcType === "profit") { 
        calculateProfit(); 
      } else if(calcType === "breakEven") { 
        calculateBreakEven(); 
      } else if(calcType === "annualizedROI") { 
        calculateAnnualizedROI(); 
      } else if(calcType === "markup") {
        calculateMarkup();
      } else if(calcType === "profitMargin") {
        calculateProfitMargin();
      }
      updateCalcChart();
    }

    function calculateROI() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let profit = totalRevenue - totalCost;
      let roi = (profit / totalCost) * 100;
      document.getElementById("calcResult").textContent = "ROI: " + roi.toFixed(2) + "%";
    }

    function calculateProfit() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let profit = totalRevenue - totalCost;
      document.getElementById("calcResult").textContent = "Profit: €" + profit.toFixed(2);
    }

    function calculateBreakEven() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      if(purchasePrice <= 0 || quantity <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price and Quantity.";
        return;
      }
      let breakEven = ((purchasePrice * quantity) + commission) / quantity;
      document.getElementById("calcResult").textContent = "Break-Even: €" + breakEven.toFixed(2);
    }

    function calculateAnnualizedROI() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      let holdingPeriod = parseFloat(document.getElementById("calcHoldingPeriod").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0 || holdingPeriod <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, Selling Price, and Holding Period.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let overallROI = (totalRevenue - totalCost) / totalCost;
      let annualizedROI = (Math.pow((1 + overallROI), (1 / holdingPeriod)) - 1) * 100;
      document.getElementById("calcResult").textContent = "Annualized ROI: " + annualizedROI.toFixed(2) + "%";
    }

    function calculateMarkup() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let effectiveCost = purchasePrice + (commission / quantity);
      let markup = ((sellingPrice - effectiveCost) / effectiveCost) * 100;
      document.getElementById("calcResult").textContent = "Markup: " + markup.toFixed(2) + "%";
    }

    function calculateProfitMargin() {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      let sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid values for Purchase Price, Quantity, and Selling Price.";
        return;
      }
      let totalCost = (purchasePrice * quantity) + commission;
      let totalRevenue = sellingPrice * quantity;
      let profit = totalRevenue - totalCost;
      let profitMargin = (profit / totalRevenue) * 100;
      document.getElementById("calcResult").textContent = "Profit Margin: " + profitMargin.toFixed(2) + "%";
    }

    /*******************************************************
     * DRAWER FUNCTIONALITY FOR ADVANCED SIMULATIONS
     *******************************************************/
    function toggleDrawer() {
      const drawer = document.getElementById("simulationDrawer");
      drawer.classList.toggle("open");
    }

    function toggleDrawerSize() {
      let drawer = document.getElementById("simulationDrawer");
      let btn = document.getElementById("drawerSizeBtn");
      if(drawer.classList.contains("maximized")) {
         drawer.classList.remove("maximized");
         btn.textContent = "Maximize";
      } else {
         drawer.classList.add("maximized");
         btn.textContent = "Minimize";
      }
    }

    function takeSnapshot() {
      if(drawerChart) {
        const imageURL = drawerChart.toBase64Image();
        const newWindow = window.open();
        newWindow.document.write('<img src="' + imageURL + '" alt="Simulation Snapshot"/>');
      } else {
        alert("No simulation chart available to capture.");
      }
    }

    /*******************************************************
     * SIMULATION FUNCTIONALITY IN THE DRAWER
     * (Comparing Buy Price vs. Simulated Sales Prices and Difference)
     *******************************************************/
    function simulate() {
      let simMin = parseFloat(document.getElementById("simMinPrice").value);
      let simMax = parseFloat(document.getElementById("simMaxPrice").value);
      let simStep = parseFloat(document.getElementById("simStep").value);
      if(isNaN(simMin) || isNaN(simMax) || isNaN(simStep) || simMin >= simMax || simStep <= 0) {
        document.getElementById("calcResult").textContent = "Please enter valid simulation values.";
        return;
      }
      let labels = [];
      let salesPrices = [];
      let buyPrices = [];
      let differences = [];
      let purchasePrice = currentCalcData ? currentCalcData.purchasePrice : 0;
      for(let sp = simMin; sp <= simMax; sp += simStep) {
         labels.push(sp.toFixed(2));
         salesPrices.push(sp);
         buyPrices.push(purchasePrice);
         differences.push(sp - purchasePrice);
      }
      if(drawerChart){ drawerChart.destroy(); drawerChart = null; }
      let ctx = document.getElementById("drawerChart").getContext('2d');
      drawerChart = new Chart(ctx, {
         type: 'line',
         data: {
           labels: labels,
           datasets: [
             {
               label: "Buy Price",
               data: buyPrices,
               borderColor: 'rgba(26,115,232,1)',
               backgroundColor: 'rgba(26,115,232,0.2)',
               fill: false,
               tension: 0.1
             },
             {
               label: "Sales Price",
               data: salesPrices,
               borderColor: 'rgba(220,50,45,1)',
               backgroundColor: 'rgba(220,50,45,0.2)',
               fill: false,
               tension: 0.1
             },
             {
               label: "Difference (Sales - Buy)",
               data: differences,
               borderColor: 'rgba(52,168,83,1)',
               backgroundColor: 'rgba(52,168,83,0.2)',
               fill: false,
               tension: 0.1
             }
           ]
         },
         options: { scales: { y: { beginAtZero: true } } }
      });
    }

    function computeMetric(sellingPrice, calcType) {
      let purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      if(calcType === "roi") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let profit = totalRevenue - totalCost;
         return (profit / totalCost) * 100;
      } else if(calcType === "profit") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         return totalRevenue - totalCost;
      } else if(calcType === "annualizedROI") {
         let holdingPeriod = parseFloat(document.getElementById("calcHoldingPeriod").value) || 1;
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0 || holdingPeriod <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let overallROI = (totalRevenue - totalCost) / totalCost;
         return (Math.pow((1 + overallROI), (1 / holdingPeriod)) - 1) * 100;
      } else if(calcType === "markup") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let effectiveCost = purchasePrice + (commission / quantity);
         return ((sellingPrice - effectiveCost) / effectiveCost) * 100;
      } else if(calcType === "profitMargin") {
         if(purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) return 0;
         let totalCost = (purchasePrice * quantity) + commission;
         let totalRevenue = sellingPrice * quantity;
         let profit = totalRevenue - totalCost;
         return (profit / totalRevenue) * 100;
      } else if(calcType === "breakEven") {
         if(purchasePrice <= 0 || quantity <= 0) return 0;
         return ((purchasePrice * quantity) + commission) / quantity;
      }
      return 0;
    }

    function calculate() {
      let calcType = document.getElementById("calcType").value;
      if(calcType === "roi") { 
        calculateROI(); 
      } else if(calcType === "profit") { 
        calculateProfit(); 
      } else if(calcType === "breakEven") { 
        calculateBreakEven(); 
      } else if(calcType === "annualizedROI") { 
        calculateAnnualizedROI(); 
      } else if(calcType === "markup") {
        calculateMarkup();
      } else if(calcType === "profitMargin") {
        calculateProfitMargin();
      }
      updateCalcChart();
    }
  </script>
</body>
</html>
