@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Portfolio - Holdings";
}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"]</title>

  <!-- Tabulator CSS -->
  <link rel="stylesheet" href="https://unpkg.com/tabulator-tables@5.3.4/dist/css/tabulator.min.css" />
  <!-- Tabulator JS -->
  <script src="https://unpkg.com/tabulator-tables@5.3.4/dist/js/tabulator.min.js"></script>
  <!-- Roboto Font -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

  <style>
    /* Global Styles */
    body {
      margin: 0;
      font-family: 'Roboto', "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f5f5;
      color: #202124;
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    body.dark-mode {
      background-color: #202124;
      color: #e8eaed;
    }
    .container {
      max-width: 1200px;
      margin: 20px auto;
      padding: 0 20px;
    }

    /* Header */
    .main-header {
      background-color: #fff;
      border-bottom: 1px solid #dadce0;
      padding: 10px 0;
      box-shadow: 0 2px 4px rgba(60,64,67,0.1);
    }
    body.dark-mode .main-header {
      background-color: #303134;
      border-bottom: 1px solid #5f6368;
    }
    .app-title {
      font-size: 1.8rem;
      font-weight: 500;
      margin: 0;
      color: #202124;
    }
    body.dark-mode .app-title {
      color: #e8eaed;
    }

    /* Button Styles */
    .btn {
      display: inline-block;
      padding: 10px 16px;
      font-size: 15px;
      cursor: pointer;
      border: none;
      border-radius: 2px;
      background-color: #1a73e8;
      color: #fff;
      transition: background-color 0.3s ease, box-shadow 0.3s ease;
      margin: 5px 4px;
      text-decoration: none;
    }
    .btn:hover {
      background-color: #1669c1;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .btn-secondary {
      background-color: #34a853;
    }
    .btn-secondary:hover {
      background-color: #2d8c46;
    }
    .btn-danger {
      background-color: #d93025;
    }
    .btn-danger:hover {
      background-color: #b1271b;
    }
    .btn-sm {
      padding: 6px 10px;
      font-size: 13px;
    }

    /* Search Box */
    #search {
      width: 100%;
      padding: 10px 14px;
      font-size: 15px;
      border: 1px solid #dadce0;
      border-radius: 2px;
      margin: 20px 0;
      outline: none;
      transition: border-color 0.3s ease;
    }
    #search:focus {
      border-color: #1a73e8;
    }

    /* Tabulator Table Overrides */
    .tabulator {
      background-color: #fff !important;
      border: 1px solid #dadce0;
      box-shadow: 0 2px 4px rgba(60,64,67,0.1);
      border-radius: 4px;
      margin-bottom: 20px;
    }
    .tabulator-header {
      background-color: #f8f9fa !important;
      border-bottom: 1px solid #dadce0 !important;
      font-weight: 500;
    }
    .tabulator-header .tabulator-col {
      border-right: 1px solid #dadce0 !important;
      color: #202124;
    }
    .tabulator-header .tabulator-col:last-of-type {
      border-right: none !important;
    }
    .tabulator-row {
      border-bottom: 1px solid #e0e0e0;
    }
    .tabulator-row:hover {
      background-color: #f1f3f4;
    }

    /* Cards View */
    .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }
    .finance-card {
      flex: 1 1 calc(33.33% - 20px);
      background-color: #fff;
      border: 1px solid #dadce0;
      border-radius: 4px;
      padding: 16px;
      box-shadow: 0 2px 4px rgba(60,64,67,0.1);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .finance-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(60,64,67,0.15);
    }
    .finance-card h3 {
      font-size: 1.3rem;
      font-weight: 500;
      margin-bottom: 0.5rem;
      color: #1a73e8;
    }
    .finance-card p {
      font-size: 14px;
      margin: 4px 0;
      color: #5f6368;
    }

    /* Loading Spinner & Status Message */
    #loading {
      display: none;
      text-align: center;
      margin: 20px 0;
    }
    .spinner {
      border: 4px solid rgba(0,0,0,0.2);
      width: 36px;
      height: 36px;
      border-radius: 50%;
      border-left-color: #1a73e8;
      animation: spin 1s linear infinite;
      margin: auto;
    }
        @@keyframes spin {
      to { transform: rotate(360deg); }
    }
    #loading p {
      font-size: 16px;
      margin-top: 10px;
      color: #202124;
    }

    /* Modal Styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      overflow: auto;
    }
    .modal-content {
      background-color: #fff;
      margin: 10% auto;
      padding: 20px;
      border-radius: 4px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 4px 8px rgba(60,64,67,0.15);
    }
    .modal-content h3 {
      margin-top: 0;
      font-size: 1.4rem;
      color: #202124;
    }
    .modal-content input,
    .modal-content select {
      width: 100%;
      padding: 10px;
      margin: 8px 0 16px;
      border: 1px solid #dadce0;
      border-radius: 2px;
      font-size: 15px;
    }
    .modal-content .modal-actions {
      text-align: right;
    }

    /* Status Message */
    #statusMessage {
      display: none;
      margin-top: 10px;
      font-size: 16px;
      text-align: center;
    }
  </style>
</head>
<body class="light-mode">
  <header class="main-header">
    <div class="container">
      <h1 class="app-title">Finance Portfolio Holdings</h1>
    </div>
  </header>
  <div class="container">
    <!-- Top Controls -->
    <div style="margin: 20px 0;">
      <button class="btn" onclick="toggleTheme()">Toggle Theme</button>
      <button class="btn btn-secondary" onclick="groupByPortfolio()">Group by Portfolio</button>
      <button class="btn btn-secondary" onclick="groupBySymbol()">Group by Symbol</button>
      <button class="btn btn-secondary" onclick="clearGrouping()">Clear Grouping</button>
      <button class="btn btn-secondary" onclick="expandAllGroups()">Expand All Groups</button>
      <button class="btn btn-secondary" onclick="collapseAllGroups()">Collapse All Groups</button>
    </div>
    <!-- Bottom Buttons -->
    <div style="margin-bottom:20px;">
      <button class="btn" onclick="addRow()">Add Transaction</button>
      <button class="btn" onclick="saveToJson()">Save JSON</button>
      <button class="btn" onclick="loadFromJson()">Load JSON from File</button>
      <button class="btn btn-secondary" onclick="loadFromAPI()">Load from API</button>
      <button class="btn" id="toggleViewBtn" onclick="toggleView()">Switch to Cards View</button>
    </div>
    <!-- Search Box -->
    <input type="text" id="search" placeholder="üîç Search asset..." onkeyup="filterTable()" />
    <!-- Loading Spinner & Message -->
    <div id="loading">
      <div class="spinner"></div>
      <p>Loading...</p>
    </div>
    <!-- Status Message -->
    <div id="statusMessage"></div>
    <!-- Tabulator Table View -->
    <div id="portfolioTable"></div>
    <!-- Cards View (hidden by default) -->
    <div id="cardsView" class="card-container" style="display:none;"></div>
  </div>

  <!-- Edit Modal -->
  <div id="editModal" class="modal">
    <div class="modal-content">
      <h3>Edit Transaction</h3>
      <label for="editSymbol">Asset</label>
      <input type="text" id="editSymbol" />
      <label for="editOperationType">Type</label>
      <select id="editOperationType">
        <option value="Buy">Buy</option>
        <option value="Sell">Sell</option>
        <option value="Close">Close</option>
      </select>
      <label for="editQuantity">Quantity</label>
      <input type="number" id="editQuantity" min="1" />
      <label for="editPurchasePrice">Price (‚Ç¨)</label>
      <input type="number" id="editPurchasePrice" min="0" step="0.01" />
      <label for="editCommission">Commission (‚Ç¨)</label>
      <input type="number" id="editCommission" min="0" step="0.01" />
      <!-- Button to open the Financial Calculator modal from the edit modal -->
      <button class="btn btn-secondary" type="button" onclick="openCalcFromEdit()">Calculadora de Finan√ßas</button>
      <div class="modal-actions">
        <button class="btn" onclick="saveModal()">Save</button>
        <button class="btn btn-danger" onclick="closeModal()">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Financial Calculator Modal -->
  <div id="calcModal" class="modal">
    <div class="modal-content">
      <h3>Calculadora de Finan√ßas</h3>
      <!-- Display the base data (row, group or edit modal) -->
      <p id="calcBaseData"></p>
      <label for="calcType">Tipo de C√°lculo</label>
      <select id="calcType" onchange="updateCalcModalFields()">
        <option value="roi">ROI</option>
        <option value="profit">Lucro</option>
        <option value="breakEven">Ponto de Equil√≠brio</option>
        <option value="annualizedROI">ROI Anualizado</option>
        <option value="markup">Markup (%)</option>
        <option value="profitMargin">Margem de Lucro (%)</option>
      </select>
      <!-- Container for Selling Price input -->
      <div id="sellingPriceContainer">
        <label for="calcSellingPrice">Pre√ßo de Venda (‚Ç¨)</label>
        <input type="number" id="calcSellingPrice" min="0" step="0.01" />
      </div>
      <!-- Container for Holding Period input (for Annualized ROI) -->
      <div id="holdingPeriodContainer" style="display:none;">
        <label for="calcHoldingPeriod">Per√≠odo de Reten√ß√£o (anos)</label>
        <input type="number" id="calcHoldingPeriod" min="0" step="0.1" />
      </div>
      <button class="btn" onclick="calculate()">Calcular</button>
      <p id="calcResult"></p>
      <div class="modal-actions">
        <button class="btn btn-danger" onclick="closeCalcModal()">Fechar</button>
      </div>
    </div>
  </div>

  <script>
    // Global variable to hold base data for the calculator (from row, group or edit modal)
    var currentCalcData = null;

    // Auto-load API data on page load
    window.addEventListener("DOMContentLoaded", () => {
      loadFromAPI();
    });

    /*******************************************************
     * STATUS MESSAGE FUNCTIONALITY
     *******************************************************/
    function showStatus(message, type) {
      const statusDiv = document.getElementById("statusMessage");
      statusDiv.style.display = "block";
      if (type === "pending") {
        statusDiv.style.color = "#1a73e8";
      } else if (type === "success") {
        statusDiv.style.color = "#34a853";
      } else if (type === "error") {
        statusDiv.style.color = "#d93025";
      } else {
        statusDiv.style.color = "#202124";
      }
      statusDiv.textContent = message;
      if (type !== "pending") {
        setTimeout(() => { statusDiv.style.display = "none"; }, 3000);
      }
    }

    /*******************************************************
     * THEME TOGGLE
     *******************************************************/
    function toggleTheme() {
      let body = document.body;
      if (body.classList.contains("light-mode")) {
        body.classList.remove("light-mode");
        body.classList.add("dark-mode");
      } else {
        body.classList.remove("dark-mode");
        body.classList.add("light-mode");
      }
    }

    /*******************************************************
     * TABULATOR INIT WITH GROUP HEADER (including Calc Group button)
     *******************************************************/
    let table = new Tabulator("#portfolioTable", {
      layout: "fitDataFill",
      responsiveLayout: "collapse",
      height: "auto",
      groupHeader: function(value, count, data, group){
        return `<span>${value} (${count} items)</span>
                <button class="btn btn-sm" onclick="openGroupCalcModal('${value}')">Calc Group</button>`;
      },
      columns: [
        { title: "ID", field: "id", visible: false },
        { title: "Portfolio", field: "portfolioName", visible: false },
        { title: "Asset", field: "symbol", editor: "input", headerFilter: "input" },
        {
          title: "Type",
          field: "operationType",
          editor: "select",
          editorParams: { values: ["Buy", "Sell", "Close"] }
        },
        {
          title: "Quantity",
          field: "quantity",
          editor: "number",
          validator: "min:1",
          cellEdited: updateTotal
        },
        {
          title: "Price (‚Ç¨)",
          field: "purchasePrice",
          editor: "number",
          validator: "min:0",
          cellEdited: updateTotal
        },
        {
          title: "Commission (‚Ç¨)",
          field: "commission",
          editor: "number",
          validator: "min:0",
          cellEdited: updateTotal
        },
        {
          title: "Total Value (‚Ç¨)",
          field: "totalValue",
          formatter: "money",
          editor: false,
          bottomCalc: "sum",
          bottomCalcFormatter: "money",
          bottomCalcFormatterParams: { precision: 2 }
        },
        {
          title: "Average Value (‚Ç¨)",
          field: "averageValue",
          formatter: "money",
          editor: false
        },
        {
          title: "Actions",
          formatter: function(cell, formatterParams) {
            return `<button class="btn btn-sm" data-action="edit">Edit</button>
                    <button class="btn btn-secondary btn-sm" data-action="calc">Calc</button>
                    <button class="btn btn-danger btn-sm" data-action="delete">Delete</button>`;
          },
          width: 150,
          align: "center",
          cellClick: function(e, cell) {
            let target = e.target;
            let row = cell.getRow();
            if (target.getAttribute("data-action") === "edit") {
              openEditModal(row);
            } else if (target.getAttribute("data-action") === "calc") {
              openRowCalcModal(row);
            } else if (target.getAttribute("data-action") === "delete") {
              let rowData = row.getData();
              if (rowData.id) {
                if (confirm("Are you sure you want to delete this item?")) {
                  fetch("/api/PortfolioItem/" + rowData.id, { method: "DELETE" })
                    .then(response => {
                      if (response.ok) {
                        row.delete();
                        showStatus("Item deleted successfully", "success");
                      } else {
                        showStatus("Failed to delete item", "error");
                        alert("Failed to delete item.");
                      }
                    })
                    .catch(error => {
                      console.error("Error deleting row:", error);
                      showStatus("Error deleting item", "error");
                    });
                }
              } else {
                row.delete();
              }
            }
          }
        }
      ],
      data: []
    });

    /*******************************************************
     * ROW OPERATIONS & CRUD API
     *******************************************************/
    function addRow() {
      table.addRow({
        symbol: "",
        operationType: "Buy",
        quantity: 1,
        purchasePrice: 0,
        commission: 0,
        totalValue: 0,
        averageValue: 0,
        portfolioName: ""
      });
    }

    function recalcRow(row) {
      let rowData = row.getData();
      let quantity = parseFloat(rowData.quantity) || 0;
      let price = parseFloat(rowData.purchasePrice) || 0;
      let commission = parseFloat(rowData.commission) || 0;
      let total = 0;
      switch (rowData.operationType) {
        case "Buy":
          total = (quantity * price) + commission;
          break;
        case "Sell":
          total = (quantity * price) - commission;
          break;
        case "Close":
          total = 0;
          break;
        default:
          total = 0;
          break;
      }
      let average = quantity > 0 ? (total / quantity).toFixed(2) : "0.00";
      row.update({
        totalValue: total.toFixed(2),
        averageValue: average
      });
    }

    function updateTotal(cell) {
      let row = cell.getRow();
      recalcRow(row);
      saveRow(row);
    }

    function saveRow(row) {
      let rowData = row.getData();
      showStatus("Saving...", "pending");
      if (rowData.id) {
        fetch("/api/PortfolioItem/" + rowData.id, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(rowData)
        })
        .then(response => {
          if (response.ok) {
            showStatus("Save successful", "success");
          } else {
            showStatus("Failed to update row: " + response.statusText, "error");
            console.error("Failed to update row:", response.statusText);
          }
        })
        .catch(error => {
          showStatus("Error updating row", "error");
          console.error("Error updating row:", error);
        });
      } else {
        fetch("/api/PortfolioItem", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(rowData)
        })
        .then(response => response.json())
        .then(data => {
          row.update({ id: data.id });
          showStatus("Save successful", "success");
        })
        .catch(error => {
          showStatus("Error creating row", "error");
          console.error("Error creating row:", error);
        });
      }
    }

    /*******************************************************
     * SEARCH / FILTER
     *******************************************************/
    function filterTable() {
      let value = document.getElementById("search").value.toLowerCase();
      table.setFilter("symbol", "like", value);
    }

    /*******************************************************
     * FILE IMPORT/EXPORT
     *******************************************************/
    function saveToJson() {
      let data = table.getData();
      let jsonData = JSON.stringify(data, null, 4);
      let blob = new Blob([jsonData], { type: "application/json" });
      let a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = "portfolio.json";
      a.click();
    }

    function loadFromJson() {
      let input = document.createElement("input");
      input.type = "file";
      input.accept = "application/json";
      input.onchange = function (event) {
        let file = event.target.files[0];
        let reader = new FileReader();
        reader.onload = function () {
          let data = JSON.parse(reader.result);
          table.setData(data);
        };
        reader.readAsText(file);
      };
      input.click();
    }

    /*******************************************************
     * LOAD FROM API (Read All Portfolios, Group Items)
     *******************************************************/
    function loadFromAPI() {
      document.getElementById("loading").style.display = "block";
      fetch("/api/Portfolio", {
        method: "GET",
        headers: { "Accept": "*/*" }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error("Error loading API data: " + response.statusText);
        }
        return response.json();
      })
      .then(data => {
        document.getElementById("loading").style.display = "none";
        if (data && data.length > 0) {
          let items = [];
          data.forEach(portfolio => {
            let portfolioName = portfolio.name || ("Portfolio " + portfolio.id);
            if (portfolio.items) {
              portfolio.items.forEach(item => {
                item.portfolioName = portfolioName;
                items.push(calculateRowValues(item));
              });
            }
          });
          if (items.length > 0) {
            table.setGroupBy("portfolioName");
            table.setData(items);
          } else {
            alert("No items found in any portfolio.");
          }
        } else {
          alert("No portfolio found.");
        }
      })
      .catch(error => {
        console.error(error);
        document.getElementById("loading").style.display = "none";
        alert("Error loading API data.");
      });
    }

    function calculateRowValues(item) {
      let { quantity, purchasePrice, commission, operationType } = item;
      let q = parseFloat(quantity) || 0;
      let price = parseFloat(purchasePrice) || 0;
      let comm = parseFloat(commission) || 0;
      let total = 0;
      switch (operationType) {
        case "Buy":
          total = (q * price) + comm;
          break;
        case "Sell":
          total = (q * price) - comm;
          break;
        case "Close":
          total = 0;
          break;
        default:
          total = 0;
          break;
      }
      let average = q > 0 ? (total / q).toFixed(2) : "0.00";
      return {
        ...item,
        totalValue: total.toFixed(2),
        averageValue: average
      };
    }

    /*******************************************************
     * MODAL FOR EDITING (Create/Edit)
     *******************************************************/
    let currentEditRow = null;
    function openEditModal(row) {
      currentEditRow = row;
      let rowData = row.getData();
      document.getElementById("editSymbol").value = rowData.symbol || "";
      document.getElementById("editOperationType").value = rowData.operationType || "Buy";
      document.getElementById("editQuantity").value = rowData.quantity || 1;
      document.getElementById("editPurchasePrice").value = rowData.purchasePrice || 0;
      document.getElementById("editCommission").value = rowData.commission || 0;
      document.getElementById("editModal").style.display = "block";
    }

    function closeModal() {
      document.getElementById("editModal").style.display = "none";
      currentEditRow = null;
    }

    function saveModal() {
      if (!currentEditRow) return;
      let newData = {
        symbol: document.getElementById("editSymbol").value,
        operationType: document.getElementById("editOperationType").value,
        quantity: parseFloat(document.getElementById("editQuantity").value) || 0,
        purchasePrice: parseFloat(document.getElementById("editPurchasePrice").value) || 0,
        commission: parseFloat(document.getElementById("editCommission").value) || 0
      };
      currentEditRow.update(newData);
      recalcRow(currentEditRow);
      saveRow(currentEditRow);
      closeModal();
    }

    /*******************************************************
     * GROUPING / UNGROUPING FEATURES
     *******************************************************/
    function groupByPortfolio() {
      table.setGroupBy("portfolioName");
    }
    function groupBySymbol() {
      table.setGroupBy("symbol");
    }
    function clearGrouping() {
      table.clearGroupBy();
    }

    /*******************************************************
     * EXPAND / COLLAPSE GROUPS
     *******************************************************/
    function expandAllGroups() {
      let groups = table.getGroups();
      groups.forEach(group => group.expand());
      showStatus("All groups expanded", "info");
    }
    function collapseAllGroups() {
      let groups = table.getGroups();
      groups.forEach(group => group.collapse());
      showStatus("All groups collapsed", "info");
    }

    /*******************************************************
     * TOGGLE TABLE <-> CARDS VIEW
     *******************************************************/
    function toggleView() {
      let tableDiv = document.getElementById("portfolioTable");
      let cardsDiv = document.getElementById("cardsView");
      let toggleBtn = document.getElementById("toggleViewBtn");
      if (tableDiv.style.display !== "none") {
        tableDiv.style.display = "none";
        cardsDiv.style.display = "flex";
        toggleBtn.textContent = "Switch to Table View";
        renderCards();
      } else {
        tableDiv.style.display = "block";
        cardsDiv.style.display = "none";
        toggleBtn.textContent = "Switch to Cards View";
      }
    }

    function renderCards() {
      let cardsDiv = document.getElementById("cardsView");
      cardsDiv.innerHTML = "";
      let data = table.getData();
      document.getElementById("loading").style.display = "block";
      setTimeout(() => {
        document.getElementById("loading").style.display = "none";
        data.forEach(item => {
          let card = document.createElement("div");
          card.className = "finance-card";
          card.innerHTML = `
            <h3>${item.symbol || "Asset"}</h3>
            <p>Portfolio: ${item.portfolioName || ""}</p>
            <p>Type: ${item.operationType}</p>
            <p>Quantity: ${item.quantity}</p>
            <p>Price (‚Ç¨): ${item.purchasePrice}</p>
            <p>Commission (‚Ç¨): ${item.commission}</p>
            <p>Total Value (‚Ç¨): ${item.totalValue}</p>
            <p>Average Value (‚Ç¨): ${item.averageValue}</p>
          `;
          cardsDiv.appendChild(card);
        });
      }, 500);
    }

    /*******************************************************
     * FINANCIAL CALCULATOR MODAL FUNCTIONS
     *******************************************************/
    // Opens the calculator modal using currentCalcData (if set) and displays base data.
    function openCalcModal() {
      document.getElementById("calcModal").style.display = "block";
      updateCalcModalFields();
      if (currentCalcData) {
        document.getElementById("calcBaseData").textContent =
          "Dados: Pre√ßo de Compra: ‚Ç¨" + currentCalcData.purchasePrice.toFixed(2) +
          ", Quantidade: " + currentCalcData.quantity +
          ", Comiss√£o: ‚Ç¨" + currentCalcData.commission.toFixed(2);
      } else {
        document.getElementById("calcBaseData").textContent = "";
      }
    }

    // Opens the calculator modal from the Edit modal (using its current field values)
    function openCalcFromEdit() {
      currentCalcData = {
        purchasePrice: parseFloat(document.getElementById("editPurchasePrice").value) || 0,
        quantity: parseFloat(document.getElementById("editQuantity").value) || 0,
        commission: parseFloat(document.getElementById("editCommission").value) || 0
      };
      openCalcModal();
    }

    // Opens the calculator modal for a specific row.
    function openRowCalcModal(row) {
      let rowData = row.getData();
      currentCalcData = {
        purchasePrice: parseFloat(rowData.purchasePrice) || 0,
        quantity: parseFloat(rowData.quantity) || 0,
        commission: parseFloat(rowData.commission) || 0
      };
      openCalcModal();
    }

    // Opens the calculator modal for a group by aggregating the group's rows.
    function openGroupCalcModal(groupKey) {
      let allData = table.getData();
      let groupRows = allData.filter(function(row) {
         return row.portfolioName === groupKey || row.symbol === groupKey;
      });
      let totalQuantity = 0, totalPurchaseCost = 0, totalCommission = 0;
      groupRows.forEach(function(row) {
          let qty = parseFloat(row.quantity) || 0;
          let price = parseFloat(row.purchasePrice) || 0;
          let comm = parseFloat(row.commission) || 0;
          totalQuantity += qty;
          totalPurchaseCost += (price * qty);
          totalCommission += comm;
      });
      let aggregatedPurchasePrice = totalQuantity > 0 ? totalPurchaseCost / totalQuantity : 0;
      currentCalcData = {
         purchasePrice: aggregatedPurchasePrice,
         quantity: totalQuantity,
         commission: totalCommission
      };
      openCalcModal();
    }

    function closeCalcModal() {
      document.getElementById("calcModal").style.display = "none";
      document.getElementById("calcResult").textContent = "";
      document.getElementById("calcSellingPrice").value = "";
      document.getElementById("calcHoldingPeriod").value = "";
      currentCalcData = null;
    }

    function updateCalcModalFields() {
      var calcType = document.getElementById("calcType").value;
      var sellingContainer = document.getElementById("sellingPriceContainer");
      var holdingContainer = document.getElementById("holdingPeriodContainer");
      if (calcType === "breakEven") {
        sellingContainer.style.display = "none";
        holdingContainer.style.display = "none";
      } else if (calcType === "annualizedROI") {
        sellingContainer.style.display = "block";
        holdingContainer.style.display = "block";
      } else {
        sellingContainer.style.display = "block";
        holdingContainer.style.display = "none";
      }
      document.getElementById("calcResult").textContent = "";
      document.getElementById("calcSellingPrice").value = "";
      document.getElementById("calcHoldingPeriod").value = "";
    }

    function calculate() {
      var calcType = document.getElementById("calcType").value;
      if(calcType === "roi") { 
        calculateROI(); 
      } else if(calcType === "profit") { 
        calculateProfit(); 
      } else if(calcType === "breakEven") { 
        calculateBreakEven(); 
      } else if(calcType === "annualizedROI") { 
        calculateAnnualizedROI(); 
      } else if(calcType === "markup") {
        calculateMarkup();
      } else if(calcType === "profitMargin") {
        calculateProfitMargin();
      }
    }

    function calculateROI() {
      var purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      var sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if (purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Insira valores v√°lidos para Pre√ßo de Compra, Quantidade e Pre√ßo de Venda.";
        return;
      }
      var totalCost = (purchasePrice * quantity) + commission;
      var totalRevenue = sellingPrice * quantity;
      var profit = totalRevenue - totalCost;
      var roi = (profit / totalCost) * 100;
      document.getElementById("calcResult").textContent = "ROI: " + roi.toFixed(2) + "%";
    }

    function calculateProfit() {
      var purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      var sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if (purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Insira valores v√°lidos para Pre√ßo de Compra, Quantidade e Pre√ßo de Venda.";
        return;
      }
      var totalCost = (purchasePrice * quantity) + commission;
      var totalRevenue = sellingPrice * quantity;
      var profit = totalRevenue - totalCost;
      document.getElementById("calcResult").textContent = "Lucro: ‚Ç¨" + profit.toFixed(2);
    }

    function calculateBreakEven() {
      var purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      if (purchasePrice <= 0 || quantity <= 0) {
        document.getElementById("calcResult").textContent = "Insira valores v√°lidos para Pre√ßo de Compra e Quantidade.";
        return;
      }
      var breakEvenPrice = ((purchasePrice * quantity) + commission) / quantity;
      document.getElementById("calcResult").textContent = "Ponto de Equil√≠brio: ‚Ç¨" + breakEvenPrice.toFixed(2);
    }

    function calculateAnnualizedROI() {
      var purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      var sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      var holdingPeriod = parseFloat(document.getElementById("calcHoldingPeriod").value) || 0;
      if (purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0 || holdingPeriod <= 0) {
        document.getElementById("calcResult").textContent = "Insira valores v√°lidos para Pre√ßo de Compra, Quantidade, Pre√ßo de Venda e Per√≠odo de Reten√ß√£o.";
        return;
      }
      var totalCost = (purchasePrice * quantity) + commission;
      var totalRevenue = sellingPrice * quantity;
      var overallROI = (totalRevenue - totalCost) / totalCost;
      var annualizedROI = (Math.pow((1 + overallROI), (1 / holdingPeriod)) - 1) * 100;
      document.getElementById("calcResult").textContent = "ROI Anualizado: " + annualizedROI.toFixed(2) + "%";
    }

    function calculateMarkup() {
      var purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      var sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if (purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Insira valores v√°lidos para Pre√ßo de Compra, Quantidade e Pre√ßo de Venda.";
        return;
      }
      // Effective cost per unit includes commission spread over quantity.
      var effectiveCost = purchasePrice + (commission / quantity);
      var markup = ((sellingPrice - effectiveCost) / effectiveCost) * 100;
      document.getElementById("calcResult").textContent = "Markup: " + markup.toFixed(2) + "%";
    }

    function calculateProfitMargin() {
      var purchasePrice, quantity, commission;
      if(currentCalcData) {
         purchasePrice = currentCalcData.purchasePrice;
         quantity = currentCalcData.quantity;
         commission = currentCalcData.commission;
      } else {
         purchasePrice = parseFloat(document.getElementById("editPurchasePrice").value) || 0;
         quantity = parseFloat(document.getElementById("editQuantity").value) || 0;
         commission = parseFloat(document.getElementById("editCommission").value) || 0;
      }
      var sellingPrice = parseFloat(document.getElementById("calcSellingPrice").value) || 0;
      if (purchasePrice <= 0 || quantity <= 0 || sellingPrice <= 0) {
        document.getElementById("calcResult").textContent = "Insira valores v√°lidos para Pre√ßo de Compra, Quantidade e Pre√ßo de Venda.";
        return;
      }
      var totalCost = (purchasePrice * quantity) + commission;
      var totalRevenue = sellingPrice * quantity;
      var profit = totalRevenue - totalCost;
      var profitMargin = (profit / totalRevenue) * 100;
      document.getElementById("calcResult").textContent = "Margem de Lucro: " + profitMargin.toFixed(2) + "%";
    }
  </script>
</body>
</html>
