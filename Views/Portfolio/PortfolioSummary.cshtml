<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Investment Portfolio Dashboard</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/luxon/2.3.1/luxon.min.js"></script>
  <style>
    :root {
      --primary-color: #6366f1;
      --primary-hover: #4f46e5;
      --secondary-color: #475569;
      --background-dark: #0f172a;
      --card-dark: #1e293b;
      --text-light: #e2e8f0;
      --text-muted: #94a3b8;
      --success-color: #22c55e;
      --danger-color: #ef4444;
      --warning-color: #f59e0b;
      --border-color: #334155;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      background-color: var(--background-dark);
      color: var(--text-light);
      line-height: 1.5;
    }

    /* Layout */
    .container {
      width: 100%;
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    .grid {
      display: grid;
      gap: 1.5rem;
      grid-template-columns: 1fr;
    }

    @@media (min-width: 768px) {
      .grid-cols-2 {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @@media (min-width: 1024px) {
      .grid-cols-3 {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    /* Cards */
    .card {
      background-color: var(--card-dark);
      border-radius: 0.75rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      overflow: hidden;
      transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .card-header {
      padding: 1.25rem 1.5rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .card-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-light);
    }

    .card-body {
      padding: 1.5rem;
    }

    /* Header */
    .header {
      background-color: var(--card-dark);
      padding: 1.25rem 0;
      margin-bottom: 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .logo-icon {
      width: 2rem;
      height: 2rem;
      background-color: var(--primary-color);
      border-radius: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .app-title {
      font-size: 1.5rem;
      font-weight: 700;
    }

    /* Controls */
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .control-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .label {
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--text-muted);
    }

    select, button {
      padding: 0.5rem 1rem;
      background-color: var(--card-dark);
      color: var(--text-light);
      border: 1px solid var(--border-color);
      border-radius: 0.5rem;
      font-size: 0.875rem;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    select:hover, button:hover {
      border-color: var(--primary-color);
    }

    select:focus, button:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
    }

    button {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      font-weight: 500;
    }

    button:hover {
      background-color: var(--primary-hover);
    }

    /* Stats */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background-color: var(--card-dark);
      padding: 1.25rem;
      border-radius: 0.75rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .stat-title {
      font-size: 0.875rem;
      color: var(--text-muted);
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 600;
    }

    .stat-change {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      font-size: 0.875rem;
    }

    .positive {
      color: var(--success-color);
    }

    .negative {
      color: var(--danger-color);
    }

    /* Charts */
    .chart-container {
      position: relative;
      height: 350px;
      width: 100%;
    }

    /* Table */
    .table-container {
      overflow-x: auto;
      margin-top: 1.5rem;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      text-align: left;
    }

    th, td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid var(--border-color);
    }

    th {
      background-color: rgba(71, 85, 105, 0.2);
      font-weight: 500;
      color: var(--text-muted);
      font-size: 0.875rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    tr:hover {
      background-color: rgba(71, 85, 105, 0.1);
    }

    /* Badge */
    .badge {
      display: inline-flex;
      align-items: center;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .badge-success {
      background-color: rgba(34, 197, 94, 0.1);
      color: var(--success-color);
    }

    .badge-danger {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--danger-color);
    }

    .badge-neutral {
      background-color: rgba(148, 163, 184, 0.1);
      color: var(--text-muted);
    }

    /* Utilities */
    .mb-4 {
      margin-bottom: 1rem;
    }

    .mb-6 {
      margin-bottom: 1.5rem;
    }

    .text-right {
      text-align: right;
    }

    .font-medium {
      font-weight: 500;
    }

    .text-sm {
      font-size: 0.875rem;
    }

    .text-xs {
      font-size: 0.75rem;
    }

    .text-muted {
      color: var(--text-muted);
    }

    /* Footer */
    .footer {
      margin-top: 2rem;
      padding: 1.5rem 0;
      border-top: 1px solid var(--border-color);
      text-align: center;
      color: var(--text-muted);
      font-size: 0.875rem;
    }

    /* Responsive */
    @@media (max-width: 640px) {
      .header-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .controls {
        flex-direction: column;
        align-items: flex-start;
      }

      .stats-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="container">
      <div class="header-content">
        <div class="logo">
          <div class="logo-icon">P</div>
          <h1 class="app-title">Portfolio Dashboard</h1>
        </div>
        <div class="date-display text-muted" id="currentDate"></div>
      </div>
    </div>
  </header>

  <main class="container">
    <div class="controls">
      <div class="control-group">
        <label class="label" for="period">Time Period:</label>
        <select id="period" onchange="renderAll()">
          <option value="today">Today</option>
          <option value="1week">1 Week</option>
          <option value="1month">1 Month</option>
          <option value="1year">1 Year</option>
        </select>
      </div>
      <div class="control-group">
        <label class="label" for="sortBy">Sort By:</label>
        <select id="sortBy" onchange="renderAll()">
          <option value="value">Value</option>
          <option value="performance">Performance</option>
          <option value="alphabetical">Alphabetical</option>
        </select>
      </div>
      <button onclick="toggleView()">Toggle View</button>
    </div>

    <div class="stats-grid mb-6">
      <div class="stat-card">
        <div class="stat-title">Total Portfolio Value</div>
        <div class="stat-value" id="totalValue">$0.00</div>
      </div>
      <div class="stat-card">
        <div class="stat-title">Overall Performance</div>
        <div class="stat-value" id="overallPerf">0.00%</div>
        <div class="stat-change" id="overallPerfText"></div>
      </div>
      <div class="stat-card">
        <div class="stat-title">Top Performer</div>
        <div class="stat-value" id="topPerformer">-</div>
        <div class="stat-change positive" id="topPerformerValue"></div>
      </div>
      <div class="stat-card">
        <div class="stat-title">Worst Performer</div>
        <div class="stat-value" id="worstPerformer">-</div>
        <div class="stat-change negative" id="worstPerformerValue"></div>
      </div>
    </div>

    <div class="grid grid-cols-2 mb-6">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Portfolio Allocation</h2>
        </div>
        <div class="card-body">
          <div class="chart-container">
            <canvas id="pieChart"></canvas>
          </div>
        </div>
      </div>
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Performance by Asset</h2>
        </div>
        <div class="card-body">
          <div class="chart-container">
            <canvas id="barChart"></canvas>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-6">
      <div class="card-header">
        <h2 class="card-title">Performance Heatmap</h2>
      </div>
      <div class="card-body">
        <div id="heatmap" style="height: 350px;"></div>
      </div>
    </div>

    <div class="card">
      <div class="card-header">
        <h2 class="card-title">Holdings</h2>
        <div class="text-sm text-muted" id="holdingsCount">0 Assets</div>
      </div>
      <div class="card-body">
        <div class="table-container">
          <table id="holdingsTable">
            <thead>
              <tr>
                <th>Ticker</th>
                <th>Name</th>
                <th>Sector</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total Value</th>
                <th>% of Portfolio</th>
                <th>Performance</th>
              </tr>
            </thead>
            <tbody id="holdingsTableBody">
              <!-- Table content will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </main>

  <footer class="footer">
    <div class="container">
      <p>Investment Portfolio Dashboard © 2025. All data shown is for demonstrational purposes only.</p>
    </div>
  </footer>

  <script>
    // Portfolio data
    const portfolio = [
      { ticker: "AAPL", name: "Apple", sector: "Technology", price: 175.23, quantity: 20, variations: { today: 1.2, "1week": 3.5, "1month": 6.8, "1year": 30.2 } },
      { ticker: "XOM", name: "Exxon", sector: "Energy", price: 102.45, quantity: 10, variations: { today: -0.8, "1week": 0.5, "1month": 1.2, "1year": 12.5 } },
      { ticker: "JPM", name: "JPMorgan", sector: "Financial", price: 142.10, quantity: 15, variations: { today: 0.4, "1week": -0.3, "1month": 1.1, "1year": 5.7 } },
      { ticker: "PFE", name: "Pfizer", sector: "Healthcare", price: 39.88, quantity: 25, variations: { today: -1.2, "1week": 2.0, "1month": -0.4, "1year": -3.2 } },
      { ticker: "NVDA", name: "NVIDIA", sector: "Technology", price: 820.55, quantity: 5, variations: { today: 2.3, "1week": 5.1, "1month": 8.4, "1year": 42.6 } },
      { ticker: "TSLA", name: "Tesla", sector: "Consumer", price: 191.88, quantity: 12, variations: { today: -3.1, "1week": -4.0, "1month": -6.7, "1year": 15.0 } }
    ];

    // Chart objects
    let pieChart = null;
    let barChart = null;
    
    // Format currency
    function formatCurrency(value) {
      return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);
    }

    // Format percent
    function formatPercent(value) {
      return `${value.toFixed(2)}%`;
    }

    // Get badge class based on value
    function getBadgeClass(value) {
      if (value > 0) return "badge-success";
      if (value < 0) return "badge-danger";
      return "badge-neutral";
    }

    // Get arrow based on value
    function getArrow(value) {
      if (value > 0) return "▲";
      if (value < 0) return "▼";
      return "◆";
    }

    // Set current date
    function setCurrentDate() {
      const now = new Date();
      const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      document.getElementById('currentDate').textContent = now.toLocaleDateString('en-US', options);
    }

    // Calculate portfolio statistics
    function calculateStats(period) {
      const totalValue = portfolio.reduce((sum, asset) => sum + asset.price * asset.quantity, 0);
      
      // Calculate weighted average performance
      let weightedPerformance = 0;
      for (const asset of portfolio) {
        const assetValue = asset.price * asset.quantity;
        const weight = assetValue / totalValue;
        weightedPerformance += asset.variations[period] * weight;
      }
      
      // Find top and worst performers
      let topPerformer = portfolio[0];
      let worstPerformer = portfolio[0];
      
      for (const asset of portfolio) {
        if (asset.variations[period] > topPerformer.variations[period]) {
          topPerformer = asset;
        }
        if (asset.variations[period] < worstPerformer.variations[period]) {
          worstPerformer = asset;
        }
      }
      
      return {
        totalValue,
        performance: weightedPerformance,
        topPerformer,
        worstPerformer
      };
    }

    // Sort portfolio based on user selection
    function sortPortfolio(period, sortBy) {
      const sortedPortfolio = [...portfolio];
      
      switch (sortBy) {
        case "value":
          sortedPortfolio.sort((a, b) => (b.price * b.quantity) - (a.price * a.quantity));
          break;
        case "performance":
          sortedPortfolio.sort((a, b) => b.variations[period] - a.variations[period]);
          break;
        case "alphabetical":
          sortedPortfolio.sort((a, b) => a.name.localeCompare(b.name));
          break;
      }
      
      return sortedPortfolio;
    }

    // Render statistics
    function renderStats(period) {
      const stats = calculateStats(period);
      
      document.getElementById('totalValue').textContent = formatCurrency(stats.totalValue);
      document.getElementById('overallPerf').textContent = formatPercent(stats.performance);
      document.getElementById('overallPerfText').textContent = `${getArrow(stats.performance)} Over ${period}`;
      document.getElementById('overallPerfText').className = `stat-change ${stats.performance >= 0 ? 'positive' : 'negative'}`;
      
      document.getElementById('topPerformer').textContent = stats.topPerformer.ticker;
      document.getElementById('topPerformerValue').textContent = `${getArrow(stats.topPerformer.variations[period])} ${formatPercent(stats.topPerformer.variations[period])}`;
      
      document.getElementById('worstPerformer').textContent = stats.worstPerformer.ticker;
      document.getElementById('worstPerformerValue').textContent = `${getArrow(stats.worstPerformer.variations[period])} ${formatPercent(stats.worstPerformer.variations[period])}`;
      
      document.getElementById('holdingsCount').textContent = `${portfolio.length} Assets`;
    }

    // Render pie chart
    function renderPieChart() {
      const ctx = document.getElementById('pieChart').getContext('2d');
      
      // Calculate values and percentages
      const totalValue = portfolio.reduce((sum, asset) => sum + asset.price * asset.quantity, 0);
      const labels = portfolio.map(asset => asset.ticker);
      const values = portfolio.map(asset => asset.price * asset.quantity);
      
      // Define colors based on sectors
      const sectorColors = {
        'Technology': '#6366f1',
        'Energy': '#f59e0b',
        'Financial': '#10b981',
        'Healthcare': '#ef4444',
        'Consumer': '#8b5cf6'
      };
      
      const colors = portfolio.map(asset => sectorColors[asset.sector] || '#94a3b8');
      
      // Create or update chart
      if (pieChart) {
        pieChart.data.labels = labels;
        pieChart.data.datasets[0].data = values;
        pieChart.data.datasets[0].backgroundColor = colors;
        pieChart.update();
      } else {
        pieChart = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: labels,
            datasets: [{
              data: values,
              backgroundColor: colors,
              borderColor: '#1e293b',
              borderWidth: 2,
              hoverOffset: 15
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'right',
                labels: {
                  color: '#e2e8f0',
                  font: {
                    size: 12
                  },
                  generateLabels: function(chart) {
                    const data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                      return data.labels.map(function(label, i) {
                        const value = data.datasets[0].data[i];
                        const percentage = ((value / totalValue) * 100).toFixed(1);
                        return {
                          text: `${label} (${percentage}%)`,
                          fillStyle: data.datasets[0].backgroundColor[i],
                          strokeStyle: '#1e293b',
                          lineWidth: 2,
                          hidden: false,
                          index: i
                        };
                      });
                    }
                    return [];
                  }
                }
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.label || '';
                    const value = context.raw || 0;
                    const percentage = ((value / totalValue) * 100).toFixed(1);
                    return `${label}: ${formatCurrency(value)} (${percentage}%)`;
                  }
                }
              }
            },
            cutout: '60%'
          }
        });
      }
    }

    // Render bar chart
    function renderBarChart(period) {
      const ctx = document.getElementById('barChart').getContext('2d');
      
      const labels = portfolio.map(asset => asset.ticker);
      const values = portfolio.map(asset => asset.variations[period]);
      
      // Colors based on performance
      const colors = values.map(value => 
        value > 0 ? 'rgba(34, 197, 94, 0.7)' : 'rgba(239, 68, 68, 0.7)'
      );
      
      // Create or update chart
      if (barChart) {
        barChart.data.labels = labels;
        barChart.data.datasets[0].data = values;
        barChart.data.datasets[0].backgroundColor = colors;
        barChart.options.plugins.title.text = `Performance by Asset (${period})`;
        barChart.update();
      } else {
        barChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Performance (%)',
              data: values,
              backgroundColor: colors,
              borderColor: colors.map(color => color.replace('0.7', '1')),
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(71, 85, 105, 0.1)'
                },
                ticks: {
                  color: '#94a3b8',
                  callback: function(value) {
                    return value + '%';
                  }
                }
              },
              x: {
                grid: {
                  display: false
                },
                ticks: {
                  color: '#94a3b8'
                }
              }
            },
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return `${context.dataset.label}: ${context.raw.toFixed(2)}%`;
                  }
                }
              },
              title: {
                display: true,
                text: `Performance by Asset (${period})`,
                color: '#e2e8f0',
                font: {
                  size: 16
                }
              }
            }
          }
        });
      }
    }

    // Render heatmap
    function renderHeatmap(period) {
      const sortedPortfolio = sortPortfolio(period, document.getElementById('sortBy').value);
      const labelsY = sortedPortfolio.map(p => `${p.sector} - ${p.ticker} (${p.name})`);
      const z = sortedPortfolio.map(p => [p.variations[period]]);
      const tooltip = sortedPortfolio.map(p => {
        const val = p.variations[period];
        const color = val > 0 ? '#22c55e' : val < 0 ? '#ef4444' : '#f59e0b';
        const arrow = val > 0 ? '▲' : val < 0 ? '▼' : '◆';
        return `<span style="color:${color}">${p.name} (${p.ticker})<br>${arrow} ${val.toFixed(2)}%<br>Qty: ${p.quantity}<br>${formatCurrency(p.price)}</span>`;
      });

      Plotly.newPlot("heatmap", [{
        z: z,
        x: ["Performance"],
        y: labelsY,
        type: "heatmap",
        text: tooltip,
        hoverinfo: "text",
        colorscale: [
          [0, "rgba(239, 68, 68, 0.9)"],
          [0.5, "rgba(245, 158, 11, 0.9)"],
          [1, "rgba(34, 197, 94, 0.9)"]
        ],
        showscale: true
      }], {
        title: `Performance Heatmap (${period})`,
        plot_bgcolor: "rgba(30, 41, 59, 0)",
        paper_bgcolor: "rgba(30, 41, 59, 0)",
        font: { color: "#e2e8f0" },
        margin: { l: 150, r: 50, t: 50, b: 50 }
      });
    }

    // Render holdings table
    function renderHoldingsTable(period) {
      const sortedPortfolio = sortPortfolio(period, document.getElementById('sortBy').value);
      const totalValue = sortedPortfolio.reduce((sum, asset) => sum + asset.price * asset.quantity, 0);
      
      const tableBody = document.getElementById('holdingsTableBody');
      tableBody.innerHTML = '';
      
      for (const asset of sortedPortfolio) {
        const assetValue = asset.price * asset.quantity;
        const portfolioPercentage = (assetValue / totalValue) * 100;
        const variation = asset.variations[period];
        
        const row = document.createElement('tr');
        row.innerHTML = `
          <td><strong>${asset.ticker}</strong></td>
          <td>${asset.name}</td>
          <td>${asset.sector}</td>
          <td>${asset.quantity}</td>
          <td>${formatCurrency(asset.price)}</td>
          <td>${formatCurrency(assetValue)}</td>
          <td>${portfolioPercentage.toFixed(2)}%</td>
          <td>
            <span class="badge ${getBadgeClass(variation)}">
              ${getArrow(variation)} ${formatPercent(variation)}
            </span>
          </td>
        `;
        
        tableBody.appendChild(row);
      }
    }

    // Toggle view function
    function toggleView() {
      const heatmapContainer = document.getElementById('heatmap').parentNode.parentNode;
      if (heatmapContainer.style.display === 'none') {
        heatmapContainer.style.display = 'block';
      } else {
        heatmapContainer.style.display = 'none';
      }
    }

    // Render all components
    function renderAll() {
      // Get current period selection
      const period = document.getElementById('period').value;
      
      renderStats(period);
      renderPieChart();
      renderBarChart(period);
      renderHeatmap(period);
      renderHoldingsTable(period);
    }

    // Initialize on page load
    window.onload = function() {
      setCurrentDate();
      renderAll();
    };
  </script>
</body>
</html>
