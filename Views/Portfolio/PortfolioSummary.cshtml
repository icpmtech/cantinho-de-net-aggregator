<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Investment Portfolio Dashboard</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/luxon/2.3.1/luxon.min.js"></script>
  <style>
    :root {
      --primary-color: #6366f1;
      --primary-hover: #4f46e5;
      --secondary-color: #475569;
      --background-dark: #0f172a;
      --card-dark: #1e293b;
      --text-light: #e2e8f0;
      --text-muted: #94a3b8;
      --success-color: #22c55e;
      --danger-color: #ef4444;
      --warning-color: #f59e0b;
      --border-color: #334155;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      background-color: var(--background-dark);
      color: var(--text-light);
      line-height: 1.5;
    }

    /* Layout */
    .container {
      width: 100%;
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    .grid {
      display: grid;
      gap: 1.5rem;
      grid-template-columns: 1fr;
    }

    @@media (min-width: 768px) {
      .grid-cols-2 {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @@media (min-width: 1024px) {
      .grid-cols-3 {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    /* Cards */
    .card {
      background-color: var(--card-dark);
      border-radius: 0.75rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      overflow: hidden;
      transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .card-header {
      padding: 1.25rem 1.5rem;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .card-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-light);
    }

    .card-body {
      padding: 1.5rem;
    }

    /* Header */
    .header {
      background-color: var(--card-dark);
      padding: 1.25rem 0;
      margin-bottom: 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .logo-icon {
      width: 2rem;
      height: 2rem;
      background-color: var(--primary-color);
      border-radius: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .app-title {
      font-size: 1.5rem;
      font-weight: 700;
    }

    /* Controls */
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .control-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .label {
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--text-muted);
    }

    select, button {
      padding: 0.5rem 1rem;
      background-color: var(--card-dark);
      color: var(--text-light);
      border: 1px solid var(--border-color);
      border-radius: 0.5rem;
      font-size: 0.875rem;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    select:hover, button:hover {
      border-color: var(--primary-color);
    }

    select:focus, button:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
    }

    button {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
      font-weight: 500;
    }

    button:hover {
      background-color: var(--primary-hover);
    }

    /* Stats */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .stat-card {
      background-color: var(--card-dark);
      padding: 1.25rem;
      border-radius: 0.75rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .stat-title {
      font-size: 0.875rem;
      color: var(--text-muted);
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 600;
    }

    .stat-change {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      font-size: 0.875rem;
    }

    .positive {
      color: var(--success-color);
    }

    .negative {
      color: var(--danger-color);
    }

    /* Charts */
    .chart-container {
      position: relative;
      height: 350px;
      width: 100%;
    }

    /* Table */
    .table-container {
      overflow-x: auto;
      margin-top: 1.5rem;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      text-align: left;
    }

    th, td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid var(--border-color);
    }

    th {
      background-color: rgba(71, 85, 105, 0.2);
      font-weight: 500;
      color: var(--text-muted);
      font-size: 0.875rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    tr:hover {
      background-color: rgba(71, 85, 105, 0.1);
    }

    /* Badge */
    .badge {
      display: inline-flex;
      align-items: center;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .badge-success {
      background-color: rgba(34, 197, 94, 0.1);
      color: var(--success-color);
    }

    .badge-danger {
      background-color: rgba(239, 68, 68, 0.1);
      color: var(--danger-color);
    }

    .badge-neutral {
      background-color: rgba(148, 163, 184, 0.1);
      color: var(--text-muted);
    }

    /* Utilities */
    .mb-4 {
      margin-bottom: 1rem;
    }

    .mb-6 {
      margin-bottom: 1.5rem;
    }

    .text-right {
      text-align: right;
    }

    .font-medium {
      font-weight: 500;
    }

    .text-sm {
      font-size: 0.875rem;
    }

    .text-xs {
      font-size: 0.75rem;
    }

    .text-muted {
      color: var(--text-muted);
    }

    /* Footer */
    .footer {
      margin-top: 2rem;
      padding: 1.5rem 0;
      border-top: 1px solid var(--border-color);
      text-align: center;
      color: var(--text-muted);
      font-size: 0.875rem;
    }

    /* Responsive */
    @@media (max-width: 640px) {
      .header-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .controls {
        flex-direction: column;
        align-items: flex-start;
      }

      .stats-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="container">
      <div class="header-content">
        <div class="logo">
          <div class="logo-icon">P</div>
          <h1 class="app-title">Portfolio Dashboard</h1>
        </div>
        <div class="date-display text-muted" id="currentDate"></div>
      </div>
    </div>
  </header>

  <main class="container">
    <div class="controls">
      <div class="control-group">
        <label class="label" for="period">Time Period:</label>
        <select id="period" onchange="renderAll()">
          <option value="today">Today</option>
          <option value="1week">1 Week</option>
          <option value="1month">1 Month</option>
          <option value="1year">1 Year</option>
        </select>
      </div>
      <div class="control-group">
        <label class="label" for="sortBy">Sort By:</label>
        <select id="sortBy" onchange="renderAll()">
          <option value="value">Value</option>
          <option value="performance">Performance</option>
          <option value="alphabetical">Alphabetical</option>
        </select>
      </div>
      <button onclick="toggleView()">Toggle View</button>
    </div>

    <div class="stats-grid mb-6">
      <div class="stat-card">
        <div class="stat-title">Total Portfolio Value</div>
        <div class="stat-value" id="totalValue">$0.00</div>
      </div>
      <div class="stat-card">
        <div class="stat-title">Overall Performance</div>
        <div class="stat-value" id="overallPerf">0.00%</div>
        <div class="stat-change" id="overallPerfText"></div>
      </div>
      <div class="stat-card">
        <div class="stat-title">Top Performer</div>
        <div class="stat-value" id="topPerformer">-</div>
        <div class="stat-change positive" id="topPerformerValue"></div>
      </div>
      <div class="stat-card">
        <div class="stat-title">Worst Performer</div>
        <div class="stat-value" id="worstPerformer">-</div>
        <div class="stat-change negative" id="worstPerformerValue"></div>
      </div>
    </div>

    <div class="grid grid-cols-2 mb-6">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Portfolio Allocation</h2>
        </div>
        <div class="card-body">
          <div class="chart-container">
            <canvas id="pieChart"></canvas>
          </div>
        </div>
      </div>
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Performance by Asset</h2>
        </div>
        <div class="card-body">
          <div class="chart-container">
            <canvas id="barChart"></canvas>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-6">
      <div class="card-header">
        <h2 class="card-title">Performance Heatmap</h2>
      </div>
      <div class="card-body">
        <div id="heatmap" style="height: 350px;"></div>
      </div>
    </div>

    <div class="card">
      <div class="card-header">
        <h2 class="card-title">Holdings</h2>
        <div class="text-sm text-muted" id="holdingsCount">0 Assets</div>
      </div>
      <div class="card-body">
        <div class="table-container">
          <table id="holdingsTable">
            <thead>
              <tr>
                <th>Ticker</th>
                <th>Name</th>
                <th>Sector</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total Value</th>
                <th>% of Portfolio</th>
                <th>Performance</th>
              </tr>
            </thead>
            <tbody id="holdingsTableBody">
              <!-- Table content will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </main>

  <footer class="footer">
    <div class="container">
      <p>Investment Portfolio Dashboard © 2025. All data shown is for demonstrational purposes only.</p>
    </div>
  </footer>

    <script>
            // Portfolio data
        let portfolio = [];

        // Chart instances
        let pieChart = null;
        let barChart = null;

        // Fetch portfolio from API
        async function fetchPortfolio(sortBy = 'value') {
          try {
            const res = await fetch(`/api/Assets?sortBy=${sortBy}`);
            if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
            const data = await res.json();
            portfolio = data.map(item => ({
              ticker:    item.ticker,
              name:      item.name,
              sector:    item.sector,
              price:     item.price,
              quantity:  item.quantity,
              variations:item.variations
            }));
          } catch (err) {
            console.error('Failed to load portfolio:', err);
            portfolio = [];
          }
        }

        // Formatters
        const formatCurrency = v =>
          new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(v);
        const formatPercent  = v => `${v?.toFixed(2)}%`;
        const getBadgeClass  = v => v > 0 ? 'badge-success' : v < 0 ? 'badge-danger' : 'badge-neutral';
        const getArrow       = v => v > 0 ? '▲' : v < 0 ? '▼' : '◆';

        // Set current date text
        function setCurrentDate() {
          const now = new Date();
          document.getElementById('currentDate').textContent =
            now.toLocaleDateString('en-US', {
              weekday: 'long', year: 'numeric',
              month: 'long',   day: 'numeric'
            });
        }

        // Calculate overall stats for a period
        function calculateStats(period) {
          const totalValue = portfolio.reduce((sum, a) => sum + a.price * a.quantity, 0);

          let weightedPerf = 0;
          portfolio.forEach(a => {
            const val = a.price * a.quantity;
            weightedPerf += (a.variations[period] * val) / totalValue;
          });

          let top   = portfolio[0] || {};
          let worst = portfolio[0] || {};
          portfolio.forEach(a => {
            if (a.variations[period] > top.variations?.[period])    top = a;
            if (a.variations[period] < worst.variations?.[period])  worst = a;
          });

          return { totalValue, performance: weightedPerf, topPerformer: top, worstPerformer: worst };
        }

        // Sort portfolio by value, performance, or name
        function sortPortfolio(period, sortBy) {
          const arr = [...portfolio];
          if (sortBy === 'value') {
            arr.sort((a, b) => (b.price * b.quantity) - (a.price * a.quantity));
          } else if (sortBy === 'performance') {
            arr.sort((a, b) => b.variations[period] - a.variations[period]);
          } else {
            arr.sort((a, b) => a.name.localeCompare(b.name));
          }
          return arr;
        }

        // Render stats panel
        function renderStats(period) {
          const { totalValue, performance, topPerformer, worstPerformer } = calculateStats(period);

          document.getElementById('totalValue').textContent      = formatCurrency(totalValue);
          document.getElementById('overallPerf').textContent     = formatPercent(performance);
          const perfText = document.getElementById('overallPerfText');
          perfText.textContent = `${getArrow(performance)} Over ${period}`;
          perfText.className   = `stat-change ${(performance >= 0) ? 'positive' : 'negative'}`;

          document.getElementById('topPerformer').textContent      = topPerformer.ticker || '—';
          document.getElementById('topPerformerValue').textContent =
            topPerformer.variations
              ? `${getArrow(topPerformer.variations[period])} ${formatPercent(topPerformer.variations[period])}`
              : 'N/A';

          document.getElementById('worstPerformer').textContent      = worstPerformer.ticker || '—';
          document.getElementById('worstPerformerValue').textContent =
            worstPerformer.variations
              ? `${getArrow(worstPerformer.variations[period])} ${formatPercent(worstPerformer.variations[period])}`
              : 'N/A';

          document.getElementById('holdingsCount').textContent = `${portfolio.length} Assets`;
        }

        // Render doughnut (pie) chart
        function renderPieChart() {
          const ctx   = document.getElementById('pieChart').getContext('2d');
          const total = portfolio.reduce((sum, a) => sum + a.price * a.quantity, 0);
          const labels= portfolio.map(a => a.ticker);
          const data  = portfolio.map(a => a.price * a.quantity);
          const colors= portfolio.map(a => ({
            Technology:'#6366f1', Energy:'#f59e0b',
            Financial: '#10b981', Healthcare:'#ef4444',
            Consumer:  '#8b5cf6'
          }[a.sector] || '#94a3b8'));

          const cfg = {
            type: 'doughnut',
            data:{ labels, datasets:[{ data, backgroundColor:colors, borderColor:'#1e293b', borderWidth:2 }]},
            options:{
              responsive:true, maintainAspectRatio:false, cutout:'60%',
              plugins:{
                legend:{
                  position:'right',
                  labels:{
                    color:'#e2e8f0', font:{ size:12 },
                    generateLabels(chart){
                      const d=chart.data;
                      return d.labels.map((lbl,i)=>({
                        text:`${lbl} (${((d.datasets[0].data[i]/total)*100).toFixed(1)}%)`,
                        fillStyle:d.datasets[0].backgroundColor[i],
                        strokeStyle:'#1e293b', lineWidth:2, hidden:false, index:i
                      }));
                    }
                  }
                },
                tooltip:{
                  callbacks:{
                    label(ctx){
                      const val=ctx.raw;
                      return `${ctx.label}: ${formatCurrency(val)} (${((val/total)*100).toFixed(1)}%)`;
                    }
                  }
                }
              }
            }
          };

          if (pieChart) {
            pieChart.config = cfg;
            pieChart.update();
          } else {
            pieChart = new Chart(ctx, cfg);
          }
        }

        // Render bar chart of performances
        function renderBarChart(period) {
          const ctx    = document.getElementById('barChart').getContext('2d');
          const labels = portfolio.map(a => a.ticker);
          const data   = portfolio.map(a => a.variations[period]);
          const bg     = data.map(v => v > 0 ? 'rgba(34,197,94,0.7)' : 'rgba(239,68,68,0.7)');

          const cfg = {
            type:'bar',
            data:{ labels, datasets:[{
              label:'Performance (%)', data, backgroundColor:bg,
              borderColor:bg.map(c=>c.replace('0.7','1')), borderWidth:1
            }]},
            options:{
              responsive:true, maintainAspectRatio:false,
              scales:{
                y:{ beginAtZero:true, grid:{ color:'rgba(71,85,105,0.1)' },
                    ticks:{ color:'#94a3b8', callback:v=>v+'%' } },
                x:{ grid:{ display:false }, ticks:{ color:'#94a3b8' } }
              },
              plugins:{
                title:{
                  display:true, text:`Performance by Asset (${period})`,
                  color:'#e2e8f0', font:{ size:16 }
                },
                legend:{ display:false },
                tooltip:{
                  callbacks:{ label(ctx){ return `${ctx.dataset.label}: ${ctx.raw.toFixed(2)}%`; } }
                }
              }
            }
          };

          if (barChart) {
            barChart.config = cfg;
            barChart.update();
          } else {
            barChart = new Chart(ctx, cfg);
          }
        }

        // Render heatmap with Plotly
        function renderHeatmap(period) {
          const sorted = sortPortfolio(period, document.getElementById('sortBy').value);
          const yLabels= sorted.map(p => `${p.sector} - ${p.ticker} (${p.name})`);
          const zData  = sorted.map(p => [p.variations[period]]);
          const hover  = sorted.map(p => {
            const v   = p.variations[period];
            const col = v>0?'#22c55e':v<0?'#ef4444':'#f59e0b';
            const arr = v>0?'▲':v<0?'▼':'◆';
            return `<span style="color:${col}">${p.name} (${p.ticker})<br>${arr} ${v?.toFixed(2)}%<br>Qty: ${p.quantity}<br>${formatCurrency(p.price)}</span>`;
          });

          Plotly.newPlot('heatmap',[{
            z: zData, x:['Performance'], y:yLabels, type:'heatmap',
            text:hover, hoverinfo:'text',
            colorscale:[[0,'rgba(239,68,68,0.9)'],[0.5,'rgba(245,158,11,0.9)'],[1,'rgba(34,197,94,0.9)']],
            showscale:true
          }],{
            title:`Performance Heatmap (${period})`,
            plot_bgcolor:'rgba(30,41,59,0)', paper_bgcolor:'rgba(30,41,59,0)',
            font:{ color:'#e2e8f0' }, margin:{ l:150, r:50, t:50, b:50 }
          });
        }

        // Render holdings table
        function renderHoldingsTable(period) {
          const sorted = sortPortfolio(period, document.getElementById('sortBy').value);
          const total  = sorted.reduce((sum,a)=>sum + a.price * a.quantity, 0);
          const tbody  = document.getElementById('holdingsTableBody');
          tbody.innerHTML = '';

          sorted.forEach(a => {
            const val   = a.price * a.quantity;
            const pct   = ((val / total) * 100).toFixed(2);
            const varP  = a.variations[period];
            const row   = document.createElement('tr');
            row.innerHTML = `
              <td><strong>${a.ticker}</strong></td>
              <td>${a.name}</td>
              <td>${a.sector}</td>
              <td>${a.quantity}</td>
              <td>${formatCurrency(a.price)}</td>
              <td>${formatCurrency(val)}</td>
              <td>${pct}%</td>
              <td>
                <span class="badge ${getBadgeClass(varP)}">
                  ${getArrow(varP)} ${formatPercent(varP)}
                </span>
              </td>
            `;
            tbody.appendChild(row);
          });
        }

        // Toggle heatmap/table view
        function toggleView() {
          const container = document.getElementById('heatmap').closest('.chart-container');
          container.style.display = container.style.display === 'none' ? 'block' : 'none';
        }

        // Main render
        function renderAll() {
          const period = document.getElementById('period').value;
          renderStats(period);
          renderPieChart();
          renderBarChart(period);
          renderHeatmap(period);
          renderHoldingsTable(period);
        }

        // Initialize on load
        window.onload = async () => {
          setCurrentDate();
          await fetchPortfolio();
          renderAll();
          document.getElementById('period').addEventListener('change', renderAll);
          document.getElementById('sortBy').addEventListener('change', renderAll);
          document.getElementById('toggleBtn').addEventListener('click', toggleView);
        };

    </script>




</body>
</html>
