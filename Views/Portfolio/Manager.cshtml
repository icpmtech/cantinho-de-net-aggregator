<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Portfolio Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.plot.ly/plotly-2.26.0.min.js"></script>
    <style>
        .safe-area {
            padding-top: env(safe-area-inset-top);
            padding-bottom: env(safe-area-inset-bottom);
        }

        .touch-manipulation {
            touch-action: manipulation;
        }

        .modal-backdrop {
            backdrop-filter: blur(4px);
        }

        .slide-up {
            animation: slideUp 0.3s ease-out;
        }

        @@keyframes slideUp {
            from

        {
            transform: translateY(100%);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }

        }

        .fade-in {
            animation: fadeIn 0.2s ease-out;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
        }

        to {
            opacity: 1;
        }

        }</style>
</head>
<body class="bg-gray-50 text-gray-900 font-sans antialiased">

    <!-- Header -->
    <header class="bg-white sticky top-0 z-40 shadow-sm border-b border-gray-200 safe-area">
        <div class="px-4 py-4">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-xl font-bold text-gray-900">Portfolio</h1>
                    <p class="text-sm text-gray-500" id="portfolioSummary">0 transactions</p>
                </div>
                <button onclick="openModal()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium text-sm touch-manipulation flex items-center space-x-2 transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    <span>Add</span>
                </button>
            </div>
        </div>
    </header>

    <!-- Portfolio Overview Cards -->
    <section class="px-4 py-4">
        <div class="grid grid-cols-2 gap-3 mb-4">
            <div class="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
                <div class="text-2xl font-bold text-gray-900" id="totalInvested">€0</div>
                <div class="text-sm text-gray-500">Total Invested</div>
            </div>
            <div class="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
                <div class="text-2xl font-bold text-gray-900" id="totalFees">€0</div>
                <div class="text-sm text-gray-500">Fees</div>
            </div>
        </div>
    </section>

    <!-- Chart Section -->
    <section class="px-4 pb-4">
        <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-4">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-lg font-semibold text-gray-900">Performance</h2>
                <select id="chartType" class="text-sm border border-gray-300 rounded-lg px-2 py-1">
                    <option value="cumulative">Cumulative</option>
                    <option value="individual">By Transaction</option>
                </select>
            </div>
            <div id="plotlyChart" class="h-56"></div>
        </div>
    </section>

    <!-- Transactions List -->
    <section class="px-4 pb-20">
        <div class="bg-white rounded-xl shadow-sm border border-gray-100">
            <div class="px-4 py-3 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <h2 class="text-lg font-semibold text-gray-900">Transactions</h2>
                    <div class="flex space-x-2">
                        <select id="filterType" class="text-sm border border-gray-300 rounded-lg px-2 py-1">
                            <option value="">All</option>
                            <option value="Compra">Buys</option>
                            <option value="Venda">Sells</option>
                        </select>
                    </div>
                </div>
            </div>
            <div id="stockList" class="divide-y divide-gray-50">
                <div class="px-4 py-8 text-center text-gray-500">
                    <svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                    <p>No transactions yet</p>
                    <p class="text-sm">Add your first transaction</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Modal -->
    <div id="modal" class="fixed inset-0 bg-black bg-opacity-50 modal-backdrop hidden items-center justify-end sm:justify-center z-50 p-4">
        <div class="bg-white rounded-t-2xl sm:rounded-2xl shadow-2xl w-full max-w-lg max-h-[90vh] overflow-hidden slide-up">
            <!-- Modal Header -->
            <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
                <div class="flex items-center justify-between">
                    <h3 id="modalTitle" class="text-lg font-semibold text-gray-900">New Transaction</h3>
                    <button onclick="closeModal()" class="p-2 hover:bg-gray-200 rounded-full touch-manipulation">
                        <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="px-6 py-4 overflow-y-auto max-h-[calc(90vh-160px)]">
                <form id="stockForm" class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Symbol</label>
                        <input id="symbol" type="text" placeholder="AAPL, GOOGL..." required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Company Name</label>
                        <input id="name" type="text" placeholder="Apple Inc." required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Transaction Type</label>
                        <select id="type" required class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation">
                            <option value="">Select type</option>
                            <option value="Buy">Buy</option>
                            <option value="Sell">Sell</option>
                        </select>
                    </div>

                    <div class="grid grid-cols-2 gap-3">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Price (€)</label>
                            <input id="price" type="number" step="0.01" placeholder="150.00" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Number of Shares</label>
                            <input id="shares" type="number" step="1" placeholder="10" required
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation" />
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Commission (€)</label>
                        <input id="fee" type="number" step="0.01" placeholder="0.00"
                               class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                        <input id="date" type="date" required
                               class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm touch-manipulation" />
                    </div>

                    <div class="bg-gray-50 rounded-lg p-3">
                        <div class="text-sm text-gray-600">Total: <span id="totalPreview" class="font-semibold">€0.00</span></div>
                    </div>
                </form>
            </div>

            <!-- Modal Footer -->
            <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
                <div class="flex gap-3">
                    <button type="button" onclick="closeModal()"
                            class="flex-1 px-4 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg font-medium text-sm touch-manipulation transition-colors">
                        Cancel
                    </button>
                    <button type="submit" form="stockForm"
                            class="flex-1 px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium text-sm touch-manipulation transition-colors">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bottom Navigation -->
    <nav class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 safe-area">
        <div class="flex justify-around py-2">
            <button class="flex flex-col items-center p-2 text-blue-600 touch-manipulation">
                <svg class="w-5 h-5 mb-1" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                </svg>
                <span class="text-xs font-medium">Home</span>
            </button>
            <button class="flex flex-col items-center p-2 text-gray-400 touch-manipulation">
                <svg class="w-5 h-5 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                <span class="text-xs">Charts</span>
            </button>
            <button class="flex flex-col items-center p-2 text-gray-400 touch-manipulation">
                <svg class="w-5 h-5 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"></path>
                </svg>
                <span class="text-xs">Portfolio</span>
            </button>
            <button class="flex flex-col items-center p-2 text-gray-400 touch-manipulation">
                <svg class="w-5 h-5 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span class="text-xs">Account</span>
            </button>
        </div>
    </nav>

    <!-- Script -->
    <script>
        const stockList   = document.getElementById("stockList");
        const modal       = document.getElementById("modal");
        const stockForm   = document.getElementById("stockForm");
        const filterType  = document.getElementById("filterType");
        const chartType   = document.getElementById("chartType");

        let transactions = [];
        let portfolioMeta = {};
        let editIndex = null;

        document.getElementById('date').valueAsDate = new Date();

        async function loadPortfolio() {
          const resp = await fetch("/api/Portfolio/manage-assets");
          if (!resp.ok) throw new Error(`Failed to load portfolio: ${resp.status}`);
          const data = await resp.json();
          if (!data.length) throw new Error("No portfolios returned");
          const [portfolio] = data;

          portfolioMeta = {
            id:                  portfolio.id,
            totalInvestment:   portfolio.totalInvestment,
            currentMarketValue:portfolio.currentMarketValue,
            totalGainsLosses:  portfolio.totalGainsLosses,
            totalDividendIncome: portfolio.totalDividendIncome,
            creationDate:      portfolio.creationDate
          };

          // Include `id` so we can edit, and fallback to portfolio.id
          transactions = portfolio.items.map(tx => ({
            id:                tx.id,
            symbol:            tx.symbol,
            name:              tx.name || tx.symbol,
            type:              tx.operationType === "Buy" ? "Buy" : "Sell",
            price:             tx.purchasePrice,
            shares:            tx.quantity,
            fee:               tx.commission,
            date:              tx.purchaseDate.split("T")[0],
            totalInvestment:   tx.totalInvestment,
            currentValue:      tx.currentMarketValue,
            portfolioId:       tx.portfolioId ?? portfolio.id
          }));
        }

        function openModal(index = null) {
          editIndex = index;
          stockForm.reset();
          document.getElementById('date').valueAsDate = new Date();
          document.getElementById("modalTitle").textContent = index !== null ? "Edit Transaction" : "New Transaction";
          if (index !== null) {
            const tx = transactions[index];
            stockForm.symbol.value = tx.symbol;
            stockForm.name.value   = tx.name;
            stockForm.type.value   = tx.type;
            stockForm.price.value  = tx.price;
            stockForm.shares.value = tx.shares;
            stockForm.fee.value    = tx.fee;
            stockForm.date.value   = tx.date;
          }
          updateTotalPreview();
          modal.classList.remove("hidden");
          modal.classList.add("flex");
        }

        function closeModal() {
          editIndex = null;
          modal.classList.add("hidden");
          modal.classList.remove("flex");
        }

        function updateTotalPreview() {
          const price  = parseFloat(stockForm.price.value)   || 0;
          const shares = parseInt  (stockForm.shares.value)  || 0;
          const fee    = parseFloat(stockForm.fee.value)     || 0;
          const total  = (price * shares + fee).toFixed(2);
          document.getElementById('totalPreview').textContent = `€${total}`;
        }

        function getTypeIcon(type) {
          return type === 'Buy'
            ? '<span class="text-green-600">↗</span>'
            : '<span class="text-red-600">↘</span>';
        }
        function getTypeColor(type) {
          return type === 'Buy' ? 'text-green-600' : 'text-red-600';
        }

        async function renderStocks() {
          if (!transactions.length) {
            await loadPortfolio();
            console.log("Loaded transactions:", transactions);
          }

          const filtered = filterType.value
            ? transactions.filter(tx => tx.type === filterType.value)
            : transactions;

          if (filtered.length === 0) {
            stockList.innerHTML = `
              <div class="px-4 py-8 text-center text-gray-500">
                <svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0-2-2z"/>
                </svg>
                <p>${ filterType.value
                      ? `No ${filterType.value.toLowerCase()} found`
                      : 'No transactions yet' }</p>
                <p class="text-sm">Add your first transaction</p>
              </div>`;
            return;
          }

          stockList.innerHTML = "";
          filtered.forEach(tx => {
            const idx   = transactions.indexOf(tx);
            const total = (tx.price * tx.shares + (tx.fee||0)).toFixed(2);
            const date  = new Date(tx.date).toLocaleDateString('en-GB');

            const row = document.createElement("div");
            row.className = "px-4 py-3 hover:bg-gray-50 transition-colors flex items-center justify-between";
            row.innerHTML = `
              <div class="flex items-center space-x-3 flex-1">
                <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                  <span class="text-blue-600 font-bold text-sm">${tx.symbol.slice(0,2)}</span>
                </div>
                <div class="flex-1 min-w-0">
                  <div class="flex items-center space-x-2">
                    <span class="font-medium text-gray-900">${tx.symbol}</span>
                    ${getTypeIcon(tx.type)}
                    <span class="text-sm ${getTypeColor(tx.type)}">${tx.type}</span>
                  </div>
                  <div class="text-sm text-gray-600 truncate">${tx.name}</div>
                  <div class="text-xs text-gray-500">${date} • ${tx.shares} shares • €${tx.price.toFixed(2)}/share</div>
                </div>
              </div>
              <div class="text-right flex-shrink-0 ml-4">
                <div class="font-semibold text-gray-900">€${total}</div>
                <div class="flex space-x-2 mt-1">
                  <button onclick="openModal(${idx})" class="text-blue-600 text-xs hover:text-blue-800">Edit</button>
                  <button onclick="deleteTx(${idx})" class="text-red-600 text-xs hover:text-red-800">Remove</button>
                </div>
              </div>`;
            stockList.appendChild(row);
          });
        }

        function deleteTx(index) {
          if (confirm('Are you sure you want to remove this transaction?')) {
            transactions.splice(index, 1);
            renderStocks();
            updateChart();
            updateSummary();
          }
        }

        function updateSummary() {
          const totalInv  = transactions.reduce((sum, tx) => sum + tx.totalInvestment, 0);
          const totalFees = transactions.reduce((sum, tx) => sum + tx.fee, 0);
          document.getElementById('totalInvested').textContent   = `€${totalInv.toFixed(2)}`;
          document.getElementById('totalFees').textContent       = `€${totalFees.toFixed(2)}`;
          document.getElementById('portfolioSummary').textContent = `${transactions.length} transaction${transactions.length!==1?'s':''}`;
        }

        stockForm.addEventListener("submit", async (e) => {
          e.preventDefault();

          const tx = {
            symbol:            stockForm.symbol.value.toUpperCase(),
            name:              stockForm.name.value,
            type:              stockForm.type.value,
            price:             parseFloat(stockForm.price.value),
            shares:            parseInt(stockForm.shares.value, 10),
            fee:               parseFloat(stockForm.fee.value) || 0,
            date:              stockForm.date.value,
            totalInvestment:   parseFloat(stockForm.price.value) * parseInt(stockForm.shares.value, 10) + parseFloat(stockForm.fee.value || 0),
            currentValue:      parseFloat(stockForm.price.value) * parseInt(stockForm.shares.value, 10) + parseFloat(stockForm.fee.value || 0),
            portfolioId:       editIndex!==null ? transactions[editIndex].portfolioId : portfolioMeta.id
          };

          const apiModel = {
            id:                editIndex !== null ? transactions[editIndex].id : 0,
            symbol:            tx.symbol,
            operationType:     tx.type,
            portfolioId:       tx.portfolioId,
            purchaseDate:      new Date(tx.date).toISOString(),
            quantity:          tx.shares,
            purchasePrice:     tx.price,
            commission:        tx.fee,
            currentPrice:      tx.price,
            totalInvestment:   tx.totalInvestment,
            currentMarketValue:tx.currentValue,
            industry:          tx.name
          };

          const isEdit = editIndex !== null;
          const url    = isEdit
            ? `/api/PortfolioItem/UpdateItemV1/${apiModel.id}`
            : `/api/PortfolioItem/CreateItemV1`;
          const method = isEdit ? "PUT" : "POST";

          try {
            const resp = await fetch(url, {
              method,
              headers: { "Content-Type": "application/json" },
              body:    JSON.stringify(apiModel)
            });

            if (!resp.ok) {
              const errText = await resp.text();
              throw new Error(`Server responded ${resp.status}: ${errText}`);
            }

            const saved = await resp.json();
            console.log("Saved on server:", saved);

            if (isEdit) {
              transactions[editIndex] = { ...tx, id: saved.id };
            } else {
              transactions.push({ ...tx, id: saved.id });
            }

            closeModal();
            renderStocks();
            updateChart();
            updateSummary();

          } catch (err) {
            console.error("Failed to save:", err);
            alert("Error saving transaction: " + err.message);
          }
        });

        function updateChart() {
          if (!transactions.length) {
            Plotly.newPlot('plotlyChart', [], {
              margin: {t:20,r:20,l:50,b:40},
              paper_bgcolor:'rgba(0,0,0,0)', plot_bgcolor:'rgba(0,0,0,0)',
              xaxis:{title:'No data'}, yaxis:{title:'Total (€)'}
            },{responsive:true,displayModeBar:false});
            return;
          }

          const sorted = [...transactions].sort((a,b)=>new Date(a.date)-new Date(b.date));

          if (chartType.value === 'cumulative') {
            let cum = 0;
            const x = sorted.map(tx => tx.date);
            const y = sorted.map(tx => {
              // subtract cash on a Sell
              const flow = (tx.price * tx.shares) - (tx.type === 'Sell' ? 0 : -tx.fee);
              // for Buy: flow = price*shares + fee; for Sell: flow = -(price*shares) + fee
              const delta = tx.type === 'Buy'
                ? +tx.price*tx.shares + tx.fee
                : -tx.price*tx.shares + tx.fee;
              cum += delta;
              return cum;
            });

            Plotly.newPlot('plotlyChart', [{
              x, y, type:'scatter', mode:'lines+markers',
              fill:'tonexty', fillcolor:'rgba(59,130,246,0.1)'
            }], {
              margin:{t:20,r:20,l:50,b:40},
              xaxis:{title:'Date',tickangle:-45},
              yaxis:{title:'Cumulative Total (€)', tickformat:'€,.0f'},
              paper_bgcolor:'rgba(0,0,0,0)', plot_bgcolor:'rgba(0,0,0,0)', showlegend:false
            },{responsive:true,displayModeBar:false});

          } else {
            const x = sorted.map(tx=>tx.symbol);
            const y = sorted.map(tx=>tx.totalInvestment);
            Plotly.newPlot('plotlyChart',[{ x,y,type:'bar' }],{
              margin:{t:20,r:20,l:50,b:40},
              xaxis:{title:'Transactions'},
              yaxis:{title:'Total (€)', tickformat:'€,.0f'},
              paper_bgcolor:'rgba(0,0,0,0)', plot_bgcolor:'rgba(0,0,0,0)', showlegend:false
            },{responsive:true,displayModeBar:false});
          }
        }

        filterType.addEventListener('change', renderStocks);
        chartType.addEventListener('change', updateChart);
        ['price','shares','fee'].forEach(id=>
          document.getElementById(id).addEventListener('input', updateTotalPreview)
        );
        modal.addEventListener('click', e=>{ if(e.target===modal) closeModal(); });
        window.addEventListener('orientationchange', ()=>setTimeout(()=>Plotly.Plots.resize('plotlyChart'),100));

        async function init() {
          await loadPortfolio();
          renderStocks();
          updateChart();
          updateSummary();
        }
        init();
    </script>

</body>
</html>
