@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Portfolio - Holdings";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- (Optional) Sneat Admin Template CSS -->
    <!-- If you have integrated the Sneat template, include its CSS here.
         For demonstration, omitted. If you do, watch out for conflicts in your styles. -->
    <!-- Tabulator CSS -->
    <link rel="stylesheet" href="https://unpkg.com/tabulator-tables@5.3.4/dist/css/tabulator.min.css" />
    <!-- Tabulator JS -->
    <script src="https://unpkg.com/tabulator-tables@5.3.4/dist/js/tabulator.min.js"></script>

    <style>
        /*
                =========================================
                1) THEME STYLES
                =========================================
                */

        /* ---------- Light Mode ---------- */
        body.light-mode {
            background-color: #f8f9fa;
            color: #212529;
        }

        /* ---------- Dark Mode ---------- */
        body.dark-mode {
            background-color: #000;
            color: #fff;
        }

        /*
                =========================================
                2) GENERAL PAGE STYLES
                =========================================
                */
        body {
            margin: 20px;
            font-family: "Helvetica Neue", Arial, sans-serif;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .container {
            max-width: 100%;
            margin: auto;
        }

        h2 {
            font-weight: 600;
        }

        #search {
            width: 100%;
            padding: 8px 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

            #search::placeholder {
                color: #888;
            }

        /* Button styles */
        button {
            margin-top: 10px;
            padding: 10px 16px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            background-color: #fe2c55; /* TikTok pinkish-red */
            color: #fff;
            border-radius: 5px;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

            button:hover {
                background-color: #ff5178;
                transform: translateY(-2px);
            }

        /*
                =========================================
                3) TABLE ALWAYS WHITE
                =========================================
                */
        .tabulator {
            background-color: #fff !important;
            color: #000 !important;
        }

        .tabulator-header {
            background-color: #f8f9fa !important;
            color: #212529 !important;
        }

        .tabulator-row {
            background-color: #fff;
            border-bottom: 1px solid #eee;
        }

            .tabulator-row:hover {
                background-color: #f5f5f5;
            }

            .tabulator-row .tabulator-cell {
                border-right: 1px solid #eee;
            }

                .tabulator-row .tabulator-cell input {
                    background-color: #fff;
                    color: #000;
                    border: 1px solid #ccc;
                }

        #portfolioTable {
            margin-top: 10px;
        }

        /*
                =========================================
                4) LOADING SPINNER
                =========================================
                */
        #loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }

        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.2);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #fe2c55;
            animation: spin 1s linear infinite;
            margin: auto;
        }

        @@keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /*
                =========================================
                5) CARDS VIEW (TIKTOK-STYLE CARDS)
                =========================================
                */
        .card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }

        .tiktok-card {
            flex: 1 1 calc(33.33% - 10px);
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
        }

            .tiktok-card:hover {
                transform: translateY(-5px);
            }

            .tiktok-card h3 {
                color: #fe2c55;
                margin-bottom: 10px;
                font-size: 1.2rem;
                font-weight: 600;
            }

            .tiktok-card p {
                margin: 5px 0;
            }

        /* Different backgrounds for light vs dark */
        body.light-mode .tiktok-card {
            background-color: #f8f9fa;
            color: #212529;
        }

        body.dark-mode .tiktok-card {
            background-color: #202020;
            color: #fff;
        }
    </style>
</head>
<body class="light-mode">
    <!-- Default to light-mode on page load -->
    <div class="container">
        <h2>Investment Portfolio</h2>
        <!-- Theme Toggle Button -->
        <button onclick="toggleTheme()" style="margin-right:10px;">Toggle Theme</button>

        <input type="text" id="search" placeholder="🔍 Search asset..." onkeyup="filterTable()" />

        <!-- Tabulator Table View -->
        <div id="portfolioTable"></div>

        <!-- Cards View (hidden by default) -->
        <div id="cardsView" class="card-container" style="display:none;"></div>

        <!-- Loading spinner -->
        <div id="loading">
            <div class="spinner"></div>
        </div>

        <div style="margin-top:15px;">
            <button onclick="addRow()">Add Transaction</button>
            <button onclick="saveToJson()">Save JSON</button>
            <button onclick="loadFromJson()">Load JSON from file</button>
            <button onclick="loadFromAPI()">Load from API</button>
            <button id="toggleViewBtn" onclick="toggleView()">Switch to Cards View</button>
        </div>
    </div>

    <script>
        // =====================================
        // 0) THEME TOGGLE LOGIC
        // =====================================
        function toggleTheme() {
            let body = document.body;
            // If we’re in light-mode, switch to dark; otherwise go light
            if (body.classList.contains("light-mode")) {
                body.classList.remove("light-mode");
                body.classList.add("dark-mode");
            } else {
                body.classList.remove("dark-mode");
                body.classList.add("light-mode");
            }
        }

        // =====================================
        // 1) TABULATOR INIT
        // =====================================
        let table = new Tabulator("#portfolioTable", {
            layout: "fitDataFill",
            responsiveLayout: "collapse",
            height: "auto",
            columns: [
                { title: "Asset", field: "symbol", editor: "input", headerFilter: "input" },
                { title: "Type", field: "operationType", editor: "select", editorParams: { values: ["Buy", "Sell", "Close"] } },
                { title: "Quantity", field: "quantity", editor: "number", validator: "min:1", cellEdited: updateTotal },
                { title: "Price (€)", field: "purchasePrice", editor: "number", validator: "min:0", cellEdited: updateTotal },
                // Commission(€) only
                { title: "Commission (€)", field: "commission", editor: "number", validator: "min:0", cellEdited: updateTotal },
                { title: "Total Value (€)", field: "totalValue", formatter: "money", editor: false },
                { title: "Average Value (€)", field: "averageValue", formatter: "money", editor: false },
                {
                    title: "Actions",
                    formatter: "buttonCross",
                    width: 50,
                    align: "center",
                    cellClick: function(e, cell) {
                        cell.getRow().delete();
                    }
                }
            ],
            data: [] // starts with no data
        });

        // =====================================
        // 2) FUNCTIONS
        // =====================================
        function addRow() {
            table.addRow({
                symbol: "",
                operationType: "Buy",
                quantity: 1,
                purchasePrice: 0,
                commission: 0,
                totalValue: 0,
                averageValue: 0
            });
        }

        /**
         * updateTotal():
         * Calculates total transaction cost/proceeds and average value per unit.
         * - Buy  => total = (quantity * price) + commission
         * - Sell => total = (quantity * price) - commission
         * - Close => treat like a full Sell (or adjust as desired)
         */
        function updateTotal(cell) {
            let rowData = cell.getRow().getData();

            let quantity = parseFloat(rowData.quantity) || 0;
            let price = parseFloat(rowData.purchasePrice) || 0;
            let commissionPrice = parseFloat(rowData.commission) || 0;
            let total = 0;

            switch (rowData.operationType) {
                case "Buy":
                    total = (quantity * price) + commissionPrice;
                    break;
                case "Sell":
                    total = (quantity * price) - commissionPrice;
                    break;
                case "Close":
                    // If you want “Close” to do something else, adjust here.
                    // By default, we treat “Close” as a full sell:
                    total = (quantity * price) - commissionPrice;
                    break;
                default:
                    total = 0;
                    break;
            }

            let averageValue = quantity > 0 ? (total / quantity).toFixed(2) : "0.00";

            cell.getRow().update({
                totalValue: total.toFixed(2),
                averageValue: averageValue
            });
        }

        function filterTable() {
            let value = document.getElementById("search").value.toLowerCase();
            table.setFilter("symbol", "like", value);
        }

        // =====================================
        // 3) FILE IMPORT/EXPORT
        // =====================================
        function saveToJson() {
            let data = table.getData();
            let jsonData = JSON.stringify(data, null, 4);
            let blob = new Blob([jsonData], { type: "application/json" });
            let a = document.createElement("a");
            a.href = URL.createObjectURL(blob);
            a.download = "portfolio.json";
            a.click();
        }

        function loadFromJson() {
            let input = document.createElement("input");
            input.type = "file";
            input.accept = "application/json";
            input.onchange = function (event) {
                let file = event.target.files[0];
                let reader = new FileReader();
                reader.onload = function () {
                    let data = JSON.parse(reader.result);
                    table.setData(data);
                };
                reader.readAsText(file);
            };
            input.click();
        }

        // =====================================
        // 4) LOAD FROM API
        // =====================================
        function loadFromAPI() {
            document.getElementById("loading").style.display = "block";
            fetch("/api/Portfolio", {
                method: "GET",
                headers: { "accept": "*/*" }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Error loading API data: " + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                document.getElementById("loading").style.display = "none";
                // Assume first portfolio has "items"
                if (data.length > 0 && data[0].items) {
                    table.setData(data[0].items);
                } else {
                    alert("No portfolio found or no items.");
                }
            })
            .catch(error => {
                console.error(error);
                document.getElementById("loading").style.display = "none";
                alert("Error loading API data.");
            });
        }

        // =====================================
        // 5) TOGGLE TABLE <-> CARDS
        // =====================================
        function toggleView() {
            let tableDiv = document.getElementById("portfolioTable");
            let cardsDiv = document.getElementById("cardsView");
            let toggleBtn = document.getElementById("toggleViewBtn");

            if (tableDiv.style.display !== "none") {
                tableDiv.style.display = "none";
                cardsDiv.style.display = "flex";
                toggleBtn.textContent = "Switch to Table View";
                renderCards();
            } else {
                tableDiv.style.display = "block";
                cardsDiv.style.display = "none";
                toggleBtn.textContent = "Switch to Cards View";
            }
        }

        function renderCards() {
            let cardsDiv = document.getElementById("cardsView");
            cardsDiv.innerHTML = "";
            let data = table.getData();

            // Show loading spinner (simulate delay)
            document.getElementById("loading").style.display = "block";
            setTimeout(() => {
                document.getElementById("loading").style.display = "none";
                data.forEach(item => {
                    let card = document.createElement("div");
                    card.className = "tiktok-card";
                    card.innerHTML = `
                        <h3>${item.symbol || "Asset"}</h3>
                        <p>Type: ${item.operationType}</p>
                        <p>Quantity: ${item.quantity}</p>
                        <p>Price (€): ${item.purchasePrice}</p>
                        <p>Commission (€): ${item.commission}</p>
                        <p>Total Value (€): ${item.totalValue}</p>
                        <p>Average Value (€): ${item.averageValue}</p>
                    `;
                    cardsDiv.appendChild(card);
                });
            }, 500);
        }
    </script>
</body>
</html>
