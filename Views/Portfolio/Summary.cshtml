<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Portfolio Performance Dashboard</title>
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <!-- amCharts 5 libraries -->
  <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
  <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
  <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
  <link href="~/assets/css/portfolio-summary.css" rel="stylesheet" />
</head>
<body>
  <!-- HEADER -->
  <header class="bg-navbar-theme">
    <h1><i class="fas fa-briefcase"></i> Portfolio Performance Dashboard</h1>
    <div class="header-buttons">
      <button id="refreshBtn" title="Refresh Data"><i class="fas fa-sync-alt"></i></button>
      <button id="settingsBtn" title="Settings"><i class="fas fa-cog"></i></button>
      <span id="timerDisplay"></span>
    </div>
  </header>

  <!-- LOADING INDICATOR -->
  <div id="loadingIndicator">
    <i class="fas fa-spinner fa-spin"></i> Loading...
  </div>

  <!-- MAIN CONTENT -->
  <div class="content">
    <!-- PORTFOLIO SUMMARY CARDS -->
    <div class="row mt-4 mb-4">
      <div class="col-md-4">
        <div class="card text-center">
          <div class="card-body">
            <h5 class="card-title"><i class="fas fa-chart-line"></i> Total Gains</h5>
            <p class="card-text" id="cardTotalRevenue">$0.00</p>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card text-center">
          <div class="card-body">
            <h5 class="card-title"><i class="fas fa-hand-holding-usd"></i> Total Capital</h5>
            <p class="card-text" id="cardTotalInvestment">0.00</p>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card text-center">
          <div class="card-body">
            <h5 class="card-title"><i class="fas fa-balance-scale"></i> Net Profit/Loss</h5>
            <p class="card-text" id="cardNetDifference">0.00</p>
          </div>
        </div>
      </div>
    </div>
        @await Html.PartialAsync("HoldingsSummary/_HoldingsSummary")
    <!-- HISTORICAL PERFORMANCE TRENDS -->
    <div class="card mb-4">
      <div class="card-header">
        <h2><i class="fas fa-chart-line"></i> Historical Performance Trends</h2>
      </div>
      <div class="card-body">
        <div id="chartdiv1"></div>
      </div>
    </div>

    <!-- AGGREGATE SYMBOL OVERVIEW -->
    <div class="card mb-4">
      <div class="card-header">
        <h2><i class="fas fa-chart-bar"></i> Aggregate Symbol Overview</h2>
      </div>
      <div class="card-body">
        <div id="chartdiv2"></div>
      </div>
    </div>

    <!-- DETAILED SYMBOL BREAKDOWN TABLE -->
    <div class="card mb-4">
      <div class="card-header">
        <h2><i class="fas fa-table"></i> Detailed Symbol Breakdown</h2>
      </div>
      <div class="card-body">
        <div id="symbolTableContainer"></div>
      </div>
    </div>

    <!-- INTERVAL-TO-INTERVAL CHANGES -->
    <div class="card mb-4">
      <div class="card-header">
        <h2><i class="fas fa-chart-area"></i> Interval-to-Interval Changes</h2>
      </div>
      <div class="card-body">
        <div id="chartdiv3"></div>
      </div>
    </div>
  </div>

  <!-- SETTINGS DRAWER -->
  <div class="drawer" id="settingsDrawer">
    <h2><i class="fas fa-sliders-h"></i> Dashboard Settings</h2>

    <!-- AUTO-REFRESH SETTINGS -->
    <label>
      <input type="checkbox" id="autoRefreshCheckbox">
      Auto-Refresh
    </label>
    <label for="refreshInterval">Auto-Refresh Interval (seconds):</label>
    <input type="number" id="refreshInterval" value="30" min="5">

    <!-- FILTER SETTINGS -->
    <h3 style="margin-top:20px; border-top:1px solid #ddd; padding-top:15px;">
      <i class="fas fa-filter"></i> Filter Criteria
    </h3>
    <label for="filterSymbol">Filter by Symbol(s) (comma-separated):</label>
    <input type="text" id="filterSymbol" placeholder="e.g. AAPL, TSLA (leave blank for all)">

    <label for="filterStartDate">Start Date:</label>
    <input type="date" id="filterStartDate">

    <label for="filterEndDate">End Date:</label>
    <input type="date" id="filterEndDate">

    <!-- SAVE SETTINGS BUTTON -->
    <button id="saveSettingsBtn" class="drawer-button-save"><i class="fas fa-save"></i> Save & Apply</button>
    <!-- CLOSE BUTTON -->
    <button class="drawer-close-btn" id="drawerCloseBtn" title="Close Settings">
      <i class="fas fa-times"></i>
    </button>
  </div>
   
  <script>
    /*************************************************
     * GLOBAL VARIABLES
     *************************************************/
    const apiUrl = "/api/Dashboards/all-time-data";

    let autoRefresh = false;
    let refreshIntervalSeconds = 30;
    let refreshTimer = null;
    let countdownTimer = null;
    let countdown = refreshIntervalSeconds;

    // Chart roots for disposal on refresh
    let chartRoot1 = null;
    let chartRoot2 = null;
    let chartRoot3 = null;

    // Global data storage
    let allDashboardData = null;

    /*************************************************
     * FUNCTION: updateTimerDisplay
     *************************************************/
    function updateTimerDisplay() {
      document.getElementById("timerDisplay").textContent = autoRefresh
        ? `Next refresh in: ${countdown}s`
        : "";
    }

    /*************************************************
     * FUNCTION: updateCards
     *************************************************/
    function updateCards(aggregatedData) {
      let totalRevenue = 0, totalInvestment = 0, totalDifference = 0;
      aggregatedData.forEach(item => {
        totalRevenue += item.revenue;
        totalInvestment += item.investment;
        totalDifference += item.difference;
      });

      // Update card fields
      document.getElementById("cardTotalRevenue").textContent =  totalRevenue.toFixed(2);
      document.getElementById("cardTotalInvestment").textContent =  totalInvestment.toFixed(2);

      const netDiffEl = document.getElementById("cardNetDifference");
      netDiffEl.textContent = totalDifference.toFixed(2);
      netDiffEl.className = "card-text"; // reset classes

      // Apply color coding
      if (totalDifference > 0) {
        netDiffEl.classList.add("text-success");
      } else if (totalDifference < 0) {
        netDiffEl.classList.add("text-danger");
      } else {
        netDiffEl.classList.add("text-muted");
      }
    }

    /*************************************************
     * FUNCTION: renderSymbolTable
     *************************************************/
    function renderSymbolTable(data) {
      let html = '<table class="table table-striped">';
      html += '<thead><tr>' +
              '<th><i class="fas fa-tag"></i> Symbol</th>' +
              '<th><i class="fas fa-dollar-sign"></i> Total Gains</th>' +
              '<th><i class="fas fa-hand-holding-usd"></i> Total Capital</th>' +
              '<th><i class="fas fa-exchange-alt"></i> Net Difference</th>' +
              '</tr></thead><tbody>';

      data.forEach(item => {
        let diffClass = "";
        let diffIcon = "";
        if (item.difference > 0) {
          diffClass = "positive";
          diffIcon = '<i class="fas fa-arrow-up"></i>';
        } else if (item.difference < 0) {
          diffClass = "negative";
          diffIcon = '<i class="fas fa-arrow-down"></i>';
        } else {
          diffClass = "neutral";
          diffIcon = '<i class="fas fa-arrows-alt-h"></i>';
        }

        html += `
          <tr>
            <td>${item.symbol}</td>
            <td>${item.revenue.toFixed(2)}</td>
            <td>${item.investment.toFixed(2)}</td>
            <td class="differenceCell ${diffClass}">
              ${item.difference.toFixed(2)} ${diffIcon}
            </td>
          </tr>
        `;
      });

      html += '</tbody></table>';
      document.getElementById("symbolTableContainer").innerHTML = html;
    }

    /*************************************************
     * FUNCTION: saveSnapshot
     * Stores data snapshots for interval-based chart.
     *************************************************/
    function saveSnapshot(aggregatedData) {
      let totalRevenue = 0, totalInvestment = 0, totalDifference = 0;
      aggregatedData.forEach(item => {
        totalRevenue += item.revenue;
        totalInvestment += item.investment;
        totalDifference += item.difference;
      });

      const snapshot = {
        timestamp: Date.now(),
        totalRevenue,
        totalInvestment,
        totalDifference
      };

      let snapshots = JSON.parse(localStorage.getItem("stockSnapshots")) || [];
      snapshots.push(snapshot);

      // Keep only the last 24 hours
      const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;
      snapshots = snapshots.filter(snap => snap.timestamp >= oneDayAgo);

      localStorage.setItem("stockSnapshots", JSON.stringify(snapshots));
    }

    /*************************************************
     * FUNCTION: renderRefreshDiffChart
     * Renders chart showing changes between refreshes.
     *************************************************/
    function renderRefreshDiffChart() {
      const snapshots = JSON.parse(localStorage.getItem("stockSnapshots")) || [];
      if (snapshots.length < 2) {
        document.getElementById("chartdiv3").innerHTML =
          "<p class='text-center text-muted'>Not enough data yet for interval changes.</p>";
        return;
      }

      const diffData = [];
      for (let i = 1; i < snapshots.length; i++) {
        diffData.push({
          time: new Date(snapshots[i].timestamp).toLocaleTimeString(),
          revenueDiff: snapshots[i].totalRevenue - snapshots[i - 1].totalRevenue,
          investmentDiff: snapshots[i].totalInvestment - snapshots[i - 1].totalInvestment,
          differenceDiff: snapshots[i].totalDifference - snapshots[i - 1].totalDifference
        });
      }

      if (chartRoot3) chartRoot3.dispose();
      chartRoot3 = am5.Root.new("chartdiv3");
      chartRoot3.setThemes([am5themes_Animated.new(chartRoot3)]);

      let chart = chartRoot3.container.children.push(
        am5xy.XYChart.new(chartRoot3, {
          panX: true,
          panY: true,
          wheelX: "panX",
          wheelY: "zoomX",
          layout: chartRoot3.verticalLayout
        })
      );

      // Add cursor
      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
      var cursor3 = chart.set("cursor", am5xy.XYCursor.new(chartRoot3, {}));
      cursor3.lineY.set("visible", false);

      // Chart title
      chart.children.unshift(
        am5.Label.new(chartRoot3, {
          text: "Interval-Based Changes (Last 24h)",
          fontSize: 18,
          fontWeight: "500",
          x: am5.p50,
          centerX: am5.p50,
          marginBottom: 15
        })
      );

      let xAxis = chart.xAxes.push(
        am5xy.CategoryAxis.new(chartRoot3, {
          categoryField: "time",
          renderer: am5xy.AxisRendererX.new(chartRoot3, { minGridDistance: 30 }),
          tooltip: am5.Tooltip.new(chartRoot3, {})
        })
      );
      xAxis.data.setAll(diffData);

      xAxis.get("renderer").labels.template.setAll({
        rotation: -45,
        centerY: am5.p50,
        centerX: am5.p50
      });

      let yAxis = chart.yAxes.push(
        am5xy.ValueAxis.new(chartRoot3, {
          renderer: am5xy.AxisRendererY.new(chartRoot3, {})
        })
      );
      yAxis.children.unshift(
        am5.Label.new(chartRoot3, {
          rotation: -90,
          text: "Value Change",
          y: am5.p50,
          centerX: am5.p50
        })
      );

      function createDiffSeries(field, name, color) {
        let series = chart.series.push(
          am5xy.LineSeries.new(chartRoot3, {
            name: name,
            xAxis: xAxis,
            yAxis: yAxis,
            valueYField: field,
            categoryXField: "time",
            tooltip: am5.Tooltip.new(chartRoot3, {
              labelText: "{name}: {valueY}"
            })
          })
        );
        series.strokes.template.setAll({ strokeWidth: 2, stroke: color });
        series.data.setAll(diffData);
        return series;
      }

      createDiffSeries("revenueDiff", "Gains Change", am5.color(0x67b7dc));
      createDiffSeries("investmentDiff", "Capital Change", am5.color(0x6794dc));
      createDiffSeries("differenceDiff", "Net Diff Change", am5.color(0xfdd400));

      // Add legend for the refresh difference chart
      let legend = chart.children.push(
        am5.Legend.new(chartRoot3, {
          centerX: am5.p50,
          x: am5.p50
        })
      );
      legend.data.setAll(chart.series.values);
    }

    /*************************************************
     * FUNCTION: applyFilter
     * Filters data based on user input, re-renders charts.
     *************************************************/
    function applyFilter() {
      if (!allDashboardData) return;

      const symbolInput  = document.getElementById("filterSymbol").value.trim();
      const startDateVal = document.getElementById("filterStartDate").value;
      const endDateVal   = document.getElementById("filterEndDate").value;

      // Parse symbol filters
      let symbolFilters = [];
      if (symbolInput) {
        symbolFilters = symbolInput
          .split(",")
          .map(s => s.trim().toUpperCase())
          .filter(s => s.length > 0);
      }

      // Convert to Date objects if provided
      let startDate = startDateVal ? new Date(startDateVal) : null;
      let endDate   = endDateVal ? new Date(endDateVal) : null;
      if (endDate) {
        // Shift end date to end of day for inclusivity
        endDate.setHours(23,59,59,999);
      }

      // Filter Time Series Data
      let timeSeriesData = [];
      allDashboardData.labels.forEach((label, index) => {
        let currentDate = new Date(label);
        if (startDate && currentDate < startDate) return;
        if (endDate && currentDate > endDate) return;

        timeSeriesData.push({
          label: label,
          revenue: allDashboardData.seriesRevenue[index],
          investment: allDashboardData.seriesInvestment[index],
          difference: allDashboardData.seriesDifference[index]
        });
      });

      // Filter symbol data
      let filteredSymbolData = allDashboardData.symbolData;
      if (symbolFilters.length > 0) {
        filteredSymbolData = filteredSymbolData.filter(symObj =>
          symbolFilters.includes(symObj.symbol.toUpperCase())
        );
      }

      // Aggregate data
      const aggregatedSymbolData = filteredSymbolData.map(symbolObj => {
        const totals = symbolObj.data.reduce((acc, cur) => {
          acc.revenue += cur.totalRevenue;
          acc.investment += cur.totalInvestment;
          acc.difference += cur.difference;
          return acc;
        }, { revenue: 0, investment: 0, difference: 0 });
        return {
          symbol: symbolObj.symbol,
          revenue: totals.revenue,
          investment: totals.investment,
          difference: totals.difference
        };
      });

      // Update summary cards and table
      updateCards(aggregatedSymbolData);
      renderSymbolTable(aggregatedSymbolData);

      // Dispose old charts if exist
      if (chartRoot1) chartRoot1.dispose();
      if (chartRoot2) chartRoot2.dispose();

      // RENDER CHART #1: HISTORICAL PERFORMANCE
      chartRoot1 = am5.Root.new("chartdiv1");
      chartRoot1.setThemes([am5themes_Animated.new(chartRoot1)]);

      let chart1 = chartRoot1.container.children.push(
        am5xy.XYChart.new(chartRoot1, {
          panX: true,
          panY: true,
          wheelX: "panX",
          wheelY: "zoomX",
          layout: chartRoot1.verticalLayout
        })
      );

      // Add cursor
      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
      var cursor1 = chart1.set("cursor", am5xy.XYCursor.new(chartRoot1, {}));
      cursor1.lineY.set("visible", false);

      chart1.children.unshift(
        am5.Label.new(chartRoot1, {
          text: "Gains, Capital, and Net Difference Over Time",
          fontSize: 18,
          fontWeight: "500",
          x: am5.p50,
          centerX: am5.p50,
          marginBottom: 15
        })
      );

      let xAxis1 = chart1.xAxes.push(
        am5xy.CategoryAxis.new(chartRoot1, {
          categoryField: "label",
          renderer: am5xy.AxisRendererX.new(chartRoot1, { minGridDistance: 30 }),
          tooltip: am5.Tooltip.new(chartRoot1, {})
        })
      );
      xAxis1.data.setAll(timeSeriesData);
      xAxis1.get("renderer").labels.template.setAll({
        rotation: -45,
        centerY: am5.p50,
        centerX: am5.p50
      });

      let yAxis1 = chart1.yAxes.push(
        am5xy.ValueAxis.new(chartRoot1, {
          renderer: am5xy.AxisRendererY.new(chartRoot1, {})
        })
      );
      yAxis1.children.unshift(
        am5.Label.new(chartRoot1, {
          rotation: -90,
          text: "Value",
          y: am5.p50,
          centerX: am5.p50
        })
      );

      function createLineSeries(field, name, color) {
        let series = chart1.series.push(
          am5xy.LineSeries.new(chartRoot1, {
            name: name,
            xAxis: xAxis1,
            yAxis: yAxis1,
            valueYField: field,
            categoryXField: "label",
            tooltip: am5.Tooltip.new(chartRoot1, {
              labelText: "{name}: {valueY}"
            })
          })
        );
        series.strokes.template.setAll({ strokeWidth: 2, stroke: color });
        series.data.setAll(timeSeriesData);
        return series;
      }
      createLineSeries("revenue", "Gains", am5.color(0x67b7dc));
      createLineSeries("investment", "Capital", am5.color(0x6794dc));
      createLineSeries("difference", "Net Diff", am5.color(0xfdd400));

      // Add legend for chart1
      let legend1 = chart1.children.push(
        am5.Legend.new(chartRoot1, {
          centerX: am5.p50,
          x: am5.p50
        })
      );
      legend1.data.setAll(chart1.series.values);

      // RENDER CHART #2: AGGREGATE SYMBOL OVERVIEW
      chartRoot2 = am5.Root.new("chartdiv2");
      chartRoot2.setThemes([am5themes_Animated.new(chartRoot2)]);

      let chart2 = chartRoot2.container.children.push(
        am5xy.XYChart.new(chartRoot2, {
          panX: true,
          panY: true,
          wheelX: "panX",
          wheelY: "zoomX",
          layout: chartRoot2.verticalLayout
        })
      );

      // Add cursor
      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
      var cursor2 = chart2.set("cursor", am5xy.XYCursor.new(chartRoot2, {}));
      cursor2.lineY.set("visible", false);

      chart2.children.unshift(
        am5.Label.new(chartRoot2, {
          text: "Aggregate Totals per Symbol",
          fontSize: 18,
          fontWeight: "500",
          x: am5.p50,
          centerX: am5.p50,
          marginBottom: 15
        })
      );

      let xAxis2 = chart2.xAxes.push(
        am5xy.CategoryAxis.new(chartRoot2, {
          categoryField: "symbol",
          renderer: am5xy.AxisRendererX.new(chartRoot2, { minGridDistance: 30 }),
          tooltip: am5.Tooltip.new(chartRoot2, {})
        })
      );
      xAxis2.data.setAll(aggregatedSymbolData);
      xAxis2.get("renderer").labels.template.setAll({
        rotation: -45,
        centerY: am5.p50,
        centerX: am5.p50
      });

      let yAxis2 = chart2.yAxes.push(
        am5xy.ValueAxis.new(chartRoot2, {
          renderer: am5xy.AxisRendererY.new(chartRoot2, {})
        })
      );
      yAxis2.children.unshift(
        am5.Label.new(chartRoot2, {
          rotation: -90,
          text: "Value",
          y: am5.p50,
          centerX: am5.p50
        })
      );

      function createColumnSeries(field, name, color) {
        let series = chart2.series.push(
          am5xy.ColumnSeries.new(chartRoot2, {
            name: name,
            xAxis: xAxis2,
            yAxis: yAxis2,
            valueYField: field,
            categoryXField: "symbol",
            tooltip: am5.Tooltip.new(chartRoot2, {
              labelText: "{name}: {valueY}"
            })
          })
        );
        series.columns.template.setAll({
          tooltipY: 0,
          strokeOpacity: 0,
          fill: color
        });
        series.data.setAll(aggregatedSymbolData);
        return series;
      }
      createColumnSeries("revenue", "Gains", am5.color(0x67b7dc));
      createColumnSeries("investment", "Capital", am5.color(0x6794dc));
      createColumnSeries("difference", "Net Diff", am5.color(0xfdd400));

      // Add legend for chart2
      let legend2 = chart2.children.push(
        am5.Legend.new(chartRoot2, {
          centerX: am5.p50,
          x: am5.p50
        })
      );
      legend2.data.setAll(chart2.series.values);

      // Save snapshot & refresh difference chart
      saveSnapshot(aggregatedSymbolData);
      renderRefreshDiffChart();
    }

    /*************************************************
     * FUNCTION: fetchAndRenderData
     * Fetch data from API and then filter + render.
     *************************************************/
    function fetchAndRenderData() {
      document.getElementById("loadingIndicator").style.display = "block";
      fetch(apiUrl)
        .then(response => {
          if (!response.ok) throw new Error("Network response was not OK");
          return response.json();
        })
        .then(dashboardData => {
          allDashboardData = dashboardData;
          applyFilter();
        })
        .catch(error => {
          console.error("Error fetching data:", error);
          document.getElementById("chartdiv1").innerHTML =
            "<p class='text-center text-danger'>Failed to load time series data.</p>";
          document.getElementById("chartdiv2").innerHTML =
            "<p class='text-center text-danger'>Failed to load symbol data.</p>";
        })
        .finally(() => {
          document.getElementById("loadingIndicator").style.display = "none";
        });
    }

    /*************************************************
     * AUTO-REFRESH FUNCTIONS & COUNTDOWN TIMER
     *************************************************/
    function startAutoRefresh() {
      if (refreshTimer) clearInterval(refreshTimer);
      if (countdownTimer) clearInterval(countdownTimer);

      countdown = refreshIntervalSeconds;
      updateTimerDisplay();

      countdownTimer = setInterval(() => {
        countdown--;
        if (countdown <= 0) {
          countdown = refreshIntervalSeconds;
        }
        updateTimerDisplay();
      }, 1000);

      refreshTimer = setInterval(() => {
        fetchAndRenderData();
        countdown = refreshIntervalSeconds;
      }, refreshIntervalSeconds * 1000);
    }

    function stopAutoRefresh() {
      if (refreshTimer) {
        clearInterval(refreshTimer);
        refreshTimer = null;
      }
      if (countdownTimer) {
        clearInterval(countdownTimer);
        countdownTimer = null;
      }
      countdown = refreshIntervalSeconds;
      updateTimerDisplay();
    }

    /*************************************************
     * EVENT LISTENERS
     *************************************************/
    document.getElementById("refreshBtn").addEventListener("click", fetchAndRenderData);

    document.getElementById("settingsBtn").addEventListener("click", () => {
      document.getElementById("settingsDrawer").classList.add("open");
    });

    // CLOSE DRAWER BUTTON
    document.getElementById("drawerCloseBtn").addEventListener("click", () => {
      document.getElementById("settingsDrawer").classList.remove("open");
    });

    // SAVE & APPLY SETTINGS BUTTON
    document.getElementById("saveSettingsBtn").addEventListener("click", () => {
      autoRefresh = document.getElementById("autoRefreshCheckbox").checked;
      let intervalVal = parseInt(document.getElementById("refreshInterval").value, 10);
      refreshIntervalSeconds = isNaN(intervalVal) || intervalVal < 5 ? 30 : intervalVal;

      if (autoRefresh) {
        startAutoRefresh();
      } else {
        stopAutoRefresh();
      }

      // Apply filter after updating settings
      applyFilter();

      // Close drawer
      document.getElementById("settingsDrawer").classList.remove("open");
    });

    /*************************************************
     * INITIALIZE DASHBOARD ON PAGE LOAD
     *************************************************/
    fetchAndRenderData();
  </script>
</body>
</html>
