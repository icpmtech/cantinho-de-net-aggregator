@using MarketAnalyticHub.Models.ViewsModels
@model PortfolioDetailViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.LongName - Stock Card</title>

    <!-- Boxicons CSS -->
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

    <!-- amCharts CSS -->
    <link rel="stylesheet" href="https://cdn.amcharts.com/lib/5/index.css">

    <!-- Custom CSS -->
    <style>
        /* Reset some default styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

      

        .stock-card {
            background: #ffffff;
            border-radius: 16px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            width: 100%;
            padding: 24px;
            box-sizing: border-box;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            display: flex;
            flex-direction: column;
        }

        .stock-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

        .stock-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .stock-name h2 {
            margin-bottom: 4px;
            font-size: 1.4em;
            color: #333333;
            font-weight: 700;
        }

        .stock-symbol {
            color: #777777;
            font-size: 0.95em;
            font-weight: 500;
        }

        .stock-price {
            text-align: right;
        }

        .price {
            font-size: 1.8em;
            font-weight: 700;
            color: @((Model.RegularMarketChange >= 0) ? "#2e7d32" : "#c62828"); /* Green for positive, red for negative */
        }

        .change {
            display: block;
            font-size: 0.95em;
            margin-top: 4px;
        }

        .change.positive {
            color: #2e7d32;
        }

        .change.negative {
            color: #c62828;
        }

        .stock-details {
            margin-top: 24px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }

        .detail-item {
            display: flex;
            align-items: center;
        }

        .detail-item i {
            font-size: 1.5em;
            color: #1976d2;
            margin-right: 8px;
        }

        .detail-info {
            display: flex;
            flex-direction: column;
        }

        .detail-info .label {
            color: #555555;
            font-size: 0.85em;
            margin-bottom: 2px;
        }

        .detail-info .value {
            color: #333333;
            font-size: 1em;
            font-weight: 500;
        }

        /* Chart Container */
        .chart-container {
            width: 100%;
            height: 200px;
            margin-top: 24px;
            display: none; /* Hidden by default */
        }

        /* Accordion Styles */
        .accordion {
            margin-top: 24px;
            border-top: 1px solid #e0e0e0;
        }

        .accordion-item {
            border-bottom: 1px solid #e0e0e0;
        }

        .accordion-header {
            background: none;
            border: none;
            width: 100%;
            text-align: left;
            padding: 12px 0;
            font-size: 1em;
            font-weight: 500;
            color: #1976d2;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            outline: none;
            transition: background-color 0.3s ease;
        }

        .accordion-header:hover {
            background-color: #f9f9f9;
        }

        .accordion-header i {
            transition: transform 0.3s ease;
        }

        .accordion-header.active i {
            transform: rotate(180deg);
        }

        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            padding-left: 0;
        }

        .accordion-content.open {
            padding: 12px 0;
        }

        .accordion-content p {
            font-size: 0.9em;
            color: #555555;
            line-height: 1.4;
        }

        /* Show Chart Button */
        .show-chart-btn {
            margin-top: 24px;
            text-align: center;
        }

        .show-chart-btn button {
            background-color: #1976d2;
            color: #ffffff;
            padding: 10px 16px;
            border: none;
            border-radius: 8px;
            font-size: 0.95em;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .show-chart-btn button:hover {
            background-color: #115293;
        }

        /* Stock Footer */
        .stock-footer {
            margin-top: 24px;
            display: flex;
            justify-content: space-between;
        }

        .btn {
            flex: 1;
            text-align: center;
            background-color: #1976d2;
            color: #ffffff;
            padding: 10px 16px;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            font-size: 0.95em;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin-right: 8px;
        }

        .btn:last-child {
            margin-right: 0;
        }

        .btn:hover {
            background-color: #115293;
        }

        .btn-secondary {
            background-color: #ffffff;
            color: #1976d2;
            border: 2px solid #1976d2;
        }

        .btn-secondary:hover {
            background-color: #e3f2fd;
        }

        /* Responsive Design */
        @@media (max-width: 480px) {
            .stock-details {
                grid-template-columns: 1fr;
            }

            .stock-footer {
                flex-direction: column;
            }

            .btn {
                margin-right: 0;
                margin-bottom: 12px;
            }

            .btn:last-child {
                margin-bottom: 0;
            }

            .show-chart-btn button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="stock-card">
        <!-- Stock Header -->
        <div class="stock-header">
            <div class="stock-name">
                <h2>@Model.LongName</h2>
                <span class="stock-symbol">@Model.Symbol</span>
            </div>
            <div class="stock-price">
                <span class="price">€@Model.RegularMarketPrice</span>
                <span class="change @(Model.RegularMarketChange >= 0 ? "positive" : "negative")">
                    @(Model.RegularMarketChange >= 0 ? "+" : "")€@Model.RegularMarketChange (@Model.RegularMarketChangePercent.ToString("F2"))%
                </span>
            </div>
        </div>

        <!-- Stock Details -->
        <div class="stock-details">
            <div class="detail-item">
                <i class='bx bx-line-chart'></i>
                <div class="detail-info">
                    <span class="label">Market Cap</span>
                    <span class="value">€@String.Format("{0:N2}", Model.MarketCap / 1e9)B</span>
                </div>
            </div>
            <div class="detail-item">
                <i class='bx bx-bar-chart-alt-2'></i>
                <div class="detail-info">
                    <span class="label">PE Ratio</span>
                    <span class="value">Trailing: @Model.TrailingPE</span>
                    <span class="value">Forward: @Model.ForwardPE</span>
                </div>
            </div>
            <div class="detail-item">
                <i class='bx bx-money'></i>
                <div class="detail-info">
                    <span class="label">Dividend Yield</span>
                    <span class="value">@Model.DividendYield.ToString("F2")%</span>
                </div>
            </div>
            <div class="detail-item">
                <i class='bx bx-calendar'></i>
                <div class="detail-info">
                    <span class="label">52 Week Range</span>
                    <span class="value">@Model.FiftyTwoWeekRange</span>
                </div>
            </div>
        </div>

        <!-- Show Chart Button -->
        <div class="show-chart-btn">
            <button id="toggleChartBtn">Show Chart</button>
        </div>

        <!-- Chart Container -->
        <div id="chartdiv" class="chart-container"></div>

        <!-- Accordion Section -->
        <div class="accordion">
            <!-- Accordion Item 1 -->
            <div class="accordion-item">
                <button class="accordion-header">
                    <span>Financials</span>
                    <i class='bx bx-chevron-down'></i>
                </button>
                <div class="accordion-content">
                    <p>
                        <strong>Revenue:</strong> €@String.Format("{0:N2}", Model.Revenue)<br>
                        <strong>Net Income:</strong> €@String.Format("{0:N2}", Model.NetIncome)<br>
                        <strong>EBITDA:</strong> €@String.Format("{0:N2}", Model.EBITDA)
                    </p>
                </div>
            </div>

            <!-- Accordion Item 2 -->
            <div class="accordion-item">
                <button class="accordion-header">
                    <span>Recent News</span>
                    <i class='bx bx-chevron-down'></i>
                </button>
                <div class="accordion-content">
                    @if (Model.RecentNews != null && Model.RecentNews.Any())
                    {
                        <ul>
                            @foreach (var news in Model.RecentNews)
                            {
                                <li><strong>@news.Date.ToString("yyyy-MM-dd"):</strong> @news.Title</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No recent news available.</p>
                    }
                </div>
            </div>

            <!-- Accordion Item 3 -->
            <div class="accordion-item">
                <button class="accordion-header">
                    <span>Company Overview</span>
                    <i class='bx bx-chevron-down'></i>
                </button>
                <div class="accordion-content">
                    <p>
                        @Model.CompanyOverview
                    </p>
                </div>
            </div>
        </div>

        <!-- Stock Footer -->
        <div class="stock-footer">
            <a href="@Url.Action("Details", "Portfolio", new { id = Model.Id })" class="btn">View Details</a>
            <a href="@Url.Action("AddToWatchlist", "Portfolio", new { id = Model.Id })" class="btn btn-secondary">Add to Watchlist</a>
        </div>
    </div>

    <!-- amCharts 5 -->
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

    <!-- Chart Initialization Script -->
    <script>
        // Initialize the chart variable globally to access it later
        let chartInitialized = false;
        let chart;

        function initializeChart(data) {
            if (chartInitialized) return;

            // Create root element
            am5.ready(function () {

                // Create root element
                var root = am5.Root.new("chartdiv");

                // Set themes
                root.setThemes([
                    am5themes_Animated.new(root)
                ]);

                // Create chart
                chart = root.container.children.push(
                    am5xy.XYChart.new(root, {
                        panX: false,
                        panY: false,
                        wheelX: "none",
                        wheelY: "none",
                        layout: root.verticalLayout
                    })
                );

                // Add cursor
                var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
                cursor.lineY.set("visible", false);

                // Create axes
                var xAxis = chart.xAxes.push(
                    am5xy.DateAxis.new(root, {
                        maxDeviation: 0.1,
                        baseInterval: { timeUnit: "day", count: 1 },
                        renderer: am5xy.AxisRendererX.new(root, { minGridDistance: 50 }),
                        tooltip: am5.Tooltip.new(root, {})
                    })
                );

                var yAxis = chart.yAxes.push(
                    am5xy.ValueAxis.new(root, {
                        renderer: am5xy.AxisRendererY.new(root, {})
                    })
                );

                // Create series
                var series = chart.series.push(
                    am5xy.LineSeries.new(root, {
                        name: "Price",
                        xAxis: xAxis,
                        yAxis: yAxis,
                        valueYField: "value",
                        valueXField: "date",
                        tooltip: am5.Tooltip.new(root, {
                            labelText: "{valueY}€"
                        })
                    })
                );

                series.data.setAll(data);

                // Add scrollbar
                chart.set("scrollbarX", am5.Scrollbar.new(root, {
                    orientation: "horizontal"
                }));

                // Add cursor
                chart.set("cursor", am5xy.XYCursor.new(root, {
                    behavior: "zoomX"
                }));

                // Animate on load
                series.appear(1000);
                chart.appear(1000, 100);

                chartInitialized = true;
            }); // end am5.ready()
        }
    </script>

    <!-- Accordion Functionality Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const accordionHeaders = document.querySelectorAll('.accordion-header');

            accordionHeaders.forEach(header => {
                header.addEventListener('click', function () {
                    // Toggle active class
                    this.classList.toggle('active');

                    // Toggle the accordion content
                    const content = this.nextElementSibling;
                    if (content.style.maxHeight) {
                        // Accordion is open, close it
                        content.style.maxHeight = null;
                        content.classList.remove('open');
                    } else {
                        // Accordion is closed, open it
                        content.style.maxHeight = content.scrollHeight + "px";
                        content.classList.add('open');
                    }
                });
            });

            // Show Chart Button Functionality
            const toggleChartBtn = document.getElementById('toggleChartBtn');
            const chartDiv = document.getElementById('chartdiv');

            toggleChartBtn.addEventListener('click', function () {
                if (chartDiv.style.display === "none" || chartDiv.style.display === "") {
                    chartDiv.style.display = "block";
                    this.textContent = "Hide Chart";
                    initializeChart(@Html.Raw(Json.Serialize(Model.HistoricalData.Select(d => new { date = d.Date, value = d.Value })))); // Initialize the chart with dynamic data
                } else {
                    chartDiv.style.display = "none";
                    this.textContent = "Show Chart";
                }
            });
        });
    </script>
</body>
</html>
