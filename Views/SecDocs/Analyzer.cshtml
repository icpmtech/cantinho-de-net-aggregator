<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SEC 10-K Financial Analysis - AI Enhanced</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Google Fonts (Roboto) -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <!-- FontAwesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <!-- SheetJS to parse Excel files -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
    <!-- amCharts libraries -->
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <!-- For PieChart support -->
    <script src="https://cdn.amcharts.com/lib/5/percent.js"></script>

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f7fa;
            color: #333;
        }

        .navbar-custom {
            background-color: #003366;
        }

            .navbar-custom .navbar-brand,
            .navbar-custom .nav-link {
                color: #fff;
            }

        .jumbotron {
            background: url('https://images.unsplash.com/photo-1554224154-22dec7ec8818?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') no-repeat center center;
            background-size: cover;
            color: #fff;
            padding: 4rem 2rem;
            margin-bottom: 2rem;
            border-radius: 0.5rem;
        }

            .jumbotron h1 {
                font-size: 2.5rem;
                font-weight: 700;
            }

        .card-finance {
            border: 0;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .btn-finance {
            background-color: #003366;
            color: #fff;
            border: none;
        }

            .btn-finance:hover {
                background-color: #002244;
            }

        .nav-tabs .nav-link.active {
            background-color: #003366;
            color: #fff;
        }

        .nav-tabs .nav-link {
            color: #003366;
            font-weight: 500;
        }

        .analysis-container {
            margin-top: 1.5rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 0.5rem;
            background-color: #fff;
        }

        .chart-container {
            margin-top: 1.5rem;
            height: 400px;
            border: 1px solid #ddd;
            border-radius: 0.5rem;
            background-color: #fff;
            padding: 1rem;
        }

        .sheet-table th,
        .sheet-table td {
            font-size: 0.9rem;
        }
        /* Person Info container */
        #personInfoResult {
            margin-top: 1.5rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 0.5rem;
            background-color: #fff;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-custom">
        <div class="container">
            <a class="navbar-brand" href="#">SEC 10-K Dashboard</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon" style="filter: invert(1);"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item"><a class="nav-link" href="#">Home</a></li>
                    <li class="nav-item"><a class="nav-link" href="#">Analysis</a></li>
                    <li class="nav-item"><a class="nav-link" href="#">About</a></li>
                    <!-- API Key Drawer Button -->
                    <li class="nav-item">
                        <button class="btn btn-outline-light" data-bs-toggle="offcanvas" data-bs-target="#apiKeyDrawer">
                            <i class="fas fa-key"></i> API Key
                        </button>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Offcanvas Drawer for API Key -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="apiKeyDrawer" aria-labelledby="apiKeyDrawerLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="apiKeyDrawerLabel">Set OpenAI API Key</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div class="mb-3">
                <label for="apiKeyInput" class="form-label">Enter your OpenAI API key:</label>
                <input type="password" class="form-control" id="apiKeyInput" placeholder="sk-...">
            </div>
            <button class="btn btn-primary" onclick="saveApiKey()">Save Key</button>
            <hr>
            <p class="small text-muted">Your API key will be stored in your browser's local storage.</p>
        </div>
    </div>

    <!-- Jumbotron / Header -->
    <div class="jumbotron text-center">
        <div class="container">
            <h1 class="display-5">SEC 10-K Financial Analysis</h1>
            <p class="lead">
                Upload your SEC 10-K Excel file to generate interactive charts and detailed financial analysis powered by OpenAI.
            </p>
        </div>
    </div>

    <div class="container mb-5">
        <!-- Card for File Upload & Person Lookup -->
        <div class="card card-finance">
            <div class="card-body">
                <!-- Row for file upload -->
                <div class="row mb-3">
                    <div class="col-md-6 mb-2">
                        <input type="file" id="fileSecInput" accept=".xlsx" class="form-control">
                    </div>
                    <div class="col-md-6">
                        <button class="btn btn-finance w-100" onclick="readExcelFile()">
                            <i class="fas fa-upload"></i> Upload & Analyze
                        </button>
                    </div>
                </div>
                <!-- Row for person lookup -->
                <div class="row">
                    <div class="col-md-6 mb-2">
                        <input type="text" id="personName" class="form-control" placeholder="Enter a person's name (e.g. Elon Musk)">
                    </div>
                    <div class="col-md-6">
                        <button class="btn btn-success w-100" onclick="getPersonDetails()">
                            <i class="fas fa-user"></i> Get Person Info
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Result of Person Info -->
        <div id="personInfoResult"></div>

        <!-- Tabs for Sheets -->
        <ul class="nav nav-tabs" id="sheetTabs" role="tablist"></ul>
        <div class="tab-content" id="sheetTabsContent"></div>
    </div>

    <!-- Bootstrap JS bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // --------------------------
        // 1. API Key Handling
        // --------------------------
        function saveApiKey() {
          const key = document.getElementById("apiKeyInput").value.trim();
          if (key) {
            localStorage.setItem("openai_api_key", key);
            alert("API key saved!");
            document.getElementById("apiKeyInput").value = "";
            const offcanvas = bootstrap.Offcanvas.getInstance(document.getElementById("apiKeyDrawer"));
            offcanvas.hide();
          } else {
            alert("Please enter a valid API key.");
          }
        }

        // --------------------------
        // 2. Get Person Info (Wikipedia + OpenAI)
        // --------------------------
        async function getPersonDetails() {
          const personName = document.getElementById("personName").value.trim();
          const personInfoDiv = document.getElementById("personInfoResult");
          if (!personName) {
            alert("Please enter a person's name.");
            return;
          }
          personInfoDiv.innerHTML = `
            <div class="text-center">
              <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <br>Fetching details from Wikipedia...
            </div>
          `;
          try {
            const apiUrl = `https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(personName)}`;
            const wikiResponse = await fetch(apiUrl);
            if (!wikiResponse.ok) {
              throw new Error("Could not fetch from Wikipedia.");
            }
            const wikiData = await wikiResponse.json();
            const summary = wikiData.extract ? wikiData.extract : "No summary found.";
            const openAiSummary = await summarizePersonWithOpenAI(summary);
            personInfoDiv.innerHTML = `
              <h5>Wikipedia Summary for ${personName}</h5>
              <p>${summary}</p>
              <hr>
              <h5>OpenAI Enhanced Summary</h5>
              <p>${openAiSummary}</p>
            `;
          } catch (error) {
            personInfoDiv.innerHTML = `<div class="text-danger">Error: ${error.message}</div>`;
          }
        }

        async function summarizePersonWithOpenAI(wikiText) {
          const apiKey = localStorage.getItem("openai_api_key");
          if (!apiKey) {
            return "OpenAI API key not found. Please enter your key to get an enhanced summary.";
          }
          try {
            const prompt = `
              You are an expert summarizer. The following text is from a Wikipedia summary.
              Please provide a concise yet informative summary, focusing on the most notable aspects:
              ${wikiText}
            `;
            const response = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Authorization": "Bearer " + apiKey
              },
              body: JSON.stringify({
                model: "gpt-4",
                messages: [
                  { role: "system", content: "You are an expert summarizer." },
                  { role: "user", content: prompt }
                ],
                max_tokens: 150,
                temperature: 0.7
              })
            });
            const json = await response.json();
            if (!json.choices || !json.choices[0]) {
              return "No summary returned from OpenAI.";
            }
            return json.choices[0].message.content.trim();
          } catch (err) {
            return "Error calling OpenAI: " + err.message;
          }
        }

        // --------------------------
        // 3. Reading the Excel File
        // --------------------------
        function readExcelFile() {
          const fileInput = document.getElementById("fileSecInput");
          if (!fileInput.files.length) {
            alert("Please upload an Excel file first.");
            return;
          }
          const reader = new FileReader();
          reader.onload = function(e) {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            document.getElementById("sheetTabs").innerHTML = "";
            document.getElementById("sheetTabsContent").innerHTML = "";
            workbook.SheetNames.forEach((sheetName, index) => {
              const sheet = workbook.Sheets[sheetName];
              const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });
              if (jsonData.length > 0) {
                createTabItem(sheetName, jsonData, index);
              }
            });
          };
          reader.readAsArrayBuffer(fileInput.files[0]);
        }

        // --------------------------
        // Utility: Sanitize sheet names for element IDs
        // --------------------------
        function sanitizeSheetName(name) {
          return name.replace(/\s/g, '_').replace(/[^\w]/g, '');
        }

        // --------------------------
        // 4. Creating Tab Items (Analysis first, then Table)
        // --------------------------
        function createTabItem(sheetName, data, index) {
          const sanitizedName = sanitizeSheetName(sheetName);
          const tabId = `sheetTab_${sanitizedName}`;
          const paneId = `sheetPane_${sanitizedName}`;
          const sheetTabs = document.getElementById("sheetTabs");
          const sheetTabsContent = document.getElementById("sheetTabsContent");
          const li = document.createElement("li");
          li.className = "nav-item";
          li.setAttribute("role", "presentation");
          const button = document.createElement("button");
          button.className = `nav-link ${index === 0 ? "active" : ""}`;
          button.id = tabId;
          button.setAttribute("data-bs-toggle", "tab");
          button.setAttribute("data-bs-target", `#${paneId}`);
          button.setAttribute("type", "button");
          button.setAttribute("role", "tab");
          button.setAttribute("aria-controls", paneId);
          button.setAttribute("aria-selected", index === 0 ? "true" : "false");
          button.innerText = sheetName;
          li.appendChild(button);
          sheetTabs.appendChild(li);

          // Create tab pane
          const tabPane = document.createElement("div");
          tabPane.className = `tab-pane fade ${index === 0 ? "show active" : ""}`;
          tabPane.id = paneId;
          tabPane.setAttribute("role", "tabpanel");
          tabPane.setAttribute("aria-labelledby", tabId);

          // 1) Button Group: Analyze Data and Generate Chart
          const btnGroup = document.createElement("div");
          btnGroup.className = "d-flex flex-wrap gap-2 mt-3";
          const analyzeBtn = document.createElement("button");
          analyzeBtn.className = "btn btn-info";
          analyzeBtn.innerHTML = '<i class="fas fa-robot"></i> Analyze Data';
          analyzeBtn.onclick = () => analyzeData(sheetName, data);
          btnGroup.appendChild(analyzeBtn);
          const chartBtn = document.createElement("button");
          chartBtn.className = "btn btn-warning";
          chartBtn.innerHTML = '<i class="fas fa-chart-bar"></i> Generate Chart';
          chartBtn.onclick = () => createDynamicChart(sheetName, data);
          btnGroup.appendChild(chartBtn);

          // 2) Analysis Container
          const analysisDiv = document.createElement("div");
          analysisDiv.className = "analysis-container";
          analysisDiv.id = "analysisContainer_" + sanitizedName;

          // 3) Table for Raw Data
          const table = document.createElement("table");
          table.className = "table table-bordered sheet-table mt-3";
          const thead = document.createElement("thead");
          const tbody = document.createElement("tbody");
          const headerRow = document.createElement("tr");
          data[0].forEach(headerText => {
            const th = document.createElement("th");
            th.innerText = headerText || "";
            headerRow.appendChild(th);
          });
          thead.appendChild(headerRow);
          for (let i = 1; i < data.length; i++) {
            const row = document.createElement("tr");
            data[i].forEach(cell => {
              const td = document.createElement("td");
              td.innerText = cell !== undefined ? cell : "";
              row.appendChild(td);
            });
            tbody.appendChild(row);
          }
          table.appendChild(thead);
          table.appendChild(tbody);

          // 4) Chart Container
          const chartContainerDiv = document.createElement("div");
          chartContainerDiv.className = "chart-container";
          chartContainerDiv.id = "chartContainer_" + sanitizedName;

          // Append elements in order: Button Group, Analysis Container, Table, then Chart Container
          tabPane.appendChild(btnGroup);
          tabPane.appendChild(analysisDiv);
          tabPane.appendChild(table);
          tabPane.appendChild(chartContainerDiv);
          sheetTabsContent.appendChild(tabPane);
        }

        // --------------------------
        // 5. Create Dynamic Chart Based on Table Content
        // --------------------------
        function createDynamicChart(sheetName, data) {
          const sanitizedName = sanitizeSheetName(sheetName);
          const containerId = "chartContainer_" + sanitizedName;
          const chartDiv = document.getElementById(containerId);
          // Clear any previous chart
          chartDiv.innerHTML = "";

          // Determine the number of numeric columns (excluding the first category column)
          const headers = data[0];
          let numericCount = 0;
          for (let j = 1; j < headers.length; j++) {
            for (let i = 1; i < Math.min(data.length, 6); i++) {
              if (!isNaN(parseFloat(data[i][j]))) {
                numericCount++;
                break;
              }
            }
          }
          // Decide chart type: if only one numeric column, use Pie; else use Column chart.
          const chartType = (numericCount === 1) ? "pie" : "column";

          // Prepare data for charting
          let chartData = [];
          for (let i = 1; i < data.length; i++) {
            const row = data[i];
            let dataObj = { category: row[0] };
            for (let j = 1; j < headers.length; j++) {
              let key = headers[j] || ("Series " + j);
              let value = parseFloat(row[j]);
              dataObj[key] = isNaN(value) ? 0 : value;
            }
            chartData.push(dataObj);
          }

          // Create chart using amCharts based on the determined type
          let root = am5.Root.new(containerId);
          root.setThemes([am5themes_Animated.new(root)]);

          if (chartType === "pie") {
            // Create a Pie Chart (using the second column as the value)
            if (headers.length < 2) {
              chartDiv.innerHTML = "Not enough numeric data for a Pie Chart.";
              return;
            }
            let valueKey = headers[1] || "Value";
            let chart = root.container.children.push(
              am5percent.PieChart.new(root, { layout: root.verticalLayout })
            );
            let series = chart.series.push(
              am5percent.PieSeries.new(root, {
                name: "Pie Series",
                categoryField: "category",
                valueField: valueKey,
                tooltip: am5.Tooltip.new(root, { labelText: "{category}: {value}" })
              })
            );
            series.data.setAll(chartData);
            series.appear(1000, 100);
          } else {
            // Create a Column Chart (XY Chart)
            let chart = root.container.children.push(
              am5xy.XYChart.new(root, {
                panX: true,
                panY: true,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root.verticalLayout
              })
            );
            // X Axis
            let xAxis = chart.xAxes.push(
              am5xy.CategoryAxis.new(root, {
                categoryField: "category",
                renderer: am5xy.AxisRendererX.new(root, { minGridDistance: 30 }),
                tooltip: am5.Tooltip.new(root, { labelText: "Category: {category}" })
              })
            );
            xAxis.data.setAll(chartData);
            // Y Axis
            let yAxis = chart.yAxes.push(
              am5xy.ValueAxis.new(root, { renderer: am5xy.AxisRendererY.new(root, {}) })
            );
            // For each numeric header (starting at index 1)
            for (let j = 1; j < headers.length; j++) {
              let seriesKey = headers[j] || ("Series " + j);
              let series = chart.series.push(
                am5xy.ColumnSeries.new(root, {
                  name: seriesKey,
                  xAxis: xAxis,
                  yAxis: yAxis,
                  valueYField: seriesKey,
                  categoryXField: "category",
                  tooltip: am5.Tooltip.new(root, { labelText: "{name}: {valueY}" })
                })
              );
              series.data.setAll(chartData);
              series.appear();
            }
            // Optional: Add a legend
            let legend = chart.children.push(
              am5.Legend.new(root, { centerX: am5.p50, x: am5.p50, layout: root.horizontalLayout })
            );
            legend.data.setAll(chart.series.values);
            chart.appear(1000, 100);
          }
        }

        // --------------------------
        // 6. OpenAI Analysis of 10-K Data
        // --------------------------
        function analyzeData(sheetName, data) {
          const containerId = "analysisContainer_" + sanitizeSheetName(sheetName);
          const analysisContainer = document.getElementById(containerId);
          analysisContainer.innerHTML = `
            <div class="text-center">
              <div class="spinner-border text-info" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <br>Analyzing data...
            </div>
          `;
          const apiKey = localStorage.getItem("openai_api_key");
          if (!apiKey) {
            analysisContainer.innerHTML = "<strong>Error:</strong> No OpenAI API key found. Please set your key in the settings.";
            return;
          }
          const analysisPrompt = `
            You are an expert financial and regulatory analyst. Analyze the following
            10-K SEC filing data from "${sheetName}" and provide detailed insights on
            the company's financial condition, trends, and potential risks.
            Data:\n\n${JSON.stringify(data)}
          `;
          fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": "Bearer " + apiKey
            },
            body: JSON.stringify({
              model: "gpt-4",
              messages: [
                { "role": "system", "content": "You are an expert financial and regulatory analyst." },
                { "role": "user", "content": analysisPrompt }
              ],
              max_tokens: 300,
              temperature: 0.7
            })
          })
          .then(response => response.json())
          .then(analysisResult => {
            const analysisText =
              analysisResult.choices &&
              analysisResult.choices[0] &&
              analysisResult.choices[0].message
                ? analysisResult.choices[0].message.content
                : "No analysis returned.";
            const sentimentPrompt = `
              You are an expert sentiment analyst. Analyze the following raw 10-K SEC
              filing data (in JSON format) and provide a sentiment analysis including
              an overall sentiment label (Positive, Negative, or Neutral),
              a numerical score (between -10 and +10),
              and a brief explanation:
              \n\n${JSON.stringify(data)}
            `;
            fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Authorization": "Bearer " + apiKey
              },
              body: JSON.stringify({
                model: "gpt-4",
                messages: [
                  { "role": "system", "content": "You are an expert sentiment analyst." },
                  { "role": "user", "content": sentimentPrompt }
                ],
                max_tokens: 150,
                temperature: 0.7
              })
            })
            .then(response2 => response2.json())
            .then(sentimentResult => {
              const sentimentText =
                sentimentResult.choices &&
                sentimentResult.choices[0] &&
                sentimentResult.choices[0].message
                  ? sentimentResult.choices[0].message.content
                  : "No sentiment analysis returned.";
              analysisContainer.innerHTML = `
                <strong>OpenAI Analysis:</strong><br>${analysisText}<br><br>
                <strong>Sentiment Analysis (of raw data):</strong><br>${sentimentText}
              `;
            })
            .catch(error2 => {
              analysisContainer.innerHTML = `<strong>Error during sentiment analysis:</strong> ${error2}`;
            });
          })
          .catch(error => {
            analysisContainer.innerHTML = `<strong>Error during analysis:</strong> ${error}`;
          });
        }
    </script>
</body>
</html>
