@* _Chat.cshtml *@
<!-- Chat Window
https://themesbrand.com/skote/layouts/icons-boxicons.html-->
<div id="chatWindow" class="card chat-window minimized">
    <div class="card-header">
        <h5 class="d-inline">AI-Pilot</h5>
        <button class="btn btn-sm btn-primary float-end" onclick="toggleChat()">_</button>
        <button class="btn btn-sm btn-primary float-end me-2" onclick="maximizeChat()">â¬œ</button>
        <hr />
    </div>
    <div class="card-body">
        <div class="mb-3">
            <div id="defaultFormControlHelp" class="form-text">We'll never share your details with anyone else.</div>
            <input class="form-control mb-2" type="text" id="userInput" placeholder="User name" aria-describedby="defaultFormControlHelp" />
            <textarea class="form-control mb-2" id="messageInput" placeholder="Message"></textarea>
            <button class="btn btn-primary" type="button" onclick="sendMessage()">
                <i class="bx bx-send"></i> Send
            </button>
        </div>
        <div id="messagesList" class="mt-3"></div>
    </div>
</div>

<!-- AI Copilot Icon Button -->
<button class="btn btn-primary ai-copilot-btn" onclick="toggleChat()">
    <i class="bx bx-bot bx-sm"></i>
</button>



    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/2.0.0/marked.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism-okaidia.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/prism.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .build();

            connection.on("ReceiveMessage", (user, message) => {
                const msg = document.createElement("div");
                const messageId = `msg-${Date.now()}`;
                msg.setAttribute("id", messageId);
                msg.innerHTML = `<strong>${user}:</strong> ${marked(message)}
                            <button class="btn btn-sm btn-outline-secondary" onclick="copyMessage('${messageId}')">Copy</button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteMessage('${messageId}')">Delete</button>
                            <button class="btn btn-sm btn-outline-success" onclick="saveMessage('${messageId}')">Save</button>`;
                document.getElementById("messagesList").appendChild(msg);
                Prism.highlightAllUnder(msg);
            });

            connection.start().catch(err => console.error(err.toString()));

            window.sendMessage = function () {
                const user = document.getElementById("userInput").value;
                const message = document.getElementById("messageInput").value;
                connection.invoke("SendMessage", user, message).catch(err => console.error(err.toString()));
            };

            window.toggleChat = function () {
                const chatWindow = document.getElementById("chatWindow");
                chatWindow.classList.toggle("minimized");
            };

            window.maximizeChat = function () {
                const chatWindow = document.getElementById("chatWindow");
                chatWindow.classList.toggle("maximized");
            };

            window.copyMessage = function (messageId) {
                const messageText = document.getElementById(messageId).innerText;
                navigator.clipboard.writeText(messageText).then(() => {
                    alert("Message copied to clipboard");
                });
            };

            window.deleteMessage = function (messageId) {
                const messageElement = document.getElementById(messageId);
                messageElement.parentNode.removeChild(messageElement);
            };

            window.saveMessage = function (messageId) {
                const messageElement = document.getElementById(messageId);
                const messageText = messageElement.innerText;
                fetch('/api/Chat/saveMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content: messageText })
                })
                    .then(response => response.json())
                    .then(data => {
                        alert(`Message saved to ${data.filePath}`);
                    })
                    .catch(error => {
                        console.error('Error saving message:', error);
                    });
            };
        });
    </script>


<style>
    .chat-window {
        position: fixed;
        bottom: 10px;
        right: 10px;
        width: 300px;
        height: 80%;
        max-height: 90%;
        overflow-y: auto;
        z-index: 1000;
        transition: transform 0.3s ease-in-out, width 0.3s ease-in-out, max-height 0.3s ease-in-out;
    }

        .chat-window.minimized {
            transform: translateY(calc(100% - 40px));
        }

        .chat-window.maximized {
            width: 50%;
            max-height: 90%;
            bottom: 5%;
            right: 0;
        }

    .ai-copilot-btn {
        position: fixed;
        bottom: 10px;
        right: 10px;
        z-index: 1001;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 24px;
    }

    #messagesList {
        max-height: 200px;
        overflow-y: auto;
    }

    pre[class*="language-"], code[class*="language-"] {
        background: #2d2d2d;
        color: #f8f8f2;
        border-radius: 5px;
        padding: 10px;
        margin: 5px 0;
    }

    .token.comment,
    .token.prolog,
    .token.doctype,
    .token.cdata {
        color: #999999;
    }

    .token.punctuation {
        color: #f8f8f2;
    }

    .token.property,
    .token.tag,
    .token.constant,
    .token.symbol,
    .token.deleted {
        color: #f92672;
    }

    .token.boolean,
    .token.number {
        color: #ae81ff;
    }

    .token.selector,
    .token.attr-name,
    .token.string,
    .token.char,
    .token.builtin,
    .token.inserted {
        color: #a6e22e;
    }

    .token.operator,
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string,
    .token.variable {
        color: #f8f8f2;
    }

    .token.atrule,
    .token.attr-value,
    .token.function,
    .token.class-name {
        color: #e6db74;
    }

    .token.keyword {
        color: #66d9ef;
    }

    .token.regex,
    .token.important {
        color: #fd971f;
    }

    .token.important,
    .token.bold {
        font-weight: bold;
    }

    .token.italic {
        font-style: italic;
    }

    .token.entity {
        cursor: help;
    }
</style>
