@* _Chat.cshtml *@
<!-- Chat Window -->
@{
    var isAIPilotActivated = User.IsInRole("aiPilot");
}

@if (User.Identity.IsAuthenticated && isAIPilotActivated)
{
    <div id="chatWindow" class="card chat-window minimized">
        <div class="card-header border-1 d-flex justify-content-between bg-primary align-items-center">
            <h5 class="d-inline" style="color: white;">
                <img width="36" src="~/icons/marketanalytic_hub_icon_48x48.png" />AI-Pilot
            </h5>
            <div>
                <button class="btn btn-sm btn-secondary me-2" onclick="maximizeChat()">⬜</button>
                <button class="btn btn-sm btn-danger" onclick="closeChat()">✕</button>
            </div>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div id="defaultFormControlHelp" class="form-text">We'll never share your details with anyone else.</div>
                <input class="form-control mb-2" type="text" readonly="" value="all@test.com" id="userInput" placeholder="User name" aria-describedby="defaultFormControlHelp">
                <div class="input-group mb-2">
                    <input type="file" class="form-control" id="fileInput">
                    <button class="btn btn-outline-primary" onclick="sendFile()" type="button">
                        <i class="bx bx-upload"></i>
                    </button>
                </div>
                <div class="input-group mb-2 input-group-merge speech-to-text">
                    <button class="btn btn-outline-primary" type="button" onclick="sendMessage()">
                        <i class="bx bx-send"></i>
                    </button>
                    <textarea class="form-control" id="messageInput" rows="20" placeholder="Ask me..."></textarea>
                    <button class="btn btn-outline-danger" onclick="startRecording()" id="startRecordingButton" style="display: block;">
                        <i class="bx bx-microphone cursor-pointer text-to-speech-toggle"></i>
                    </button>
                    <button class="btn btn-outline-danger" type="button" onclick="stopRecording()" style="display: none;" id="stopRecordingButton">
                        <i class="bx bx-stop"></i>
                    </button>
                   
                </div>
               

                <div class="d-flex justify-content-between align-items-center  mb2 ">
                    <button class="btn btn-outline-danger" type="button" onclick="stopAudio()" id="stopAudioButton" style="display: none;">
                        <i class="bx bx-stop"></i>
                    </button>
                </div>

            </div>
            <div id="messagesList" class="mt-3"></div>
        </div>
    </div>

    <!-- AI Copilot Icon Button -->
    <button class="btn btn-primary ai-copilot-btn" onclick="toggleChat()">
        <i class="bx bx-bot bx-sm"></i>
    </button>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/2.0.0/marked.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism-okaidia.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/prism.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .build();

            let currentAudio = null;

            connection.on("ReceiveMessage", function (user, message) {
                const msg = document.createElement("div");
                const messageId = `msg-${Date.now()}`;
                msg.setAttribute("id", messageId);
                msg.innerHTML = `<strong>${user}:</strong> ${marked(message)}
                                                        <div class="btn-group mt-1" role="group">
                                                            <button class="btn btn-sm btn-outline-secondary" onclick="copyMessage('${messageId}')">Copy</button>
                                                            <button class="btn btn-sm btn-outline-danger" onclick="deleteMessage('${messageId}')">Delete</button>
                                                            <button class="btn btn-sm btn-outline-success" onclick="saveMessage('${messageId}')">Save</button>
                                                        </div>`;
                document.getElementById("messagesList").appendChild(msg);
                // Convert the transcription to speech and play it
                readAudio(message);
                Prism.highlightAllUnder(msg);
            });

            connection.on("ReceiveFile", function (user, fileUrl, analysis) {
                const msg = document.createElement("div");
                const messageId = `msg-${Date.now()}`;
                msg.setAttribute("id", messageId);
                msg.innerHTML = `<strong>${user}:</strong> <a href="${fileUrl}" target="_blank">${fileUrl}</a>
                                                        <p>Analysis: ${marked(analysis)}</p>
                                                        <div class="btn-group mt-1" role="group">
                                                            <button class="btn btn-sm btn-outline-secondary" onclick="copyMessage('${messageId}')">Copy</button>
                                                            <button class="btn btn-sm btn-outline-danger" onclick="deleteMessage('${messageId}')">Delete</button>
                                                            <button class="btn btn-sm btn-outline-success" onclick="saveMessage('${messageId}')">Save</button>
                                                        </div>`;
                document.getElementById("messagesList").appendChild(msg);
            });

            connection.start().catch(function (err) {
                return console.error(err.toString());
            });

            window.sendMessage = function () {
                const user = document.getElementById("userInput").value;
                if (!user) {
                    alert('Please enter your user name.');
                    return;
                }

                const message = document.getElementById("messageInput").value;
                if (!message) {
                    alert('Please enter a message.');
                    return;
                }

                connection.invoke("SendMessage", user, message).catch(function (err) {
                    return console.error(err.toString());
                });
            };

            window.sendFile = function () {
                const user = document.getElementById("userInput").value;
                if (!user) {
                    alert('Please enter your user name.');
                    return;
                }

                const fileInput = document.getElementById("fileInput");
                const file = fileInput.files[0];
                if (!file) {
                    alert('Please select a file to upload.');
                    return;
                }

                const formData = new FormData();
                formData.append("UploaderName", user);
                formData.append("UploaderAddress", "Analyzer"); // Add an appropriate value or get it from an input field
                formData.append("File", file);

                // Add instructional message to chat
                const msgInstruction = document.createElement("div");
                const instructionId = `msg-instruction-${Date.now()}`;
                msgInstruction.setAttribute("id", instructionId);
                msgInstruction.innerHTML = `<strong>${user}:</strong> Please analyze the content of the following file.`;
                document.getElementById("messagesList").appendChild(msgInstruction);

                // Show "Analyzing file..." message
                const msg = document.createElement("div");
                const messageId = `msg-${Date.now()}`;
                msg.setAttribute("id", messageId);
                msg.innerHTML = `<strong>${user}:</strong> Analyzing file...`;
                document.getElementById("messagesList").appendChild(msg);

                fetch('/api/Chat/UploadFile', {
                    method: 'POST',
                    body: formData
                })
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (data) {
                        if (data.success) {
                            connection.invoke("SendFile", user, data.fileUrl, data.analysis).catch(function (err) {
                                return console.error(err.toString());
                            });

                            // Update the "Analyzing file..." message with the analysis result
                            const analysisMsg = document.createElement("div");
                            const analysisId = `msg-analysis-${Date.now()}`;
                            analysisMsg.setAttribute("id", analysisId);
                            analysisMsg.innerHTML = `<strong>${user}:</strong> File analysis completed.
                                                                                     <p>Analysis: ${marked(data.analysis)}</p>
                                                                                     <div class="btn-group mt-1" role="group">
                                                                                         <button class="btn btn-sm btn-outline-secondary" onclick="copyMessage('${analysisId}')">Copy</button>
                                                                                         <button class="btn btn-sm btn-outline-danger" onclick="deleteMessage('${analysisId}')">Delete</button>
                                                                                         <button class="btn btn-sm btn-outline-success" onclick="saveMessage('${analysisId}')">Save</button>
                                                                                     </div>`;
                            document.getElementById("messagesList").appendChild(analysisMsg);
                        } else {
                            alert('File upload failed: ' + data.message);
                        }
                    })
                    .catch(function (error) {
                        console.error('Error uploading file:', error);
                    });
            };

            window.toggleChat = function () {
                const chatWindow = document.getElementById("chatWindow");
                const startRecordingButton = document.getElementById('startRecordingButton');
                const stopRecordingButton = document.getElementById('stopRecordingButton');

                // Toggle the minimized class
                chatWindow.classList.toggle("minimized");

                // Toggle the display of the chat window based on the minimized state
                if (chatWindow.classList.contains("minimized")) {
                    chatWindow.style.display = 'none';
                } else {
                    chatWindow.style.display = 'block';
                }

                // Always show the start button and hide the stop button when the chat window is toggled
                startRecordingButton.style.display = 'block';
                stopRecordingButton.style.display = 'none';
            };

            window.maximizeChat = function () {
                const chatWindow = document.getElementById("chatWindow");
                chatWindow.classList.toggle("maximized");
                chatWindow.style.display = 'block';
            };

            window.closeChat = function () {
                const chatWindow = document.getElementById("chatWindow");
                chatWindow.style.display = 'none';
            };

            window.copyMessage = function (messageId) {
                const messageText = document.getElementById(messageId).innerText;
                navigator.clipboard.writeText(messageText).then(function () {
                    alert("Message copied to clipboard");
                });
            };

            window.deleteMessage = function (messageId) {
                const messageElement = document.getElementById(messageId);
                messageElement.parentNode.removeChild(messageElement);
            };

            window.saveMessage = function (messageId) {
                const messageElement = document.getElementById(messageId);
                const messageText = messageElement.innerText;
                fetch('/api/Chat/saveMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content: messageText })
                })
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (data) {
                        alert(`Message saved to ${data.filePath}`);
                    })
                    .catch(function (error) {
                        console.error('Error saving message:', error);
                    });
            };

            let mediaRecorder;
            let audioChunks = [];

            window.startRecording = function () {
                const user = document.getElementById("userInput").value;
                if (!user) {
                    alert('Please enter your user name.');
                    return;
                }

                navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(stream => {
                        mediaRecorder = new MediaRecorder(stream);
                        mediaRecorder.start();
                        document.getElementById('startRecordingButton').style.display = 'none';
                        document.getElementById('stopRecordingButton').style.display = 'block';

                        mediaRecorder.addEventListener("dataavailable", event => {
                            audioChunks.push(event.data);
                        });

                        mediaRecorder.addEventListener("stop", () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                            audioChunks = [];

                            const formData = new FormData();
                            formData.append("UploaderName", user);
                            formData.append("UploaderAddress", "Analyzer Audio"); // Add an appropriate value or get it from an input field
                            formData.append("File", audioBlob);

                            // Show "Analyzing audio..." message
                            const msg = document.createElement("div");
                            const messageId = `msg-${Date.now()}`;
                            msg.setAttribute("id", messageId);
                            msg.innerHTML = `<strong>${user}:</strong> Analyzing audio...`;
                            document.getElementById("messagesList").appendChild(msg);

                            fetch('/api/Chat/UploadAudio', {
                                method: 'POST',
                                body: formData
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        connection.invoke("SendMessage", user, data.transcription).catch(err => {
                                            return console.error(err.toString());
                                        });

                                        // Update the "Analyzing audio..." message with the transcription result
                                        const analysisMsg = document.createElement("div");
                                        const analysisId = `msg-analysis-${Date.now()}`;
                                        analysisMsg.setAttribute("id", analysisId);
                                        analysisMsg.innerHTML = `<strong>${user}:</strong> Audio transcription completed.
                                                                                    <p>Transcription: ${marked(data.transcription)}</p>
                                                                                    <div class="btn-group mt-1" role="group">
                                                                                        <button class="btn btn-sm btn-outline-secondary" onclick="copyMessage('${analysisId}')">Copy</button>
                                                                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteMessage('${analysisId}')">Delete</button>
                                                                                        <button class="btn btn-sm btn-outline-success" onclick="saveMessage('${analysisId}')">Save</button>
                                                                                    </div>`;
                                        document.getElementById("messagesList").appendChild(analysisMsg);

                                    } else {
                                        alert('Audio upload failed: ' + data.message);
                                    }
                                })
                                .catch(error => {
                                    console.error('Error uploading audio:', error);
                                });
                        });

                    })
                    .catch(error => {
                        console.error('Error accessing microphone:', error);
                    });
            };

            window.stopRecording = function () {
                mediaRecorder.stop();
                document.getElementById('stopRecordingButton').style.display = 'none';
                document.getElementById('startRecordingButton').style.display = 'block';
            };

            window.stopAudio = function () {
                if (currentAudio) {
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                }
                document.getElementById('stopAudioButton').style.display = 'none';
            };

            async function readAudio(content) {
                // Stop the current audio if it's playing
                if (currentAudio) {
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                }

                const response = await fetch('/api/Chat/ReadAudio', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Content: content })
                });

                if (!response.ok) {
                    console.error('Text to speech conversion failed:', await response.text());
                    return;
                }

                const audioBlob = await response.blob();
                const audioUrl = URL.createObjectURL(audioBlob);
                currentAudio = new Audio(audioUrl);
                currentAudio.play();
                document.getElementById('stopAudioButton').style.display = 'inline-block';
            }
        });

    </script>
    <style>
        .chat-window {
            position: fixed;
            display: none;
            bottom: 10px;
            right: 10px;
            width: 300px;
            height: 90%;
            max-height: 90%;
            overflow-y: auto;
            z-index: 99999;
            transition: transform 0.3s ease-in-out, width 0.3s ease-in-out, max-height 0.3s ease-in-out;
            box-shadow: 0 4px 8px #696cff;
            border-radius: 10px;
            background-color: #fff;
        }

            .chat-window.minimized {
            }

            .chat-window.maximized {
                width: 80%;
                height: 90%;
                max-height: 90%;
                bottom: 5%;
                right: 20px;
                z-index: 99999;
            }

        .ai-copilot-btn {
            position: fixed;
            bottom: 10px;
            right: 20px;
            z-index: 1001;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            box-shadow: 0 4px 20px #696cff;
        }

        #messagesList {
            overflow-y: auto;
            margin-bottom: 10px;
        }

        pre[class*="language-"], code[class*="language-"] {
            background: #2d2d2d;
            color: #f8f8f2;
            border-radius: 5px;
            padding: 10px;
            margin: 5px 0;
        }

        .token.comment,
        .token.prolog,
        .token.doctype,
        .token.cdata {
            color: #999999;
        }

        .token.punctuation {
            color: #f8f8f2;
        }

        .token.property,
        .token.tag,
        .token.constant,
        .token.symbol,
        .token.deleted {
            color: #f92672;
        }

        .token.boolean,
        .token.number {
            color: #ae81ff;
        }

        .token.selector,
        .token.attr-name,
        .token.string,
        .token.char,
        .token.builtin,
        .token.inserted {
            color: #a6e22e;
        }

        .token.operator,
        .token.entity,
        .token.url,
        .language-css .token.string,
        .style .token.string,
        .token.variable {
            color: #f8f8f2;
        }

        .token.atrule,
        .token.attr-value,
        .token.function,
        .token.class-name {
            color: #e6db74;
        }

        .token.keyword {
            color: #66d9ef;
        }

        .token.regex,
        .token.important {
            color: #fd971f;
        }

        .token.important,
        .token.bold {
            font-weight: bold;
        }

        .token.italic {
            font-style: italic;
        }

        .token.entity {
            cursor: help;
        }
    </style>
}
