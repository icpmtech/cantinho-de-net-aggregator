<!-- Styles -->
<style>
    #chartdiv {
      width: 100%;
      height: 600px;
      max-width: 100%;
    }
</style>

<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/stock.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

<!-- Chart code -->
<script>
    am5.ready(async function() {

      // Function to fetch data from the API
      async function fetchChartData() {
        try {
          const response = await fetch('/api/yahoofinance/chart-real-time-symbol/AAPL/1m'); // Replace with your API URL
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const chartData = await response.json();
          return chartData;
        } catch (error) {
          console.error('Error fetching chart data:', error);
          return [];
        }
      }

      // Create root element
      var root = am5.Root.new("chartdiv");

      const myTheme = am5.Theme.new(root);

      myTheme.rule("Grid", ["scrollbar", "minor"]).setAll({
        visible:false
      });

      root.setThemes([
        am5themes_Animated.new(root),
        myTheme
      ]);

      // Create a stock chart
      var stockChart = root.container.children.push(
        am5stock.StockChart.new(root, {
          paddingRight: 0
        })
      );

      // Set global number format
      root.numberFormatter.set("numberFormat", "#,###.00");

      // Create a main stock panel (chart)
      var mainPanel = stockChart.panels.push(
        am5stock.StockPanel.new(root, {
          wheelY: "zoomX",
          panX: true,
          panY: true
        })
      );

      // Create value axis
      var valueAxis = mainPanel.yAxes.push(
        am5xy.ValueAxis.new(root, {
          renderer: am5xy.AxisRendererY.new(root, {
            pan: "zoom"
          }),
          extraMin: 0.1,
          tooltip: am5.Tooltip.new(root, {}),
          numberFormat: "#,###.00",
          extraTooltipPrecision: 2
        })
      );

      var dateAxis = mainPanel.xAxes.push(
        am5xy.GaplessDateAxis.new(root, {
          extraMax:0.1,
          baseInterval: {
            timeUnit: "minute",
            count: 1
          },
          renderer: am5xy.AxisRendererX.new(root, {
            pan: "zoom",
            minorGridEnabled: true
          }),
          tooltip: am5.Tooltip.new(root, {})
        })
      );

      // Add range which will show current value
      var currentValueDataItem = valueAxis.createAxisRange(valueAxis.makeDataItem({ value: 0 }));
      var currentLabel = currentValueDataItem.get("label");
      if (currentLabel) {
        currentLabel.setAll({
          fill: am5.color(0xffffff),
          background: am5.Rectangle.new(root, { fill: am5.color(0x000000) })
        })
      }

      var currentGrid = currentValueDataItem.get("grid");
      if (currentGrid) {
        currentGrid.setAll({ strokeOpacity: 0.5, strokeDasharray: [2, 5] });
      }

      // Add series
      var valueSeries = mainPanel.series.push(
        am5xy.CandlestickSeries.new(root, {
          name: "AMCH",
          clustered: false,
          valueXField: "Date",
          valueYField: "Close",
          highValueYField: "High",
          lowValueYField: "Low",
          openValueYField: "Open",
          calculateAggregates: true,
          xAxis: dateAxis,
          yAxis: valueAxis,
          legendValueText:
            "open: [bold]{openValueY}[/] high: [bold]{highValueY}[/] low: [bold]{lowValueY}[/] close: [bold]{valueY}[/]",
          legendRangeValueText: ""
        })
      );

      // Set main value series
      stockChart.set("stockSeries", valueSeries);

      // Add a stock legend
      var valueLegend = mainPanel.plotContainer.children.push(
        am5stock.StockLegend.new(root, {
          stockChart: stockChart
        })
      );

      // Set main series
      valueLegend.data.setAll([valueSeries]);

      // Add cursor(s)
      mainPanel.set(
        "cursor",
        am5xy.XYCursor.new(root, {
          yAxis: valueAxis,
          xAxis: dateAxis,
          snapToSeries: [valueSeries],
          snapToSeriesBy: "y!"
        })
      );

      // Add scrollbar
      var scrollbar = mainPanel.set(
        "scrollbarX",
        am5xy.XYChartScrollbar.new(root, {
          orientation: "horizontal",
          height: 50
        })
      );
      stockChart.toolsContainer.children.push(scrollbar);

      var sbDateAxis = scrollbar.chart.xAxes.push(
        am5xy.GaplessDateAxis.new(root, {
          extraMax:0.1,
          baseInterval: {
            timeUnit: "minute",
            count: 1
          },
          renderer: am5xy.AxisRendererX.new(root, {
            minorGridEnabled: true
          })
        })
      );

      var sbValueAxis = scrollbar.chart.yAxes.push(
        am5xy.ValueAxis.new(root, {
          renderer: am5xy.AxisRendererY.new(root, {})
        })
      );

      var sbSeries = scrollbar.chart.series.push(
        am5xy.LineSeries.new(root, {
          valueYField: "Close",
          valueXField: "Date",
          xAxis: sbDateAxis,
          yAxis: sbValueAxis
        })
      );

      sbSeries.fills.template.setAll({
        visible: true,
        fillOpacity: 0.3
      });

      // Fetch data from the API
      const rawData = await fetchChartData();
       const data = rawData.map(item => ({
          Date: new Date(item.timestamp).getTime(), // Convert to milliseconds
          Open: parseFloat(item.open),
          Close: parseFloat(item.close),
          High: parseFloat(item.high),
          Low: parseFloat(item.low),
          Volume: parseInt(item.volume, 10)
        }));
      // Set data to all series
      valueSeries.data.setAll(data);
      sbSeries.data.setAll(data);

      // (Optional) Implement real-time updates here
      // Example: Poll the API every minute
      setInterval(async function () {
        const newData = await fetchChartData();

        if (newData.length > 0) {
          // Update the chart data
          valueSeries.data.setAll(newData);
          sbSeries.data.setAll(newData);

          // Update current value display
          const latestData = newData[newData.length - 1];
          if (currentLabel) {
            currentValueDataItem.animate({ key: "value", to: latestData.close, duration: 500, easing: am5.ease.out(am5.ease.cubic) });
            currentLabel.set("text", stockChart.getNumberFormatter().format(latestData.close));
            var bg = currentLabel.get("background");
            if (bg) {
              if (latestData.close < latestData.open) {
                bg.set("fill", root.interfaceColors.get("negative"));
              }
              else {
                bg.set("fill", root.interfaceColors.get("positive"));
              }
            }
          }
        }
      }, 10); // Poll every 60 seconds

    });
</script>

<!-- HTML -->
<div id="chartdiv"></div>
