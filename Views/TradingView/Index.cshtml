<!-- Styles -->
<style>
#chartcontrols {
  height: auto;
  padding: 5px 5px 0 16px;
  max-width: 100%;
}

#chartdiv {
  width: 100%;
  height: 600px;
  max-width: 100%;
}

    /* Styles for the search suggestions */
    .suggestions-box {
        position: absolute;
        background-color: #fff;
        border: 1px solid #ccc;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
    }

    .suggestion-item {
        padding: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
    }

        .suggestion-item:hover {
            background-color: #f0f0f0;
        }

        .suggestion-item img {
            width: 30px;
            height: 30px;
            margin-right: 10px;
        }

        .suggestion-item p {
            margin: 0;
        }
</style>

<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/stock.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>

<!-- Chart code -->
<script>
am5.ready(async function() {

  // Create root element
  // -------------------------------------------------------------------------------
  var root = am5.Root.new("chartdiv");

  const myTheme = am5.Theme.new(root);

  myTheme.rule("Grid", ["scrollbar", "minor"]).setAll({
    visible: false
  });

  root.setThemes([
    am5themes_Animated.new(root),
    myTheme
  ]);

  // Create a stock chart
  // -------------------------------------------------------------------------------
  var stockChart = root.container.children.push(am5stock.StockChart.new(root, {
    paddingRight: 0
  }));

  // Set global number format
  // -------------------------------------------------------------------------------
  root.numberFormatter.set("numberFormat", "#,###.00");

  // Create a main stock panel (chart)
  // -------------------------------------------------------------------------------
  var mainPanel = stockChart.panels.push(am5stock.StockPanel.new(root, {
    wheelY: "zoomX",
    panX: true,
    panY: true
  }));

  // Create value axis
  // -------------------------------------------------------------------------------
  var valueAxis = mainPanel.yAxes.push(am5xy.ValueAxis.new(root, {
    renderer: am5xy.AxisRendererY.new(root, {
      pan: "zoom"
    }),
    extraMin: 0.1, // adds some space for main series
    tooltip: am5.Tooltip.new(root, {}),
    numberFormat: "#,###.00",
    extraTooltipPrecision: 2
  }));

  var dateAxis = mainPanel.xAxes.push(am5xy.GaplessDateAxis.new(root, {
    baseInterval: {
      timeUnit: "day",
      count: 1
    },
    renderer: am5xy.AxisRendererX.new(root, {
      minorGridEnabled: true
    }),
    tooltip: am5.Tooltip.new(root, {})
  }));

  // Add series
  // -------------------------------------------------------------------------------
  var valueSeries = mainPanel.series.push(am5xy.CandlestickSeries.new(root, {
    name: "Stock Data",
    clustered: false,
    valueXField: "Date",
    valueYField: "Close",
    highValueYField: "High",
    lowValueYField: "Low",
    openValueYField: "Open",
    calculateAggregates: true,
    xAxis: dateAxis,
    yAxis: valueAxis,
    legendValueText: "Open: [bold]{openValueY}[/] High: [bold]{highValueY}[/] Low: [bold]{lowValueY}[/] Close: [bold]{valueY}[/]",
    legendRangeValueText: ""
  }));

  // Set main value series
  // -------------------------------------------------------------------------------
  stockChart.set("stockSeries", valueSeries);

  // Add a stock legend
  // -------------------------------------------------------------------------------
  var valueLegend = mainPanel.plotContainer.children.push(am5stock.StockLegend.new(root, {
    stockChart: stockChart
  }));

  // Create volume axis
  // -------------------------------------------------------------------------------
  var volumeAxisRenderer = am5xy.AxisRendererY.new(root, {
    inside: true,
    pan: "zoom"
  });

  volumeAxisRenderer.labels.template.set("forceHidden", true);
  volumeAxisRenderer.grid.template.set("forceHidden", true);

  var volumeValueAxis = mainPanel.yAxes.push(am5xy.ValueAxis.new(root, {
    numberFormat: "#.#a",
    height: am5.percent(20),
    y: am5.percent(100),
    centerY: am5.percent(100),
    renderer: volumeAxisRenderer
  }));

  // Add volume series
  // -------------------------------------------------------------------------------
  var volumeSeries = mainPanel.series.push(am5xy.ColumnSeries.new(root, {
    name: "Volume",
    clustered: false,
    valueXField: "Date",
    valueYField: "Volume",
    xAxis: dateAxis,
    yAxis: volumeValueAxis,
    legendValueText: "[bold]{valueY.formatNumber('#,###.0a')}[/]"
  }));

  volumeSeries.columns.template.setAll({
    strokeOpacity: 0,
    fillOpacity: 0.5
  });

  // Color columns by stock rules
  volumeSeries.columns.template.adapters.add("fill", function(fill, target) {
    var dataItem = target.dataItem;
    if (dataItem) {
      return stockChart.getVolumeColor(dataItem);
    }
    return fill;
  });

  // Set main volume series
  // -------------------------------------------------------------------------------
  stockChart.set("volumeSeries", volumeSeries);
  valueLegend.data.setAll([valueSeries, volumeSeries]);

  // Add cursor(s)
  // -------------------------------------------------------------------------------
  mainPanel.set("cursor", am5xy.XYCursor.new(root, {
    yAxis: valueAxis,
    xAxis: dateAxis,
    snapToSeries: [valueSeries],
    snapToSeriesBy: "y!"
  }));

  // Add scrollbar
  // -------------------------------------------------------------------------------
  var scrollbar = mainPanel.set("scrollbarX", am5xy.XYChartScrollbar.new(root, {
    orientation: "horizontal",
    height: 50
  }));
  stockChart.toolsContainer.children.push(scrollbar);

  var sbDateAxis = scrollbar.chart.xAxes.push(am5xy.GaplessDateAxis.new(root, {
    baseInterval: {
      timeUnit: "day",
      count: 1
    },
    renderer: am5xy.AxisRendererX.new(root, {
      minorGridEnabled: true
    })
  }));

  var sbValueAxis = scrollbar.chart.yAxes.push(am5xy.ValueAxis.new(root, {
    renderer: am5xy.AxisRendererY.new(root, {})
  }));

  var sbSeries = scrollbar.chart.series.push(am5xy.LineSeries.new(root, {
    valueYField: "Close",
    valueXField: "Date",
    xAxis: sbDateAxis,
    yAxis: sbValueAxis
  }));

  sbSeries.fills.template.setAll({
    visible: true,
    fillOpacity: 0.3
  });

  // Set up series type switcher
  // -------------------------------------------------------------------------------
  var seriesSwitcher = am5stock.SeriesTypeControl.new(root, {
    stockChart: stockChart
  });

  seriesSwitcher.events.on("selected", function(ev) {
    setSeriesType(ev.item.id);
  });

  function getNewSettings(series) {
    var newSettings = {};
    am5.array.each(["name", "valueYField", "highValueYField", "lowValueYField", "openValueYField", "calculateAggregates", "valueXField", "xAxis", "yAxis", "legendValueText", "legendRangeValueText", "stroke", "fill"], function(setting) {
      newSettings[setting] = series.get(setting);
    });
    return newSettings;
  }

  function setSeriesType(seriesType) {
    // Get current series and its settings
    var currentSeries = stockChart.get("stockSeries");
    var newSettings = getNewSettings(currentSeries);

    // Remove previous series
    var data = currentSeries.data.values;
    mainPanel.series.removeValue(currentSeries);

    // Create new series
    var series;
    switch (seriesType) {
      case "line":
        series = mainPanel.series.push(am5xy.LineSeries.new(root, newSettings));
        break;
      case "candlestick":
      case "procandlestick":
        newSettings.clustered = false;
        series = mainPanel.series.push(am5xy.CandlestickSeries.new(root, newSettings));
        if (seriesType == "procandlestick") {
          series.columns.template.get("themeTags").push("pro");
        }
        break;
      case "ohlc":
        newSettings.clustered = false;
        series = mainPanel.series.push(am5xy.OHLCSeries.new(root, newSettings));
        break;
    }

    // Set new series as stockSeries
    if (series) {
      valueLegend.data.removeValue(currentSeries);
      series.data.setAll(data);
      stockChart.set("stockSeries", series);
      var cursor = mainPanel.get("cursor");
      if (cursor) {
        cursor.set("snapToSeries", [series]);
      }
      valueLegend.data.insertIndex(0, series);
    }
  }

  // Stock toolbar
  // -------------------------------------------------------------------------------
  var toolbar = am5stock.StockToolbar.new(root, {
    container: document.getElementById("chartcontrols"),
    stockChart: stockChart,
    controls: [
      am5stock.IndicatorControl.new(root, {
        stockChart: stockChart,
        legend: valueLegend
      }),
      am5stock.DateRangeSelector.new(root, {
        stockChart: stockChart
      }),
      am5stock.PeriodSelector.new(root, {
        stockChart: stockChart
      }),
      seriesSwitcher,
      am5stock.DrawingControl.new(root, {
        stockChart: stockChart
      }),
      am5stock.DataSaveControl.new(root, {
        stockChart: stockChart
      }),
      am5stock.ResetControl.new(root, {
        stockChart: stockChart
      }),
      am5stock.SettingsControl.new(root, {
        stockChart: stockChart
      })
    ]
  });

  // Tooltip for events (optional)
  // -------------------------------------------------------------------------------
  var tooltip = am5.Tooltip.new(root, {
    getStrokeFromSprite: false,
    getFillFromSprite: false
  });

  tooltip.get("background").setAll({
    strokeOpacity: 1,
    stroke: am5.color(0x000000),
    fillOpacity: 1,
    fill: am5.color(0xffffff)
  });

  // Fetch and process data from API
  // -------------------------------------------------------------------------------
     async function fetchData(symbol) {
    try {
          // Get startDate and endDate from input fields
        let startDateInput = document.getElementById('startDateInput').value;
        let endDateInput = document.getElementById('endDateInput').value;

        // If inputs are empty, initialize to default values
        if (!startDateInput) {
          let fiveDaysAgo = new Date();
          fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 365);
          startDateInput = fiveDaysAgo.toISOString().split('T')[0]; // Format to 'YYYY-MM-DD'
        }
        if (!endDateInput) {
          let today = new Date();
          endDateInput = today.toISOString().split('T')[0];
        }

        const startDate = startDateInput; // Format: YYYY-MM-DD
        const endDate = endDateInput;     // Format: YYYY-MM-DD
        const interval = '1d'; // '1d', '1wk', '1mo', etc.

      const apiUrl = `/api/YahooFinance/chart-symbol/${encodeURIComponent(symbol)}?startDate=${startDate}&endDate=${endDate}&interval=${encodeURIComponent(interval)}`;

      // Fetch data from the API
      const response = await fetch(apiUrl);

      if (!response.ok) {
        throw new Error(`Error fetching data: ${response.status} ${response.statusText}`);
      }

      const rawData = await response.json();
      console.log("Raw Data:", rawData); // Debugging

      if (!Array.isArray(rawData)) {
        throw new Error("Invalid data format received from API.");
      }

      // Process the data to match amCharts format
      const processedData = rawData.map(item => ({
            Date:new Date(item.timestamp).getTime(), // Assuming timestamp is in seconds
        Open: parseFloat(item.open),
        Close: parseFloat(item.close),
        High: parseFloat(item.high),
        Low: parseFloat(item.low),
        Volume: parseInt(item.volume, 10)
      }));

      // Set data to series
      valueSeries.data.setAll(processedData);
      volumeSeries.data.setAll(processedData);
      sbSeries.data.setAll(processedData);

    } catch (error) {
      console.error("Error fetching or processing data:", error);
    }
  }
       // Add the search and selectSuggestion functions
      async function search() {
        const query = document.getElementById('symbolInput').value.trim();
        const suggestionsBox = document.getElementById('suggestions');
        suggestionsBox.innerHTML = ''; // Clear previous suggestions

        if (query.length >= 1) { // Start searching after 1 character
          try {
            const url = `/api/yahoofinance/search/${encodeURIComponent(query)}`;
            const response = await fetch(url);

            if (response.ok) {
              const data = await response.json();
              if (data.length > 0) {
                suggestionsBox.style.display = 'block';
                data.forEach(result => {
                  const suggestionItem = document.createElement('div');
                  suggestionItem.classList.add('suggestion-item');

                  // Set placeholder image or use real image if available
                  const imageUrl = result.img ? result.img : 'https://via.placeholder.com/40';

                  suggestionItem.innerHTML = `
                    <img src="${imageUrl}" alt="${result.symbol}">
                    <p>${result.symbol} - ${result.shortname}</p>
                  `;

                  suggestionItem.onclick = () => selectSuggestion(result);
                  suggestionsBox.appendChild(suggestionItem);
                });
              } else {
                suggestionsBox.style.display = 'none';
              }
            } else {
              console.error('Error fetching symbols:', response.statusText);
              suggestionsBox.style.display = 'none';
            }
          } catch (error) {
            console.error('Error fetching symbols:', error);
            suggestionsBox.style.display = 'none';
          }
        } else {
          suggestionsBox.style.display = 'none';
        }
      }

      async function selectSuggestion(result) {
        document.getElementById('symbolInput').value = result.symbol;
        document.getElementById('suggestions').style.display = 'none';

        // Update the chart with the selected symbol
        await fetchData(result.symbol);
      }
  // Call the fetchData function
       // Modify the symbolInput event listener
      const symbolInput = document.getElementById('symbolInput');
      symbolInput.addEventListener('input', search);

      // Ensure the Update Chart button also works
      document.getElementById('updateButton').addEventListener('click', async function() {
        var symbol = symbolInput.value.trim().toUpperCase();
        if (symbol) {
          await fetchData(symbol);
        }
      });

      // Initial data load
      await fetchData(symbolInput.value.trim().toUpperCase());

}); // end am5.ready()
</script>

<!-- HTML -->
<div class="container my-4">
    <!-- Card for Inputs -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-center">
                <div class="col-md-3 position-relative">
                    <label for="symbolInput" class="form-label">Symbol</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class='bx bx-search'></i></span>
                        <input type="text" id="symbolInput" class="form-control" value="AAPL" autocomplete="off" placeholder="Enter symbol">
                    </div>
                    <!-- Suggestions box -->
                    <div id="suggestions" class="suggestions-box"></div>
                </div>
                <div class="col-md-3">
                    <label for="startDateInput" class="form-label">Start Date</label>
                    <input type="date" id="startDateInput" class="form-control">
                </div>
                <div class="col-md-3">
                    <label for="endDateInput" class="form-label">End Date</label>
                    <input type="date" id="endDateInput" class="form-control">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button id="updateButton" type="button" class="btn btn-primary w-100"><i class='bx bx-refresh'></i> Update Chart</button>
                </div>
            </div>
        </div>
    </div>
    <div id="chartcontrols"></div>
    <!-- Card for Chart -->
    <div class="card">
        <div class="card-body">
            <div id="chartdiv"></div>
        </div>
    </div>
</div>
