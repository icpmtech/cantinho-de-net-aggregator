@model IEnumerable<MarketAnalyticHub.Models.News.NewsItem>

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Linq

@functions {
    public string GetSentimentDescription(double? sentiment)
    {
        if (!sentiment.HasValue) return "No sentiment data";
        return sentiment.Value switch
        {
            <= 1 => "Very Negative",
            <= 2 => "Negative",
            <= 3 => "Neutral",
            <= 4 => "Positive",
            5 => "Very Positive",
            _ => "Unknown"
        };
    }

    public string GetIndividualSentimentData()
    {
        var sentimentData = new List<object>();

        foreach (var news in Model)
        {
            var analyses = JsonConvert.DeserializeObject<List<MarketAnalyticHub.Models.News.StockAnalysis>>(news.Analysis);
            if (analyses != null)
            {
                foreach (var analysis in analyses)
                {
                    sentimentData.Add(new { Ticker = analysis.Ticker, Score = analysis.Score });
                }
            }
        }

        return JsonConvert.SerializeObject(sentimentData);
    }

    public string GetGroupedSentimentData()
    {
        var sentimentData = new List<MarketAnalyticHub.Models.News.StockAnalysis>();

        foreach (var news in Model)
        {
            var analyses = JsonConvert.DeserializeObject<List<MarketAnalyticHub.Models.News.StockAnalysis>>(news.Analysis);
            if (analyses != null)
            {
                sentimentData.AddRange(analyses);
            }
        }

        var groupedData = sentimentData
            .GroupBy(a => a.Ticker)
            .Select(g => new
            {
                Ticker = g.Key,
                AverageScore = g.Average(a => a.Score)
            })
            .ToList();

        return JsonConvert.SerializeObject(groupedData);
    }
}

<style>
    .card-body {
        padding: 20px;
    }

    .card-title {
        font-size: 1.5em;
        margin-bottom: 20px;
    }

    .card-text {
        font-size: 1em;
    }

    .mb-3 {
        margin-bottom: 1.5em;
    }

    .stars {
        color: gold;
    }

    .sentiment-label {
        font-weight: bold;
    }

    .analysis-item {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    #chart-container {
        margin-top: 20px;
    }

    .legend-card {
        margin-top: 20px;
    }

        .legend-card .card-body {
            padding: 10px;
        }

    .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .legend-color {
        width: 20px;
        height: 20px;
        margin-right: 10px;
        border-radius: 3px;
    }

    .legend-description {
        font-size: 14px;
    }
</style>


<!-- Legend Card -->
<div class="card legend-card">
    <div class="card-header">Sentiment Score Legend</div>
    <div class="card-body">
        <div class="legend-item">
            <div class="legend-color" style="background-color: #ff0000;"></div>
            <div class="legend-description">Very Negative (<= 1)</div>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #ff8000;"></div>
            <div class="legend-description">Negative (<= 2)</div>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #ffff00;"></div>
            <div class="legend-description">Neutral (<= 3)</div>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #80ff00;"></div>
            <div class="legend-description">Positive (<= 4)</div>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background-color: #00ff00;"></div>
            <div class="legend-description">Very Positive (5)</div>
        </div>
    </div>
</div>

<!-- Chart Container -->
<div id="chart-container">
  
    <div id="grouped-chart"></div>
</div>

<!-- ApexCharts Scripts -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
       
        var groupedSentimentData = @Html.Raw(GetGroupedSentimentData());

        // Grouped Sentiment Chart
        var optionsGrouped = {
            series: [{
                name: 'Average Sentiment Score',
                data: groupedSentimentData.map(function (item) {
                    return item.AverageScore;
                })
            }],
            chart: {
                height: 350,
                type: 'bar'
            },
            plotOptions: {
                bar: {
                    borderRadius: 10,
                    dataLabels: {
                        position: 'top'
                    }
                }
            },
            dataLabels: {
                enabled: true,
                formatter: function (val) {
                    return val.toFixed(2);
                },
                offsetY: -20,
                style: {
                    fontSize: '12px',
                    colors: ["#304758"]
                }
            },
            xaxis: {
                categories: groupedSentimentData.map(function (item) {
                    return item.Ticker;
                }),
                position: 'bottom',
                labels: {
                    offsetY: 0
                },
                axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false
                },
                crosshairs: {
                    fill: {
                        type: 'gradient',
                        gradient: {
                            colorFrom: '#D8E3F0',
                            colorTo: '#BED1E6',
                            stops: [0, 100],
                            opacityFrom: 0.4,
                            opacityTo: 0.5,
                        }
                    }
                },
                tooltip: {
                    enabled: true,
                }
            },
            yaxis: {
                axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false,
                },
                labels: {
                    show: false,
                    formatter: function (val) {
                        return val.toFixed(2);
                    }
                }
            },
            title: {
                text: 'Average Sentiment Analysis Scores',
                floating: true,
                offsetY: 330,
                align: 'center',
                style: {
                    color: '#444'
                }
            }
        };

        var chartGrouped = new ApexCharts(document.querySelector("#grouped-chart"), optionsGrouped);
        chartGrouped.render();
    });
</script>
<!-- News Cards -->
<div class="card">
    <h5 class="card-header">The news impact in your portfolio</h5>
    <div class="table-responsive">
        <div class="card-deck">
            @foreach (var news in Model)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bx bx-news bx-sm text-primary me-3"></i>
                            <span class="fw-medium">@news.Title</span>
                        </h5>
                        <div id="newsSentiment-@news.Id" class="mb-3">
                            <span class="stars">@news.Sentiment</span>
                            <span class="fw-bold sentiment-label" data-sentiment="@news.Sentiment">
                                @GetSentimentDescription(news.Sentiment)
                            </span>
                        </div>
                        <div class="text-wrap card-text mt-3">
                            @try
                            {
                                var analyses = JsonConvert.DeserializeObject<List<MarketAnalyticHub.Models.News.StockAnalysis>>(news.Analysis);
                                if (analyses != null)
                                {
                                    foreach (var analysis in analyses)
                                    {
                                        <div class="analysis-item mb-3">
                                            <p><strong>Ticker:</strong> @analysis.Ticker</p>
                                            <p><strong>Score:</strong> @analysis.Score - @GetSentimentDescription(analysis.Score)</p>
                                            <p><strong>Analysis Summary:</strong> @analysis.AnalysisSummary</p>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No analysis available.</p>
                                }
                            }
                            catch (JsonException ex)
                            {
                                <p>Error parsing analysis: @ex.Message</p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


