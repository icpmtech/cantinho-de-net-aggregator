@{
    ViewData["Title"] = "Portfolio Dividends";
}

@section PageStyles {
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css" />
    <!-- FullCalendar v6 injecta estilos internamente -->

    <style>
        td.details-control {
            background: url('https://www.datatables.net/examples/resources/details_open.png') no-repeat center center;
            cursor: pointer;
        }

        tr.shown td.details-control {
            background: url('https://www.datatables.net/examples/resources/details_close.png') no-repeat center center;
        }

        #loading {
            position: fixed;
            top: 40%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.5rem;
            display: none;
        }

        .filters {
            margin-bottom: 1rem;
        }

        #dividendModal {
            position: fixed;
            top: 20%;
            left: 50%;
            transform: translateX(-50%);
            background: white;
            padding: 1rem;
            border: 1px solid #ccc;
            display: none;
            z-index: 9999;
            width: 300px;
        }

            #dividendModal input, #dividendModal label {
                display: block;
                margin-bottom: 0.5rem;
                width: 100%;
            }

            #dividendModal .modal-buttons {
                margin-top: 1rem;
                text-align: right;
            }
        /* FullCalendar container styling */
        #calendarView {
            max-width: 900px;
            margin: 40px auto;
            display: none; /* Hidden by default */
        }
    </style>
}

<h2 class="mb-4">Portfolio Dividends</h2>

<div class="view-toggle btn-group mb-3" role="group">
    <button type="button" id="btnTableView" class="btn btn-primary">Table View</button>
    <button type="button" id="btnCalendarView" class="btn btn-outline-primary">Calendar View</button>
</div>

<div class="filters row mb-3">
    <div class="col-auto">
        <label for="symbolFilter" class="form-label">Filter by Symbol:</label>
        <select id="symbolFilter" class="form-select"><option value="">All</option></select>
    </div>
    <div class="col-auto align-self-end">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="hasDividendsOnly">
            <label class="form-check-label" for="hasDividendsOnly">Only show with dividends</label>
        </div>
    </div>
</div>

<!-- Loading Spinner -->
<div id="loading">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<div id="tableViewContainer">
    <table id="stocksTable" class="table  nowrap" style="width:100%; display:none;">
        <thead class="table-light">
            <tr>
                <th></th>
                <th>Symbol</th>
                <th>Quantity</th>
                <th>Purchase Date</th>
                <th>Has Dividends</th>
                <th>Total Dividends (‚Ç¨)</th>
                <th>Total Value (‚Ç¨)</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <div id="grandTotal" class="mt-3 text-end"></div>
</div>

<div id="calendarView">
    <div id="calendar"></div>
</div>

<!-- Modal for Create/Edit Dividends -->
<div id="dividendModal" class="card shadow">
    <div class="card-body">
        <form id="dividendForm">
            <input type="hidden" id="dividendId" />
            <input type="hidden" id="portfolioItemId" />
            <input type="hidden" id="quantity" />

            <div class="mb-2">
                <label for="symbol" class="form-label">Symbol</label>
                <input type="text" id="symbol" class="form-control" readonly />
            </div>
            <div class="mb-2">
                <label for="amount" class="form-label">Amount (‚Ç¨)</label>
                <input type="number" id="amount" class="form-control" step="0.01" required />
            </div>
            <div class="mb-2">
                <label for="exDate" class="form-label">Ex-Date</label>
                <input type="date" id="exDate" class="form-control" />
            </div>
            <div class="mb-2">
                <label for="paymentDate" class="form-label">Payment Date</label>
                <input type="date" id="paymentDate" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="total" class="form-label">Total (‚Ç¨)</label>
                <input type="text" id="total" class="form-control" readonly />
            </div>

            <div class="modal-buttons text-end">
                <button type="submit" class="btn btn-success me-2">Save</button>
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>

@section PageScripts {
    <!-- Bootstrap Bundle JS -->
    <!-- jQuery & DataTables -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <!-- FullCalendar v6 -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>

    <script>
        const fetchData = async (url, method, body = null) => {
            const res = await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: body ? JSON.stringify(body) : null
            });
            return res.ok ? res.json() : alert('Erro: ' + res.statusText);
        };

        const addDividend = d => fetchData('/api/Dividend', 'POST', d);
        const updateDividend = (id, d) => fetchData(`/api/Dividend/${id}`, 'PUT', d);
        const deleteDividend = id => fetchData(`/api/Dividend/${id}`, 'DELETE');

        function format(divs, itemId, sym, qty) {
            divs = divs || [];
            let html = `<button class="btn btn-sm btn-outline-primary mb-2" onclick="openModal(null,${itemId},'${sym}',${qty})">‚ûï Adicionar Dividendo</button>`;
            if (!divs.length) return html;

            html += `<table class="table table-sm mt-2"><thead class="table-light">
                        <tr><th>ID</th><th>Valor</th><th>Ex-Date</th><th>Payment Date</th><th>Total</th><th>A√ß√µes</th></tr>
                    </thead><tbody>`;

            divs.forEach(d => {
                const amt = d.amount || 0;
                html += `<tr>
                            <td>${d.id}</td>
                            <td>${amt.toFixed(2)} ‚Ç¨</td>
                            <td>${d.exDate ? new Date(d.exDate).toLocaleDateString('pt-PT') : '-'}</td>
                            <td>${d.paymentDate ? new Date(d.paymentDate).toLocaleDateString('pt-PT') : '-'}</td>
                            <td>${(amt * (qty || 0)).toFixed(2)} ‚Ç¨</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" onclick='openModal(${JSON.stringify(d)},${itemId},"${sym}",${qty})'>‚úèÔ∏è</button>
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteDividendConfirm(${d.id})">üóëÔ∏è</button>
                            </td>
                        </tr>`;
            });

            return html + '</tbody></table>';
        }

        function openModal(div = null, itemId, sym, qty) {
            $('#dividendId').val(div?.id || '');
            $('#amount').val(div?.amount ?? '');
            $('#exDate').val(div?.exDate ? new Date(div.exDate).toISOString().split('T')[0] : '');
            $('#paymentDate').val(div?.paymentDate ? new Date(div.paymentDate).toISOString().split('T')[0] : '');
            $('#portfolioItemId').val(itemId);
            $('#symbol').val(sym);
            $('#quantity').val(qty);
            $('#total').val(div ? ((div.amount || 0) * (qty || 0)).toFixed(2) + ' ‚Ç¨' : '');
            $('#dividendModal').show();
        }

        function closeModal() {
            $('#dividendModal').hide();
            $('#dividendForm')[0].reset();
        }

        $('#amount').on('input', function () {
            const a = parseFloat(this.value) || 0;
            const q = parseFloat($('#quantity').val()) || 0;
            $('#total').val((a * q).toFixed(2) + ' ‚Ç¨');
        });

        $('#dividendForm').on('submit', async function (e) {
            e.preventDefault();
            const id = $('#dividendId').val();
            const data = {
               
                portfolioItemId: $('#portfolioItemId').val(),
                symbol: $('#symbol').val(),
                amount: parseFloat($('#amount').val()) || 0,
                exDate: $('#exDate').val(),
                paymentDate: $('#paymentDate').val()
            };
            if (id) {
                data.id=id;
                await updateDividend(id, data);
            } else {
               
                await addDividend(data);
            }
            closeModal();
            reloadDividends();
        });

        async function deleteDividendConfirm(id) {
            if (!id) return alert("ID inv√°lido.");
            if (confirm('Eliminar este dividendo?')) {
                await deleteDividend(id);
                reloadDividends();
            }
        }

        function reloadDividends() {
            const table = $('#stocksTable').DataTable();
            if (table) {
                table.destroy();
            }
            $('#stocksTable tbody').empty();
            $('#grandTotal').empty();
            $('#loading').show();
            $('#stocksTable').hide();

            setTimeout(() => {
                loadDividends();
                if (calendar) calendar.refetchEvents();
            }, 100);
        }

        function loadDividends() {
            $.getJSON('/api/PortfolioDividends', data => {
                console.log('Dividendos recebidos:', data); // debug
                const grouped = {}, tableArr = [], eventsArr = [];
                let grandTotal = 0;

                data.forEach(d => {
                    const key = `${d.symbol}_${d.portfolioItemId}`;
                    if (!grouped[key]) {
                        grouped[key] = {
                            symbol: d.symbol,
                            quantity: d.quantity,
                            purchaseDate: d.purchaseDate,
                            dividends: [],
                            portfolioItemId: d.portfolioItemId,
                            totalAmount: 0
                        };
                    }
                    if (d.id !== -1) {
                        grouped[key].dividends.push({
                            id: d.id,
                            amount: d.amount,
                            exDate: d.exDate,
                            paymentDate: d.paymentDate
                        });
                        grouped[key].totalAmount += d.amount;
                        grandTotal += (d.amount || 0) * (d.quantity || 0);
                        eventsArr.push({
                            id: d.id,
                            symbol: d.symbol,
                            amount: d.amount,
                            exDate: d.exDate,
                            paymentDate: d.paymentDate,
                            quantity: d.quantity,
                            portfolioItemId: d.portfolioItemId
                        });
                    }
                });

                Object.values(grouped).forEach(obj => tableArr.push(obj));

                $('#symbolFilter').empty().append(`<option value="">Todos</option>`);
                [...new Set(tableArr.map(x => x.symbol))].forEach(sym =>
                    $('#symbolFilter').append(`<option value="${sym}">${sym}</option>`)
                );

                const table = $('#stocksTable').DataTable({
                    data: tableArr,
                    columns: [
                        { className: 'details-control', orderable: false, data: null, defaultContent: '' },
                        { data: 'symbol' },
                        { data: 'quantity' },
                        {
                            data: 'purchaseDate',
                            render: d => d ? new Date(d).toLocaleDateString('pt-PT') : '-'
                        },
                        {
                            data: 'dividends',
                            render: d => (d && d.length ? '‚úîÔ∏è' : '‚ùå'),
                            orderable: false
                        },
                        {
                            data: 'totalAmount',
                            render: d => (d || 0).toFixed(2) + ' ‚Ç¨'
                        },
                        {
                            data: null,
                            render: d => ((d.totalAmount || 0) * (d.quantity || 0)).toFixed(2) + ' ‚Ç¨',
                            orderable: false
                        }
                    ],
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'csvHtml5',
                            text: 'Exportar CSV',
                            title: 'Portfolio_Dividends',
                            customize: csv => csv + `\nTotal Geral,,${grandTotal.toFixed(2)} ‚Ç¨`
                        }
                    ],
                    order: [[1, 'asc']],
                    pageLength: 10
                });

                $('#stocksTable tbody').on('click', 'td.details-control', function () {
                    const tr = $(this).closest('tr');
                    const row = table.row(tr);
                    const d = row.data();
                    if (!d) return;

                    if (row.child.isShown()) {
                        row.child.hide();
                        tr.removeClass('shown');
                    } else {
                        row.child(format(d.dividends, d.portfolioItemId, d.symbol, d.quantity)).show();
                        tr.addClass('shown');
                    }
                });

                $('#symbolFilter').on('change', function () {
                    table.column(1).search(this.value).draw();
                });

                $('#hasDividendsOnly').on('change', function () {
                    table.column(4).search(this.checked ? '‚úîÔ∏è' : '').draw();
                });

                $('#loading').hide();
                $('#stocksTable').show();
                $('#grandTotal').html(`<strong>üí∞ Total Geral: ${grandTotal.toFixed(2)} ‚Ç¨</strong>`);
                window._fcEvents = eventsArr;
            });
        }

        let calendar = null;

        function initCalendar() {
            const calEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,listWeek'
                },
                loading(isLoading) {
                    $('#loading').toggle(isLoading);
                },
                events(fetchInfo, success) {
                    const evts = window._fcEvents.map(d => ({
                        id: d.id,
                        title: `${d.symbol}: ${d.amount.toFixed(2)}‚Ç¨`,
                        start: d.paymentDate,
                        allDay: true,
                        extendedProps: { ...d }
                    }));
                    success(evts);
                },
                eventClick(info) {
                    const d = info.event.extendedProps;
                    openModal({
                        id: d.id,
                        amount: d.amount,
                        exDate: d.exDate,
                        paymentDate: d.paymentDate
                    }, d.portfolioItemId, d.symbol, d.quantity);
                }
            });
            calendar.render();
        }

        $('#btnTableView').on('click', () => {
            $('#calendarView').hide();
            $('#tableViewContainer').show();
            $('#btnTableView').addClass('btn-primary').removeClass('btn-outline-primary');
            $('#btnCalendarView').addClass('btn-outline-primary').removeClass('btn-primary');
        });

        $('#btnCalendarView').on('click', () => {
            $('#tableViewContainer').hide();
            $('#calendarView').show();
            $('#btnCalendarView').addClass('btn-primary').removeClass('btn-outline-primary');
            $('#btnTableView').addClass('btn-outline-primary').removeClass('btn-primary');
            if (!calendar) initCalendar();
            else calendar.refetchEvents();
        });

        $(document).ready(() => loadDividends());
    </script>


}
