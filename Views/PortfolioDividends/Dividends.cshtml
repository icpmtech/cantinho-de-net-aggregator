@{
    ViewData["Title"] = "Portfolio Dividends";
}

@section PageStyles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css" />
    <!-- FullCalendar CSS -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>

    <style>
        td.details-control {
            background: url('https://www.datatables.net/examples/resources/details_open.png') no-repeat center center;
            cursor: pointer;
        }

        tr.shown td.details-control {
            background: url('https://www.datatables.net/examples/resources/details_close.png') no-repeat center center;
        }

        #loading {
            position: fixed;
            top: 40%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.5rem;
        }

        .grand-total {
            font-weight: bold;
            text-align: right;
            padding-top: 20px;
        }

        .filters {
            margin-bottom: 1rem;
        }

        #dividendModal {
            position: fixed;
            top: 20%;
            left: 50%;
            transform: translateX(-50%);
            background: white;
            padding: 1rem;
            border: 1px solid #ccc;
            display: none;
            z-index: 9999;
            width: 300px;
        }

            #dividendModal input, #dividendModal label {
                display: block;
                margin-bottom: 0.5rem;
                width: 100%;
            }

            #dividendModal .modal-buttons {
                margin-top: 1rem;
                text-align: right;
            }
        /* FullCalendar container styling */
        #calendarView {
            max-width: 900px;
            margin: 40px auto;
            display: none; /* Hidden by default */
        }
    </style>
}

<h2>Portfolio Dividends</h2>

<!-- Buttons to toggle between views -->
<div class="view-toggle" style="margin-bottom: 1rem;">
    <button id="btnTableView">Table View</button>
    <button id="btnCalendarView">Calendar View</button>
</div>

<!-- Filters (applies only to table view) -->
<div class="filters">
    <label for="symbolFilter">Filter by Symbol:</label>
    <select id="symbolFilter"><option value="">All</option></select>

    <label style="margin-left:20px;">
        <input type="checkbox" id="hasDividendsOnly"> Only show with dividends
    </label>
</div>

<div id="loading">Loading dividends...</div>

<!-- DataTable Container -->
<div id="tableViewContainer">
    <table id="stocksTable" class="display nowrap" style="width:100%; display:none;">
        <thead>
            <tr>
                <th></th>
                <th>Symbol</th>
                <th>Quantity</th>
                <th>Purchase Date</th>
                <th>Has Dividends</th>
                <th>Total Dividends (‚Ç¨)</th>
                <th>Total Value (‚Ç¨)</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <div id="grandTotal" class="grand-total"></div>
</div>

<!-- FullCalendar Container -->
<div id="calendarView">
    <div id="calendar"></div>
</div>

<!-- Modal for Create/Edit Dividends -->
<div id="dividendModal">
    <form id="dividendForm">
        <input type="hidden" id="dividendId" />
        <input type="hidden" id="portfolioItemId" />
        <input type="hidden" id="quantity" />

        <label>Symbol</label>
        <input type="text" id="symbol" readonly />

        <label>Amount (‚Ç¨)</label>
        <input type="number" id="amount" step="0.01" required />

        <label>Ex-Date</label>
        <input type="date" id="exDate" />

        <label>Payment Date</label>
        <input type="date" id="paymentDate" />

        <label>Total (‚Ç¨)</label>
        <input type="text" id="total" readonly />

        <div class="modal-buttons">
            <button type="submit">Save</button>
            <button type="button" onclick="closeModal()">Cancel</button>
        </div>
    </form>
</div>

@section PageScripts {
    <!-- jQuery and DataTables Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <!-- FullCalendar Script -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.1.8/index.global.min.js"
            
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        // Helper functions for API calls.
        const fetchData = async (url, method, body = null) => {
            const res = await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: body ? JSON.stringify(body) : null
            });
            return res.ok ? res.json() : alert('Error: ' + res.statusText);
        };

        const addDividend = (data) => fetchData('/api/Dividend', 'POST', data);
        const updateDividend = (id, data) => fetchData(`/api/Dividend/${id}`, 'PUT', data);
        const deleteDividend = (id) => fetchData(`/api/Dividend/${id}`, 'DELETE');

        // Helper function to format dividends for a row's child details.
        function format(dividends, portfolioItemId, symbol, quantity) {
            dividends = dividends || [];
            let html = `<button onclick="openModal(null, ${portfolioItemId}, '${symbol}', ${quantity})">‚ûï Add Dividend</button>`;
            if (dividends.length === 0) return html;
            html += `<table style="margin-top:10px;"><thead>
                        <tr><th>ID</th><th>Amount</th><th>Ex-Date</th><th>Payment Date</th><th>Total</th><th>Actions</th></tr>
                     </thead><tbody>`;
            dividends.forEach(div => {
                const amount = div.amount || 0;
                const total = (amount * quantity).toFixed(2);
                html += `<tr>
                            <td>${div.id}</td>
                            <td>${amount.toFixed(2)} ‚Ç¨</td>
                            <td>${div.exDate ? new Date(div.exDate).toLocaleDateString('en-GB') : '-'}</td>
                            <td>${div.paymentDate ? new Date(div.paymentDate).toLocaleDateString('en-GB') : '-'}</td>
                            <td>${total} ‚Ç¨</td>
                            <td>
                                <button onclick='openModal(${JSON.stringify(div)}, ${portfolioItemId}, "${symbol}", ${quantity})'>‚úèÔ∏è</button>
                                <button onclick="deleteDividendConfirm(${div.id})">üóëÔ∏è</button>
                            </td>
                        </tr>`;
            });
            html += '</tbody></table>';
            return html;
        }

        // Opens the dividend modal for create/edit.
        function openModal(dividend = null, portfolioItemId, symbol, quantity) {
            $('#dividendId').val(dividend?.id || '');
            $('#amount').val(dividend?.amount || '');
            $('#exDate').val(dividend?.exDate ? dividend.exDate.split('T')[0] : '');
            $('#paymentDate').val(dividend?.paymentDate ? dividend.paymentDate.split('T')[0] : '');
            $('#portfolioItemId').val(portfolioItemId);
            $('#symbol').val(symbol);
            $('#quantity').val(quantity);
            $('#total').val(dividend ? (dividend.amount * quantity).toFixed(2) + ' ‚Ç¨' : '');
            $('#dividendModal').show();
        }

        // Closes the modal and resets the form.
        function closeModal() {
            $('#dividendModal').hide();
            $('#dividendForm')[0].reset();
        }

        // Update total when the dividend amount is changed.
        $('#amount').on('input', function () {
            const amount = parseFloat(this.value) || 0;
            const quantity = parseFloat($('#quantity').val()) || 0;
            $('#total').val((amount * quantity).toFixed(2) + ' ‚Ç¨');
        });

        // Handles form submission for adding/updating a dividend.
        $('#dividendForm').on('submit', async function (e) {
            e.preventDefault();
            const id = $('#dividendId').val();
            const data = {
                id: id,
                portfolioItemId: $('#portfolioItemId').val(),
                symbol: $('#symbol').val(),
                amount: parseFloat($('#amount').val()),
                exDate: $('#exDate').val(),
                paymentDate: $('#paymentDate').val()
            };
            id ? await updateDividend(id, data) : await addDividend(data);
            closeModal();
            reloadDividends();
        });

        // Confirm deletion of a dividend entry.
        async function deleteDividendConfirm(id) {
            if (confirm('Delete this dividend?')) {
                await deleteDividend(id);
                reloadDividends();
            }
        }

        // Reload dividend data for both DataTable and Calendar.
        function reloadDividends() {
            $('#stocksTable').DataTable().destroy();
            $('#stocksTable tbody').empty();
            $('#grandTotal').html('');
            $('#loading').show();
            $('#stocksTable').hide();
            loadDividends();
            if(calendar) {
                loadCalendarEvents();
            }
        }

        // Loads dividend and portfolio data from the API and initializes the DataTable.
        function loadDividends() {
            $.getJSON('/api/PortfolioDividends', function (data) {
                const grouped = {};
                let grandTotal = 0;

                data.forEach(d => {
                    const key = `${d.symbol}_${d.portfolioItemId}`;
                    if (!grouped[key]) {
                        grouped[key] = {
                            symbol: d.symbol,
                            quantity: d.quantity,
                            purchaseDate: d.purchaseDate,
                            dividends: [],
                            portfolioItemId: d.portfolioItemId,
                            totalAmount: 0
                        };
                    }
                    if (d.id !== -1) {
                        grouped[key].dividends.push({
                            id: d.id,
                            amount: d.amount,
                            exDate: d.exDate,
                            paymentDate: d.paymentDate
                        });
                        grouped[key].totalAmount += d.amount;
                        grandTotal += d.amount * d.quantity;
                    }
                });

                const tableData = Object.values(grouped);

                // Populate the symbol filter dropdown.
                $('#symbolFilter').empty().append(`<option value="">All</option>`);
                [...new Set(tableData.map(d => d.symbol))].forEach(sym => {
                    $('#symbolFilter').append(`<option value="${sym}">${sym}</option>`);
                });

                // Initialize the DataTable.
                const table = $('#stocksTable').DataTable({
                    data: tableData,
                    columns: [
                        { className: 'details-control', orderable: false, data: null, defaultContent: '' },
                        { data: 'symbol' },
                        { data: 'quantity' },
                        {
                            data: 'purchaseDate',
                            render: d => d ? new Date(d).toLocaleDateString('en-GB') : '-'
                        },
                        {
                            data: 'dividends',
                            render: d => d && d.length ? '‚úîÔ∏è' : '‚ùå',
                            orderable: false
                        },
                        {
                            data: 'totalAmount',
                            render: d => d.toFixed(2) + ' ‚Ç¨'
                        },
                        {
                            data: null,
                            render: d => (d.totalAmount * d.quantity).toFixed(2) + ' ‚Ç¨',
                            orderable: false
                        }
                    ],
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'csvHtml5',
                            text: 'Export CSV',
                            title: 'Portfolio_Dividends',
                            customize: function (csv) {
                                return csv + `\nGrand Total,,${grandTotal.toFixed(2)} ‚Ç¨`;
                            }
                        }
                    ],
                    order: [[1, 'asc']],
                    pageLength: 10
                });

                // Toggle child row details on click.
                $('#stocksTable tbody').on('click', 'td.details-control', function () {
                    const tr = $(this).closest('tr');
                    const row = table.row(tr);
                    const data = row.data();
                    if (!data || typeof data.dividends === 'undefined') {
                        console.error('Invalid row data:', data);
                        return;
                    }
                    if (row.child.isShown()) {
                        row.child.hide();
                        tr.removeClass('shown');
                    } else {
                        row.child(format(data.dividends, data.portfolioItemId, data.symbol, data.quantity)).show();
                        tr.addClass('shown');
                    }
                });

                $('#symbolFilter').on('change', function () {
                    table.column(1).search(this.value).draw();
                });
                $('#hasDividendsOnly').on('change', function () {
                    table.column(4).search(this.checked ? '‚úîÔ∏è' : '').draw();
                });
                $('#loading').hide();
                $('#stocksTable').show();
                $('#grandTotal').html(`üí∞ <strong>Grand Total: ${grandTotal.toFixed(2)} ‚Ç¨</strong>`);
            });
        }

        // FullCalendar integration.
        let calendar;
        function initCalendar() {
            var calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,listWeek'
                },
                events: async function(fetchInfo, successCallback, failureCallback) {
                    try {
                        const response = await fetch('/api/PortfolioDividends');
                        const data = await response.json();
                        let events = [];
                        data.forEach(d => {
                            if(d.id !== -1 && d.paymentDate) {
                                events.push({
                                    id: d.id,
                                    title: `${d.symbol}: ${parseFloat(d.amount).toFixed(2)}‚Ç¨ Dividend`,
                                    start: d.paymentDate,
                                    allDay: true,
                                    extendedProps: {
                                        exDate: d.exDate,
                                        quantity: d.quantity,
                                        portfolioItemId: d.portfolioItemId
                                    }
                                });
                            }
                        });
                        successCallback(events);
                    } catch (error) {
                        failureCallback(error);
                    }
                },
                eventClick: function(info) {
                    alert('Dividend Details:\n' + info.event.title);
                }
            });
            calendar.render();
        }

        // Reload calendar events.
        function loadCalendarEvents() {
            if(calendar) {
                calendar.refetchEvents();
            }
        }

        // Toggle between Table and Calendar views.
        $('#btnTableView').on('click', function() {
            $('#calendarView').hide();
            $('#tableViewContainer').show();
        });

        $('#btnCalendarView').on('click', function() {
            $('#tableViewContainer').hide();
            $('#calendarView').show();
            if(!calendar) {
                initCalendar();
            } else {
                loadCalendarEvents();
            }
        });

        $(document).ready(function() {
            loadDividends();
        });
    </script>
}
